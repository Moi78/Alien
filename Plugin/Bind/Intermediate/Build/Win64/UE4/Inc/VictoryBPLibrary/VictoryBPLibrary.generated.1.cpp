// Copyright 1998-2017 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Generated code exported from UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "GeneratedCppIncludes.h"
#include "Private/VictoryBPLibraryPrivatePCH.h"
#include "VictoryBPLibrary.generated.dep.h"
PRAGMA_DISABLE_OPTIMIZATION
#ifdef _MSC_VER
#pragma warning (push)
#pragma warning (disable : 4883)
#endif
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCode1VictoryBPLibrary() {}
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FMargin();
	SLATE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnchors();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPrimitiveComponent_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FBox();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector2D();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintFunctionLibrary();
	ENGINE_API class UClass* Z_Construct_UClass_AActor();
	ENGINE_API class UClass* Z_Construct_UClass_UInstancedStaticMeshComponent_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FRotator();
	INPUTCORE_API class UScriptStruct* Z_Construct_UScriptStruct_FKey();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerController_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASceneCapture2D_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FLinearColor();
	ENGINE_API class UClass* Z_Construct_UClass_USceneCaptureComponent2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ACharacter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AStaticMeshActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMeshComponent_NoRegister();
	COREUOBJECT_API class UEnum* Z_Construct_UEnum_CoreUObject_ESearchCase();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FPlane();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureRenderTarget2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInterface_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UUserWidget_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USceneComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelStreamingKismet_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerStart_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundWave_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UStaticMeshComponent_NoRegister();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FHitResult();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECollisionChannel();
	UMG_API class UClass* Z_Construct_UClass_UWidget_NoRegister();
	COREUOBJECT_API class UEnum* Z_Construct_UEnum_CoreUObject_ESearchDir();
	UMG_API class UClass* Z_Construct_UClass_UPanelSlot_NoRegister();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FKeyEvent();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture2D_NoRegister();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EComponentMobility();
	ENGINE_API class UClass* Z_Construct_UClass_USoundAttenuation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAudioComponent_NoRegister();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAttachLocation();
	ENGINE_API class UClass* Z_Construct_UClass_APostProcessVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UActorComponent_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FDateTime();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EPathFollowingRequestResult();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationQueryFilter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APawn_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDestructibleComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundClass_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelStreaming_NoRegister();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EInputEvent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSubtitleCue();
	ENGINE_API class UClass* Z_Construct_UClass_USoundBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerController();
	ENGINE_API class UClass* Z_Construct_UClass_UActorComponent();

	VICTORYBPLIBRARY_API class UEnum* Z_Construct_UEnum_VictoryBPLibrary_ESpeedUnit();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_AreLineSegmentsCrossing();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_ClosestPointOnLineSeqment();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_ClosestPointOnSphereToLine();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_ClosestPointsOfLineSegments();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_ClosestPointsOnTwoLines();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_ConvertAnchorToAnchor();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_ConvertPhysicsLinearVelocity();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_GetConsoleVariableFloat();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_GetConsoleVariableInt();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_GetVelocityAtPoint();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_GridSnap();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_IsEvenNumber();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_IsLineInsideSphere();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_IsMultipleOf();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_IsPointInsideBox();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_IsPowerOfTwo();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_LineExtentBoxIntersection();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_LineToLineIntersection();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_NegateFloat();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_NegateInt();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_NegateVector2D();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_PointOnWhichSideOfLineSegment();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_ProjectPointOnLine();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_RoundToLowerMultiple();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_RoundToNearestMultiple();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_RoundToUpperMultiple();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_SetCenterOfMassOffset();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_SetVectorLength();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_SignedDistancePlanePoint();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_SphereBoxIntersection();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_VectorDegreesToRadians();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_VectorRadiansToDegrees();
	VICTORYBPLIBRARY_API class UClass* Z_Construct_UClass_UTKMathFunctionLibrary_NoRegister();
	VICTORYBPLIBRARY_API class UClass* Z_Construct_UClass_UTKMathFunctionLibrary();
	VICTORYBPLIBRARY_API class UClass* Z_Construct_UClass_AVictoryISM_NoRegister();
	VICTORYBPLIBRARY_API class UClass* Z_Construct_UClass_AVictoryISM();
	VICTORYBPLIBRARY_API class UEnum* Z_Construct_UEnum_VictoryBPLibrary_EJoyGraphicsFullScreen();
	VICTORYBPLIBRARY_API class UEnum* Z_Construct_UEnum_VictoryBPLibrary_EVictoryHMDDevice();
	VICTORYBPLIBRARY_API class UEnum* Z_Construct_UEnum_VictoryBPLibrary_EJoyImageFormats();
	VICTORYBPLIBRARY_API class UScriptStruct* Z_Construct_UScriptStruct_FLevelStreamInstanceInfo();
	VICTORYBPLIBRARY_API class UScriptStruct* Z_Construct_UScriptStruct_FVictoryInputAxis();
	VICTORYBPLIBRARY_API class UScriptStruct* Z_Construct_UScriptStruct_FVictoryInput();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Accessor__GetCharacterSkeletalMesh();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Accessor__GetNameAsString();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Accessor__GetPlayerController();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Actor__GetAttachedActors();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Actor__TeleportToActor();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Actor_PrestreamTextures();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_AddToActorRotation();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_AddToStreamingLevels();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_AnimatedVertex__GetAnimatedVertexLocations();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Animation__GetAimOffsets();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Animation__GetAimOffsetsFromRotation();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_AppendMultiple();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Array_IsValidIndex();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Array_Sort();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Calcs__ClosestPointToSourcePoint();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Capture2D_Project();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Capture2D_SaveImage();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_CaptureComponent2D_Project();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_CaptureComponent2D_SaveImage();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Character__GetControllerRotation();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_CharacterMovement__SetMaxMoveSpeed();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_ClientWindow__GameWindowIsForeGroundInOS();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Clone__StaticMeshActor();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_CompareMD5Hash();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Component_PrestreamTextures();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_constructRand();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Conversion__FloatToRoundedInteger();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Conversions__ColorToString();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Conversions__RotatorToVector();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Conversions__StringToColor();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Conversions__StringToRotator();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Conversions__StringToVector();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Conversions__VectorToRotator();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_CountOccurrancesOfSubString();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_CreateMD5Hash();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_CreateObject();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_CreatePlane();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_CreatePrimitiveComponent();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_CreateTextureRenderTarget2D();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Data__GetCharacterBoneLocations();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_DistanceToSurface__DistaceOfPointToMeshSurface();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_DoesMaterialHaveParameter();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Draw__Thick3DLineBetweenActors();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Draw__Thick3DLineFromCharacterSocket();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Draw__Thick3DLineFromSocket();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_DrawCircle();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_EqualEqual_Vector2DVector2D();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_FileIO__SaveStringTextToFile();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_FlashGameOnTaskBar();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_FlushPressedKeys();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetActorRelativeLocation();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetActorRelativeRotation();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetAllBoneNamesBelowBone();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetAllWidgetsOfClass();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetBoxContainingWorldPoints();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetCommandLine();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetComponentRelativeLocation();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetComponentRelativeRotation();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetCreationTime();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetDistanceBetweenComponentSurfaces();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetDistanceToCollision();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetFirstWidgetOfClass();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetGenericTeamId();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetHeadMountedDisplayDeviceType();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetLevelInstanceInfo();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetNamesOfLoadedLevels();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetObjectPath();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetPlayerStart();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetPlayerUniqueNetID();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetRotatorRelativeRotation();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetSoundWaveFromFile();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetStaticMeshVertexLocations();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetTimeAlive();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetTimeInPlay();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetUserDisplayAdapterBrand();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetVectorRelativeLocation();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetViewportPosition();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetViewportPositionHitResultByChannel();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetWidgetFromName();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GraphicsSettings__SetFrameRateCap();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GraphicsSettings__SetFrameRateToBeUnbound();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_HasSubstring();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_HideStreamingLevel();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_HorizontalFOV();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_InsertChildAt();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_IsAlphaNumeric();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_IsPointOnPlane();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_IsStandAlone();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_IsWidgetOfClassInViewport();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_JoyFileIO_GetFiles();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_JoyFileIO_GetFilesInRootAndAllSubFolders();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_JoyGraphicsSettings__FullScreen_Get();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_JoyGraphicsSettings__FullScreen_Set();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_JoyIsKey();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_LensFlare__GetLensFlareOffsets();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_LoadObjectFromAssetPath();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_LoadStringArrayFromFile();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_LoadTexture2D_FromDDSFile();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_LoadTexture2D_FromFileByExtension();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Loops_ResetBPRunawayCounter();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_MapRangeClamped();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_MaxOfFloatArray();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_MaxOfIntArray();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_MinOfFloatArray();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_MinOfIntArray();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Mobility__SetSceneCompMobility();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_NotEqual_Vector2DVector2D();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Open_URL_In_Web_Browser();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_OperatingSystem__GetCurrentPlatform();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_OptionsMenu__GetDisplayAdapterScreenResolutions();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Physics__EnterRagDoll();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Physics__GetLocationofRagDoll();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Physics__InitializeVictoryRagDoll();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Physics__IsRagDoll();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Physics__LeaveRagDoll();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Physics__UpdateCharacterCameraToRagdollLocation();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_PlayerController_GetControllerID();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_PlayerState_GetPlayerID();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_PlaySoundAtLocationFromFile();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_PlaySoundAttachedFromFile();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_PointDistanceToPlane();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_ProjectWorldToScreenPosition();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandBool_Bernoulli();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandBool_Bernoulli_MT();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandFloat_MINMAX_uniDis();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandFloat_MINMAX_uniDis_MT();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandFloat_uniDis();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandFloat_uniDis_MT();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandInt_MINMAX_uniDis();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandInt_MINMAX_uniDis_MT();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandInt_uniDis();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandInt_uniDis_MT();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_RealWorldTime__GetDifferenceBetweenTimes();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_RealWorldTime__GetTimePassedSincePreviousTime();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_RemoveAllWidgetsOfClass();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_RemoveFromStreamingLevels();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Rendering__FreezeGameRendering();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Rendering__UnFreezeGameRendering();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_SaveGameObject_GetAllSaveSlotFileNames();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_ScreenShots_Rename_Move_Most_Recent();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_seedRand();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_seedRandWithEntropy();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_seedRandWithTime();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Selection_SelectionBox();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_ServerTravel();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_SetBloomIntensity();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_SetComponentTickRate();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_SetGenericTeamId();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_SpawnActorIntoLevel();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_String__CombineStrings();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_String__CombineStrings_Multi();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_String__ExplodeString();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_StringConversion__GetFloatAsStringWithPrecision();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_StringIsEmpty();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Text_IsNumeric();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Text_ToFloat();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Text_ToInt();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_TraceData__GetTraceDataFromCharacterSocket();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_TraceData__GetTraceDataFromSkeletalMeshSocket();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestBone();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestSocket();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_TransformVectorToActorSpace();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_TransformVectorToActorSpaceAngle();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_UnloadStreamingLevel();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_UTCToLocal();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Vector2DInterpTo();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Vector2DInterpTo_Constant();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VerticalFOV();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_AI_MoveToWithFilter();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_Get_Pixel();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_GetGPUBrand();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_GetGPUInfo();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_GetGRHIAdapterName();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_GetPixelFromT2D();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_GetPixelsArrayFromT2D();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_GetStringFromOSClipboard();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_SavePixels();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_SaveStringToOSClipboard();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_SecondsToHoursMinutesSeconds();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryAppendInline();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryCreateProc();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryDestructible_DestroyChunk();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryFloatMinusEquals();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryFloatPlusEquals();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetAllActionKeyBindings();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetAllAxisAndActionMappingsForKey();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetAllAxisKeyBindings();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetApplicationName();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Bool();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Color();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Float();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Int();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Rotator();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetCustomConfigVar_String();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector2D();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetSoundVolume();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetVictoryInput();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetVictoryInputAxis();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryIntMinusEquals();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryIntPlusEquals();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryIsApplicationRunning();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryISM_ConvertToVictoryISMActors();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryISM_GetAllVictoryISMActors();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryLoadLevelInstance();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryPaths__ConfigDir();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryPaths__GameRootDirectory();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryPaths__LogsDir();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryPaths__SavedDir();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryPaths__ScreenShotsDir();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryPaths__Win64Dir_BinaryLocation();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryPaths__WindowsNoEditorDir();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryPhysics_UpdateAngularDamping();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryReBindActionKey();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryReBindAxisKey();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryRemoveActionKeyBind();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryRemoveAxisKeyBind();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySetCustomConfigVar_Bool();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySetCustomConfigVar_Color();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySetCustomConfigVar_Float();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySetCustomConfigVar_Int();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySetCustomConfigVar_Rotator();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySetCustomConfigVar_String();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector2D();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySimulateKeyPress();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySimulateMouseWheel();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySortFloatArray();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySortIntArray();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySoundVolumeChange();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Viewport__EnableWorldRendering();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Viewport__GetCenterOfViewport();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Viewport__GetMousePosition();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Viewport__SetMousePosition();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_ViewportPositionDeproject();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Visibility__GetNotRenderedActors();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Visibility__GetRenderedActors();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_WidgetGetChildrenOfClass();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_WidgetGetParentOfClass();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_WidgetIsChildOf();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_WorldType__InEditorWorld();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_WorldType__InGameInstanceWorld();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_WorldType__InPIEWorld();
	VICTORYBPLIBRARY_API class UClass* Z_Construct_UClass_UVictoryBPFunctionLibrary_NoRegister();
	VICTORYBPLIBRARY_API class UClass* Z_Construct_UClass_UVictoryBPFunctionLibrary();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPHTML_IsHTML();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryBPHTML_VictoryHTML5_SetCursorVisible();
	VICTORYBPLIBRARY_API class UClass* Z_Construct_UClass_UVictoryBPHTML_NoRegister();
	VICTORYBPLIBRARY_API class UClass* Z_Construct_UClass_UVictoryBPHTML();
	VICTORYBPLIBRARY_API class UScriptStruct* Z_Construct_UScriptStruct_FVictorySubtitleCue();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_AVictoryPC_OnVictorySubtitlesQueued();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_AVictoryPC_Subtitles_CPPDelegate();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_AVictoryPC_VictoryPC_GetMyIP_DataReceived();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_AVictoryPC_VictoryPC_GetMyIP_SendRequest();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_AVictoryPC_VictoryPlaySpeechSound();
	VICTORYBPLIBRARY_API class UClass* Z_Construct_UClass_AVictoryPC_NoRegister();
	VICTORYBPLIBRARY_API class UClass* Z_Construct_UClass_AVictoryPC();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryTMapComp_Int_Float__AddPair();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryTMapComp_Int_Float__Clear();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryTMapComp_Int_Float__Get();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryTMapComp_Int_Float__Remove();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryTMapComp_Int_Vector__AddPair();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryTMapComp_Int_Vector__Clear();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryTMapComp_Int_Vector__Get();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryTMapComp_Int_Vector__Remove();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryTMapComp_String_Actor__AddPair();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryTMapComp_String_Actor__Clear();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryTMapComp_String_Actor__Get();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryTMapComp_String_Actor__Remove();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryTMapComp_String_Int__AddPair();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryTMapComp_String_Int__Clear();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryTMapComp_String_Int__Get();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryTMapComp_String_Int__Remove();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryTMapComp_String_Rotator__AddPair();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryTMapComp_String_Rotator__Clear();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryTMapComp_String_Rotator__Get();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryTMapComp_String_Rotator__Remove();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryTMapComp_String_String__AddPair();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryTMapComp_String_String__Clear();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryTMapComp_String_String__Get();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryTMapComp_String_String__Remove();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryTMapComp_String_Vector__AddPair();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryTMapComp_String_Vector__Clear();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryTMapComp_String_Vector__Get();
	VICTORYBPLIBRARY_API class UFunction* Z_Construct_UFunction_UVictoryTMapComp_String_Vector__Remove();
	VICTORYBPLIBRARY_API class UClass* Z_Construct_UClass_UVictoryTMapComp_NoRegister();
	VICTORYBPLIBRARY_API class UClass* Z_Construct_UClass_UVictoryTMapComp();
	VICTORYBPLIBRARY_API class UPackage* Z_Construct_UPackage__Script_VictoryBPLibrary();
static UEnum* ESpeedUnit_StaticEnum()
{
	extern VICTORYBPLIBRARY_API class UPackage* Z_Construct_UPackage__Script_VictoryBPLibrary();
	static UEnum* Singleton = nullptr;
	if (!Singleton)
	{
		extern VICTORYBPLIBRARY_API class UEnum* Z_Construct_UEnum_VictoryBPLibrary_ESpeedUnit();
		Singleton = GetStaticEnum(Z_Construct_UEnum_VictoryBPLibrary_ESpeedUnit, Z_Construct_UPackage__Script_VictoryBPLibrary(), TEXT("ESpeedUnit"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ESpeedUnit(ESpeedUnit_StaticEnum, TEXT("/Script/VictoryBPLibrary"), TEXT("ESpeedUnit"), false, nullptr, nullptr);
	UEnum* Z_Construct_UEnum_VictoryBPLibrary_ESpeedUnit()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_VictoryBPLibrary();
		extern uint32 Get_Z_Construct_UEnum_VictoryBPLibrary_ESpeedUnit_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ESpeedUnit"), 0, Get_Z_Construct_UEnum_VictoryBPLibrary_ESpeedUnit_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ESpeedUnit"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Emplace(TEXT("CentimeterPerSecond"), 0);
			EnumNames.Emplace(TEXT("FootPerSecond"), 1);
			EnumNames.Emplace(TEXT("MeterPerSecond"), 2);
			EnumNames.Emplace(TEXT("MeterPerMinute"), 3);
			EnumNames.Emplace(TEXT("KilometerPerSecond"), 4);
			EnumNames.Emplace(TEXT("KilometerPerMinute"), 5);
			EnumNames.Emplace(TEXT("KilometerPerHour"), 6);
			EnumNames.Emplace(TEXT("MilePerHour"), 7);
			EnumNames.Emplace(TEXT("Knot"), 8);
			EnumNames.Emplace(TEXT("Mach"), 9);
			EnumNames.Emplace(TEXT("SpeedOfLight"), 10);
			EnumNames.Emplace(TEXT("YardPerSecond"), 11);
			EnumNames.Emplace(TEXT("ESpeedUnit_MAX"), 12);
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("ESpeedUnit");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("CentimeterPerSecond.ToolTip"), TEXT("Centimeter / second (cm/s). This is default unreal velocity unit."));
			MetaData->SetValue(ReturnEnum, TEXT("FootPerSecond.ToolTip"), TEXT("Foot / second (ft/s)."));
			MetaData->SetValue(ReturnEnum, TEXT("KilometerPerHour.ToolTip"), TEXT("Kilometer / hour (km/h)."));
			MetaData->SetValue(ReturnEnum, TEXT("KilometerPerMinute.ToolTip"), TEXT("Kilometer / minute (km/min)."));
			MetaData->SetValue(ReturnEnum, TEXT("KilometerPerSecond.ToolTip"), TEXT("Kilometer / second (km/s)."));
			MetaData->SetValue(ReturnEnum, TEXT("Knot.ToolTip"), TEXT("Knot (kn). Nautical mile per hour."));
			MetaData->SetValue(ReturnEnum, TEXT("Mach.ToolTip"), TEXT("Mach (speed of sound) (M) at standard atm."));
			MetaData->SetValue(ReturnEnum, TEXT("MeterPerMinute.ToolTip"), TEXT("Meter / minute (m/min)."));
			MetaData->SetValue(ReturnEnum, TEXT("MeterPerSecond.ToolTip"), TEXT("Meter / second (m/s)."));
			MetaData->SetValue(ReturnEnum, TEXT("MilePerHour.ToolTip"), TEXT("Mile / hour (mph)."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/TKMathFunctionLibrary.h"));
			MetaData->SetValue(ReturnEnum, TEXT("SpeedOfLight.ToolTip"), TEXT("Speed of light."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Speed Units Enum."));
			MetaData->SetValue(ReturnEnum, TEXT("YardPerSecond.ToolTip"), TEXT("Yard / second."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_VictoryBPLibrary_ESpeedUnit_CRC() { return 3708889449U; }
	void UTKMathFunctionLibrary::StaticRegisterNativesUTKMathFunctionLibrary()
	{
		UClass* Class = UTKMathFunctionLibrary::StaticClass();
		static const TNameNativePtrPair<ANSICHAR> AnsiFuncs[] = {
			{ "AreLineSegmentsCrossing", (Native)&UTKMathFunctionLibrary::execAreLineSegmentsCrossing },
			{ "ClosestPointOnLineSeqment", (Native)&UTKMathFunctionLibrary::execClosestPointOnLineSeqment },
			{ "ClosestPointOnSphereToLine", (Native)&UTKMathFunctionLibrary::execClosestPointOnSphereToLine },
			{ "ClosestPointsOfLineSegments", (Native)&UTKMathFunctionLibrary::execClosestPointsOfLineSegments },
			{ "ClosestPointsOnTwoLines", (Native)&UTKMathFunctionLibrary::execClosestPointsOnTwoLines },
			{ "ConvertAnchorToAnchor", (Native)&UTKMathFunctionLibrary::execConvertAnchorToAnchor },
			{ "ConvertPhysicsLinearVelocity", (Native)&UTKMathFunctionLibrary::execConvertPhysicsLinearVelocity },
			{ "GetConsoleVariableFloat", (Native)&UTKMathFunctionLibrary::execGetConsoleVariableFloat },
			{ "GetConsoleVariableInt", (Native)&UTKMathFunctionLibrary::execGetConsoleVariableInt },
			{ "GetVelocityAtPoint", (Native)&UTKMathFunctionLibrary::execGetVelocityAtPoint },
			{ "GridSnap", (Native)&UTKMathFunctionLibrary::execGridSnap },
			{ "IsEvenNumber", (Native)&UTKMathFunctionLibrary::execIsEvenNumber },
			{ "IsLineInsideSphere", (Native)&UTKMathFunctionLibrary::execIsLineInsideSphere },
			{ "IsMultipleOf", (Native)&UTKMathFunctionLibrary::execIsMultipleOf },
			{ "IsPointInsideBox", (Native)&UTKMathFunctionLibrary::execIsPointInsideBox },
			{ "IsPowerOfTwo", (Native)&UTKMathFunctionLibrary::execIsPowerOfTwo },
			{ "LineExtentBoxIntersection", (Native)&UTKMathFunctionLibrary::execLineExtentBoxIntersection },
			{ "LineToLineIntersection", (Native)&UTKMathFunctionLibrary::execLineToLineIntersection },
			{ "NegateFloat", (Native)&UTKMathFunctionLibrary::execNegateFloat },
			{ "NegateInt", (Native)&UTKMathFunctionLibrary::execNegateInt },
			{ "NegateVector2D", (Native)&UTKMathFunctionLibrary::execNegateVector2D },
			{ "PointOnWhichSideOfLineSegment", (Native)&UTKMathFunctionLibrary::execPointOnWhichSideOfLineSegment },
			{ "ProjectPointOnLine", (Native)&UTKMathFunctionLibrary::execProjectPointOnLine },
			{ "RoundToLowerMultiple", (Native)&UTKMathFunctionLibrary::execRoundToLowerMultiple },
			{ "RoundToNearestMultiple", (Native)&UTKMathFunctionLibrary::execRoundToNearestMultiple },
			{ "RoundToUpperMultiple", (Native)&UTKMathFunctionLibrary::execRoundToUpperMultiple },
			{ "SetCenterOfMassOffset", (Native)&UTKMathFunctionLibrary::execSetCenterOfMassOffset },
			{ "SetVectorLength", (Native)&UTKMathFunctionLibrary::execSetVectorLength },
			{ "SignedDistancePlanePoint", (Native)&UTKMathFunctionLibrary::execSignedDistancePlanePoint },
			{ "SphereBoxIntersection", (Native)&UTKMathFunctionLibrary::execSphereBoxIntersection },
			{ "VectorDegreesToRadians", (Native)&UTKMathFunctionLibrary::execVectorDegreesToRadians },
			{ "VectorRadiansToDegrees", (Native)&UTKMathFunctionLibrary::execVectorRadiansToDegrees },
		};
		FNativeFunctionRegistrar::RegisterFunctions(Class, AnsiFuncs, 32);
	}
	UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_AreLineSegmentsCrossing()
	{
		struct TKMathFunctionLibrary_eventAreLineSegmentsCrossing_Parms
		{
			FVector pointA1;
			FVector pointA2;
			FVector pointB1;
			FVector pointB2;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTKMathFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AreLineSegmentsCrossing"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(TKMathFunctionLibrary_eventAreLineSegmentsCrossing_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, TKMathFunctionLibrary_eventAreLineSegmentsCrossing_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, TKMathFunctionLibrary_eventAreLineSegmentsCrossing_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, TKMathFunctionLibrary_eventAreLineSegmentsCrossing_Parms), sizeof(bool), true);
			UProperty* NewProp_pointB2 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("pointB2"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(pointB2, TKMathFunctionLibrary_eventAreLineSegmentsCrossing_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_pointB1 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("pointB1"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(pointB1, TKMathFunctionLibrary_eventAreLineSegmentsCrossing_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_pointA2 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("pointA2"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(pointA2, TKMathFunctionLibrary_eventAreLineSegmentsCrossing_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_pointA1 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("pointA1"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(pointA1, TKMathFunctionLibrary_eventAreLineSegmentsCrossing_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|TK-Master Math|Vector|Intersection"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/TKMathFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("* Returns true if the two line segments are intersecting and not parallel.\n* If you need the intersection point, use Closest Points On Two Lines."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_ClosestPointOnLineSeqment()
	{
		struct TKMathFunctionLibrary_eventClosestPointOnLineSeqment_Parms
		{
			FVector Point;
			FVector LineStart;
			FVector LineEnd;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTKMathFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClosestPointOnLineSeqment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(TKMathFunctionLibrary_eventClosestPointOnLineSeqment_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, TKMathFunctionLibrary_eventClosestPointOnLineSeqment_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_LineEnd = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineEnd"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LineEnd, TKMathFunctionLibrary_eventClosestPointOnLineSeqment_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_LineStart = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineStart"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LineStart, TKMathFunctionLibrary_eventClosestPointOnLineSeqment_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Point = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Point"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Point, TKMathFunctionLibrary_eventClosestPointOnLineSeqment_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|TK-Master Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/TKMathFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Find the point on line segment from LineStart to LineEnd which is closest to Point."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_ClosestPointOnSphereToLine()
	{
		struct TKMathFunctionLibrary_eventClosestPointOnSphereToLine_Parms
		{
			FVector SphereOrigin;
			float SphereRadius;
			FVector LineOrigin;
			FVector LineDir;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTKMathFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClosestPointOnSphereToLine"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(TKMathFunctionLibrary_eventClosestPointOnSphereToLine_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, TKMathFunctionLibrary_eventClosestPointOnSphereToLine_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_LineDir = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineDir"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LineDir, TKMathFunctionLibrary_eventClosestPointOnSphereToLine_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_LineOrigin = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineOrigin"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LineOrigin, TKMathFunctionLibrary_eventClosestPointOnSphereToLine_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_SphereRadius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SphereRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(SphereRadius, TKMathFunctionLibrary_eventClosestPointOnSphereToLine_Parms), 0x0010000000000080);
			UProperty* NewProp_SphereOrigin = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SphereOrigin"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SphereOrigin, TKMathFunctionLibrary_eventClosestPointOnSphereToLine_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|TK-Master Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/TKMathFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Find closest point on a Sphere to a Line.\nWhen line intersects Sphere, then closest point to LineOrigin is returned.\n@param SphereOrigin           Origin of Sphere\n@param SphereRadius           Radius of Sphere\n@param LineOrigin             Origin of line\n@param LineDir                        Direction of line.\n@return Closest point on sphere to given line."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_ClosestPointsOfLineSegments()
	{
		struct TKMathFunctionLibrary_eventClosestPointsOfLineSegments_Parms
		{
			FVector Line1Start;
			FVector Line1End;
			FVector Line2Start;
			FVector Line2End;
			FVector LinePoint1;
			FVector LinePoint2;
		};
		UObject* Outer=Z_Construct_UClass_UTKMathFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClosestPointsOfLineSegments"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(TKMathFunctionLibrary_eventClosestPointsOfLineSegments_Parms));
			UProperty* NewProp_LinePoint2 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LinePoint2"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LinePoint2, TKMathFunctionLibrary_eventClosestPointsOfLineSegments_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_LinePoint1 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LinePoint1"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LinePoint1, TKMathFunctionLibrary_eventClosestPointsOfLineSegments_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Line2End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Line2End"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Line2End, TKMathFunctionLibrary_eventClosestPointsOfLineSegments_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Line2Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Line2Start"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Line2Start, TKMathFunctionLibrary_eventClosestPointsOfLineSegments_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Line1End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Line1End"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Line1End, TKMathFunctionLibrary_eventClosestPointsOfLineSegments_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Line1Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Line1Start"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Line1Start, TKMathFunctionLibrary_eventClosestPointsOfLineSegments_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|TK-Master Math|Vector|Intersection"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/TKMathFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Find closest points between 2 line segments.\n@param        (Line1Start, Line1End)  defines the first line segment.\n@param        (Line2Start, Line2End)  defines the second line segment.\n@param        LinePoint1              Closest point on segment 1 to segment 2.\n@param        LinePoint2              Closest point on segment 2 to segment 1."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_ClosestPointsOnTwoLines()
	{
		struct TKMathFunctionLibrary_eventClosestPointsOnTwoLines_Parms
		{
			FVector closestPointLine1;
			FVector closestPointLine2;
			FVector linePoint1;
			FVector lineVec1;
			FVector linePoint2;
			FVector lineVec2;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTKMathFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClosestPointsOnTwoLines"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(TKMathFunctionLibrary_eventClosestPointsOnTwoLines_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, TKMathFunctionLibrary_eventClosestPointsOnTwoLines_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, TKMathFunctionLibrary_eventClosestPointsOnTwoLines_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, TKMathFunctionLibrary_eventClosestPointsOnTwoLines_Parms), sizeof(bool), true);
			UProperty* NewProp_lineVec2 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("lineVec2"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(lineVec2, TKMathFunctionLibrary_eventClosestPointsOnTwoLines_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_linePoint2 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("linePoint2"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(linePoint2, TKMathFunctionLibrary_eventClosestPointsOnTwoLines_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_lineVec1 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("lineVec1"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(lineVec1, TKMathFunctionLibrary_eventClosestPointsOnTwoLines_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_linePoint1 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("linePoint1"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(linePoint1, TKMathFunctionLibrary_eventClosestPointsOnTwoLines_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_closestPointLine2 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("closestPointLine2"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(closestPointLine2, TKMathFunctionLibrary_eventClosestPointsOnTwoLines_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_closestPointLine1 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("closestPointLine1"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(closestPointLine1, TKMathFunctionLibrary_eventClosestPointsOnTwoLines_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|TK-Master Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/TKMathFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("* Calculate the closest points between two infinitely long lines.\n* If lines are intersecting (not parallel) it will return false! Use Line To Line Intersection instead.\n* @param closestPointLine1 The closest point of line1 to line2. Returns zero if the lines intersect.\n* @param closestPointLine2 The closest point of line2 to line1. Returns zero if the lines intersect.\n* @param linePoint1 Line point of the first line.\n* @param lineVec1 Line direction (normal) of the first line. Should be a normalized vector.\n* @param linePoint2 Line point of the second line.\n* @param lineVec2 Line direction (normal) of the second line. Should be a normalized vector.\n* @return true if lines are parallel, false otherwise."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_ConvertAnchorToAnchor()
	{
		struct TKMathFunctionLibrary_eventConvertAnchorToAnchor_Parms
		{
			UObject* WorldContextObject;
			FAnchors CurrentAnchor;
			FMargin Offsets;
			FAnchors TargetAnchor;
			FMargin ConvertedOffsets;
		};
		UObject* Outer=Z_Construct_UClass_UTKMathFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ConvertAnchorToAnchor"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(TKMathFunctionLibrary_eventConvertAnchorToAnchor_Parms));
			UProperty* NewProp_ConvertedOffsets = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ConvertedOffsets"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ConvertedOffsets, TKMathFunctionLibrary_eventConvertAnchorToAnchor_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FMargin());
			UProperty* NewProp_TargetAnchor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetAnchor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TargetAnchor, TKMathFunctionLibrary_eventConvertAnchorToAnchor_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FAnchors());
			UProperty* NewProp_Offsets = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Offsets"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Offsets, TKMathFunctionLibrary_eventConvertAnchorToAnchor_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FMargin());
			UProperty* NewProp_CurrentAnchor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CurrentAnchor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(CurrentAnchor, TKMathFunctionLibrary_eventConvertAnchorToAnchor_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FAnchors());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, TKMathFunctionLibrary_eventConvertAnchorToAnchor_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|TK-Master Math|Anchor"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/TKMathFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts UMG layout offsets to another anchor."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_ConvertPhysicsLinearVelocity()
	{
		struct TKMathFunctionLibrary_eventConvertPhysicsLinearVelocity_Parms
		{
			FVector Velocity;
			TEnumAsByte<ESpeedUnit> SpeedUnit;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTKMathFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ConvertPhysicsLinearVelocity"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(TKMathFunctionLibrary_eventConvertPhysicsLinearVelocity_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, TKMathFunctionLibrary_eventConvertPhysicsLinearVelocity_Parms), 0x0010000000000580);
			UProperty* NewProp_SpeedUnit = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpeedUnit"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(SpeedUnit, TKMathFunctionLibrary_eventConvertPhysicsLinearVelocity_Parms), 0x0010000000000080, Z_Construct_UEnum_VictoryBPLibrary_ESpeedUnit());
			UProperty* NewProp_Velocity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Velocity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Velocity, TKMathFunctionLibrary_eventConvertPhysicsLinearVelocity_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|TK-Master Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/TKMathFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts Physics Linear Velocity to a more useful speed unit."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_GetConsoleVariableFloat()
	{
		struct TKMathFunctionLibrary_eventGetConsoleVariableFloat_Parms
		{
			FString VariableName;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTKMathFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetConsoleVariableFloat"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(TKMathFunctionLibrary_eventGetConsoleVariableFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, TKMathFunctionLibrary_eventGetConsoleVariableFloat_Parms), 0x0010000000000580);
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, TKMathFunctionLibrary_eventGetConsoleVariableFloat_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Console"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/TKMathFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_GetConsoleVariableInt()
	{
		struct TKMathFunctionLibrary_eventGetConsoleVariableInt_Parms
		{
			FString VariableName;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTKMathFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetConsoleVariableInt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(TKMathFunctionLibrary_eventGetConsoleVariableInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, TKMathFunctionLibrary_eventGetConsoleVariableInt_Parms), 0x0010000000000580);
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, TKMathFunctionLibrary_eventGetConsoleVariableInt_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Console"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/TKMathFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_GetVelocityAtPoint()
	{
		struct TKMathFunctionLibrary_eventGetVelocityAtPoint_Parms
		{
			UPrimitiveComponent* Target;
			FVector Point;
			FName BoneName;
			bool DrawDebugInfo;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTKMathFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetVelocityAtPoint"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(TKMathFunctionLibrary_eventGetVelocityAtPoint_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, TKMathFunctionLibrary_eventGetVelocityAtPoint_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(DrawDebugInfo, TKMathFunctionLibrary_eventGetVelocityAtPoint_Parms, bool);
			UProperty* NewProp_DrawDebugInfo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebugInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DrawDebugInfo, TKMathFunctionLibrary_eventGetVelocityAtPoint_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(DrawDebugInfo, TKMathFunctionLibrary_eventGetVelocityAtPoint_Parms), sizeof(bool), true);
			UProperty* NewProp_BoneName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoneName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(BoneName, TKMathFunctionLibrary_eventGetVelocityAtPoint_Parms), 0x0010000000000080);
			UProperty* NewProp_Point = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Point"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Point, TKMathFunctionLibrary_eventGetVelocityAtPoint_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Target, TKMathFunctionLibrary_eventGetVelocityAtPoint_Parms), 0x0010000000080080, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Physics"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_BoneName"), TEXT("None"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_DrawDebugInfo"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/TKMathFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the current world velocity of a point on a physics-enabled component.\n@param Point - Point in world space.\n@param DrawDebugInfo - Draw debug point & string.\n@param BoneName - If a SkeletalMeshComponent, name of body to get velocity of. 'None' indicates root body.\n@return The velocity of the point in world space."));
			MetaData->SetValue(NewProp_Target, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_GridSnap()
	{
		struct TKMathFunctionLibrary_eventGridSnap_Parms
		{
			FVector A;
			float Grid;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTKMathFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GridSnap"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(TKMathFunctionLibrary_eventGridSnap_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, TKMathFunctionLibrary_eventGridSnap_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Grid = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Grid"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Grid, TKMathFunctionLibrary_eventGridSnap_Parms), 0x0010000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(A, TKMathFunctionLibrary_eventGridSnap_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|TK-Master Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/TKMathFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Snaps vector to nearest grid multiple."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_IsEvenNumber()
	{
		struct TKMathFunctionLibrary_eventIsEvenNumber_Parms
		{
			float A;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTKMathFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsEvenNumber"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(TKMathFunctionLibrary_eventIsEvenNumber_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, TKMathFunctionLibrary_eventIsEvenNumber_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, TKMathFunctionLibrary_eventIsEvenNumber_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, TKMathFunctionLibrary_eventIsEvenNumber_Parms), sizeof(bool), true);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(A, TKMathFunctionLibrary_eventIsEvenNumber_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|TK-Master Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("isEven"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/TKMathFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if the number is even (false if it's odd)."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_IsLineInsideSphere()
	{
		struct TKMathFunctionLibrary_eventIsLineInsideSphere_Parms
		{
			FVector LineStart;
			FVector LineDir;
			float LineLength;
			FVector SphereOrigin;
			float SphereRadius;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTKMathFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsLineInsideSphere"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(TKMathFunctionLibrary_eventIsLineInsideSphere_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, TKMathFunctionLibrary_eventIsLineInsideSphere_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, TKMathFunctionLibrary_eventIsLineInsideSphere_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, TKMathFunctionLibrary_eventIsLineInsideSphere_Parms), sizeof(bool), true);
			UProperty* NewProp_SphereRadius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SphereRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(SphereRadius, TKMathFunctionLibrary_eventIsLineInsideSphere_Parms), 0x0010000000000080);
			UProperty* NewProp_SphereOrigin = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SphereOrigin"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SphereOrigin, TKMathFunctionLibrary_eventIsLineInsideSphere_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_LineLength = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineLength"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LineLength, TKMathFunctionLibrary_eventIsLineInsideSphere_Parms), 0x0010000000000080);
			UProperty* NewProp_LineDir = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineDir"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LineDir, TKMathFunctionLibrary_eventIsLineInsideSphere_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_LineStart = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineStart"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LineStart, TKMathFunctionLibrary_eventIsLineInsideSphere_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|TK-Master Math|Vector|Intersection"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/TKMathFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Determines whether a line intersects a sphere."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_IsMultipleOf()
	{
		struct TKMathFunctionLibrary_eventIsMultipleOf_Parms
		{
			int32 A;
			int32 Multiple;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTKMathFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsMultipleOf"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(TKMathFunctionLibrary_eventIsMultipleOf_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, TKMathFunctionLibrary_eventIsMultipleOf_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, TKMathFunctionLibrary_eventIsMultipleOf_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, TKMathFunctionLibrary_eventIsMultipleOf_Parms), sizeof(bool), true);
			UProperty* NewProp_Multiple = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Multiple"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Multiple, TKMathFunctionLibrary_eventIsMultipleOf_Parms), 0x0010000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(A, TKMathFunctionLibrary_eventIsMultipleOf_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|TK-Master Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/TKMathFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if the integer is a multiple of the given number."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_IsPointInsideBox()
	{
		struct TKMathFunctionLibrary_eventIsPointInsideBox_Parms
		{
			FVector Point;
			FVector BoxOrigin;
			FVector BoxExtent;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTKMathFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsPointInsideBox"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(TKMathFunctionLibrary_eventIsPointInsideBox_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, TKMathFunctionLibrary_eventIsPointInsideBox_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, TKMathFunctionLibrary_eventIsPointInsideBox_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, TKMathFunctionLibrary_eventIsPointInsideBox_Parms), sizeof(bool), true);
			UProperty* NewProp_BoxExtent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoxExtent"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BoxExtent, TKMathFunctionLibrary_eventIsPointInsideBox_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_BoxOrigin = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoxOrigin"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BoxOrigin, TKMathFunctionLibrary_eventIsPointInsideBox_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Point = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Point"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Point, TKMathFunctionLibrary_eventIsPointInsideBox_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|TK-Master Math|Vector|Intersection"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/TKMathFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if the given Point vector is within a box (defined by BoxOrigin and BoxExtent)."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_IsPowerOfTwo()
	{
		struct TKMathFunctionLibrary_eventIsPowerOfTwo_Parms
		{
			int32 x;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTKMathFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsPowerOfTwo"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(TKMathFunctionLibrary_eventIsPowerOfTwo_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, TKMathFunctionLibrary_eventIsPowerOfTwo_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, TKMathFunctionLibrary_eventIsPowerOfTwo_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, TKMathFunctionLibrary_eventIsPowerOfTwo_Parms), sizeof(bool), true);
			UProperty* NewProp_x = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("x"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(x, TKMathFunctionLibrary_eventIsPowerOfTwo_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|TK-Master Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("PwrOf2"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/TKMathFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if the integer is a power of two number."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_LineExtentBoxIntersection()
	{
		struct TKMathFunctionLibrary_eventLineExtentBoxIntersection_Parms
		{
			FBox inBox;
			FVector Start;
			FVector End;
			FVector Extent;
			FVector HitLocation;
			FVector HitNormal;
			float HitTime;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTKMathFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LineExtentBoxIntersection"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(TKMathFunctionLibrary_eventLineExtentBoxIntersection_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, TKMathFunctionLibrary_eventLineExtentBoxIntersection_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, TKMathFunctionLibrary_eventLineExtentBoxIntersection_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, TKMathFunctionLibrary_eventLineExtentBoxIntersection_Parms), sizeof(bool), true);
			UProperty* NewProp_HitTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HitTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(HitTime, TKMathFunctionLibrary_eventLineExtentBoxIntersection_Parms), 0x0010000000000180);
			UProperty* NewProp_HitNormal = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HitNormal"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(HitNormal, TKMathFunctionLibrary_eventLineExtentBoxIntersection_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_HitLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HitLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(HitLocation, TKMathFunctionLibrary_eventLineExtentBoxIntersection_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Extent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Extent"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Extent, TKMathFunctionLibrary_eventLineExtentBoxIntersection_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("End"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(End, TKMathFunctionLibrary_eventLineExtentBoxIntersection_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Start"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Start, TKMathFunctionLibrary_eventLineExtentBoxIntersection_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_inBox = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("inBox"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(inBox, TKMathFunctionLibrary_eventLineExtentBoxIntersection_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FBox());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|TK-Master Math|Vector|Intersection"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/TKMathFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Swept-Box vs Box test.\nSweps a box defined by Extend from Start to End points and returns whether it hit a box or not plus the hit location and hit normal if successful."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_LineToLineIntersection()
	{
		struct TKMathFunctionLibrary_eventLineToLineIntersection_Parms
		{
			FVector IntersectionPoint;
			FVector LinePoint1;
			FVector LineDir1;
			FVector LinePoint2;
			FVector LineDir2;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTKMathFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LineToLineIntersection"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(TKMathFunctionLibrary_eventLineToLineIntersection_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, TKMathFunctionLibrary_eventLineToLineIntersection_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, TKMathFunctionLibrary_eventLineToLineIntersection_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, TKMathFunctionLibrary_eventLineToLineIntersection_Parms), sizeof(bool), true);
			UProperty* NewProp_LineDir2 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineDir2"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LineDir2, TKMathFunctionLibrary_eventLineToLineIntersection_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_LinePoint2 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LinePoint2"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LinePoint2, TKMathFunctionLibrary_eventLineToLineIntersection_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_LineDir1 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineDir1"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LineDir1, TKMathFunctionLibrary_eventLineToLineIntersection_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_LinePoint1 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LinePoint1"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LinePoint1, TKMathFunctionLibrary_eventLineToLineIntersection_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_IntersectionPoint = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IntersectionPoint"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(IntersectionPoint, TKMathFunctionLibrary_eventLineToLineIntersection_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|TK-Master Math|Vector|Intersection"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/TKMathFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Calculate the intersection point of two infinitely long lines. Returns true if lines intersect, otherwise false.\nNote that in 3d, two lines do not intersect most of the time.\nSo if the two lines are not in the same plane, use Closest Points On Two Lines instead.\n@param IntersectionPoint The intersection point of the lines. Returns zero if the lines do not intersect or the operation fails.\n@param LinePoint1 Line point of the first line.\n@param LineDir1 Line direction (normal) of the first line. Should be a normalized vector.\n@param LinePoint2 Line point of the second line.\n@param LineDir2 Line direction (normal) of the second line. Should be a normalized vector.\n@return true if lines intersect, otherwise false."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_NegateFloat()
	{
		struct TKMathFunctionLibrary_eventNegateFloat_Parms
		{
			float A;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTKMathFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NegateFloat"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(TKMathFunctionLibrary_eventNegateFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, TKMathFunctionLibrary_eventNegateFloat_Parms), 0x0010000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(A, TKMathFunctionLibrary_eventNegateFloat_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|TK-Master Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/TKMathFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Reverses the sign (- or +) of a float."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_NegateInt()
	{
		struct TKMathFunctionLibrary_eventNegateInt_Parms
		{
			int32 A;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTKMathFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NegateInt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(TKMathFunctionLibrary_eventNegateInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, TKMathFunctionLibrary_eventNegateInt_Parms), 0x0010000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(A, TKMathFunctionLibrary_eventNegateInt_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|TK-Master Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/TKMathFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Reverses the sign (- or +) of an integer."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_NegateVector2D()
	{
		struct TKMathFunctionLibrary_eventNegateVector2D_Parms
		{
			FVector2D A;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTKMathFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NegateVector2D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(TKMathFunctionLibrary_eventNegateVector2D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, TKMathFunctionLibrary_eventNegateVector2D_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(A, TKMathFunctionLibrary_eventNegateVector2D_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|TK-Master Math|Vector2D"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/TKMathFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Reverses the sign (- or +) of a Vector2D."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_PointOnWhichSideOfLineSegment()
	{
		struct TKMathFunctionLibrary_eventPointOnWhichSideOfLineSegment_Parms
		{
			FVector linePoint1;
			FVector linePoint2;
			FVector point;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTKMathFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PointOnWhichSideOfLineSegment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(TKMathFunctionLibrary_eventPointOnWhichSideOfLineSegment_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, TKMathFunctionLibrary_eventPointOnWhichSideOfLineSegment_Parms), 0x0010000000000580);
			UProperty* NewProp_point = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("point"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(point, TKMathFunctionLibrary_eventPointOnWhichSideOfLineSegment_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_linePoint2 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("linePoint2"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(linePoint2, TKMathFunctionLibrary_eventPointOnWhichSideOfLineSegment_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_linePoint1 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("linePoint1"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(linePoint1, TKMathFunctionLibrary_eventPointOnWhichSideOfLineSegment_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|TK-Master Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/TKMathFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("* Returns 0 if point is on the line segment.\n* Returns 1 if point is not on the line segment and it is on the side of linePoint1.\n* Returns 2 if point is not on the line segment and it is on the side of linePoint2."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_ProjectPointOnLine()
	{
		struct TKMathFunctionLibrary_eventProjectPointOnLine_Parms
		{
			FVector LineOrigin;
			FVector LineDirection;
			FVector Point;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTKMathFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ProjectPointOnLine"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(TKMathFunctionLibrary_eventProjectPointOnLine_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, TKMathFunctionLibrary_eventProjectPointOnLine_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Point = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Point"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Point, TKMathFunctionLibrary_eventProjectPointOnLine_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_LineDirection = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineDirection"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LineDirection, TKMathFunctionLibrary_eventProjectPointOnLine_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_LineOrigin = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineOrigin"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LineOrigin, TKMathFunctionLibrary_eventProjectPointOnLine_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|TK-Master Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/TKMathFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a vector point which is a projection from a point to a line (defined by the vector couple LineOrigin, LineDirection).\nThe line is infinite (in both directions)."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_RoundToLowerMultiple()
	{
		struct TKMathFunctionLibrary_eventRoundToLowerMultiple_Parms
		{
			int32 A;
			int32 Multiple;
			bool skipSelf;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTKMathFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RoundToLowerMultiple"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(TKMathFunctionLibrary_eventRoundToLowerMultiple_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, TKMathFunctionLibrary_eventRoundToLowerMultiple_Parms), 0x0010000000000580);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(skipSelf, TKMathFunctionLibrary_eventRoundToLowerMultiple_Parms, bool);
			UProperty* NewProp_skipSelf = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("skipSelf"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(skipSelf, TKMathFunctionLibrary_eventRoundToLowerMultiple_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(skipSelf, TKMathFunctionLibrary_eventRoundToLowerMultiple_Parms), sizeof(bool), true);
			UProperty* NewProp_Multiple = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Multiple"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Multiple, TKMathFunctionLibrary_eventRoundToLowerMultiple_Parms), 0x0010000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(A, TKMathFunctionLibrary_eventRoundToLowerMultiple_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|TK-Master Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Multiple"), TEXT("32"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_skipSelf"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/TKMathFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Rounds an integer to the lower multiple of the given number.\nIf Skip Self is set to True it will skip to the previous multiple if the integer rounds to itself.\n@param Multiple - The multiple number to round to.\n@param skipSelf - Skip to the previous multiple if the integer rounds to itself."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_RoundToNearestMultiple()
	{
		struct TKMathFunctionLibrary_eventRoundToNearestMultiple_Parms
		{
			int32 A;
			int32 Multiple;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTKMathFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RoundToNearestMultiple"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(TKMathFunctionLibrary_eventRoundToNearestMultiple_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, TKMathFunctionLibrary_eventRoundToNearestMultiple_Parms), 0x0010000000000580);
			UProperty* NewProp_Multiple = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Multiple"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Multiple, TKMathFunctionLibrary_eventRoundToNearestMultiple_Parms), 0x0010000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(A, TKMathFunctionLibrary_eventRoundToNearestMultiple_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|TK-Master Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Multiple"), TEXT("32"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/TKMathFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Rounds an integer to the nearest multiple of the given number."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_RoundToUpperMultiple()
	{
		struct TKMathFunctionLibrary_eventRoundToUpperMultiple_Parms
		{
			int32 A;
			int32 Multiple;
			bool skipSelf;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTKMathFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RoundToUpperMultiple"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(TKMathFunctionLibrary_eventRoundToUpperMultiple_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, TKMathFunctionLibrary_eventRoundToUpperMultiple_Parms), 0x0010000000000580);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(skipSelf, TKMathFunctionLibrary_eventRoundToUpperMultiple_Parms, bool);
			UProperty* NewProp_skipSelf = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("skipSelf"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(skipSelf, TKMathFunctionLibrary_eventRoundToUpperMultiple_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(skipSelf, TKMathFunctionLibrary_eventRoundToUpperMultiple_Parms), sizeof(bool), true);
			UProperty* NewProp_Multiple = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Multiple"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Multiple, TKMathFunctionLibrary_eventRoundToUpperMultiple_Parms), 0x0010000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(A, TKMathFunctionLibrary_eventRoundToUpperMultiple_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|TK-Master Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Multiple"), TEXT("32"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_skipSelf"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/TKMathFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Rounds an integer to the upper multiple of the given number.\nIf Skip Self is set to True it will skip to the next multiple if the integer rounds to itself.\n@param Multiple - The multiple number to round to.\n@param skipSelf - Skip to the next multiple if the integer rounds to itself."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_SetCenterOfMassOffset()
	{
		struct TKMathFunctionLibrary_eventSetCenterOfMassOffset_Parms
		{
			UPrimitiveComponent* Target;
			FVector Offset;
			FName BoneName;
		};
		UObject* Outer=Z_Construct_UClass_UTKMathFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetCenterOfMassOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(TKMathFunctionLibrary_eventSetCenterOfMassOffset_Parms));
			UProperty* NewProp_BoneName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoneName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(BoneName, TKMathFunctionLibrary_eventSetCenterOfMassOffset_Parms), 0x0010000000000080);
			UProperty* NewProp_Offset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Offset"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Offset, TKMathFunctionLibrary_eventSetCenterOfMassOffset_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Target, TKMathFunctionLibrary_eventSetCenterOfMassOffset_Parms), 0x0010000000080080, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Physics"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_BoneName"), TEXT("None"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/TKMathFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("* Set the physx center of mass offset.\n* Note: this offsets the physx-calculated center of mass (it is not an offset from the pivot point)."));
			MetaData->SetValue(NewProp_Target, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_SetVectorLength()
	{
		struct TKMathFunctionLibrary_eventSetVectorLength_Parms
		{
			FVector A;
			float size;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTKMathFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVectorLength"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(TKMathFunctionLibrary_eventSetVectorLength_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, TKMathFunctionLibrary_eventSetVectorLength_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_size = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("size"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(size, TKMathFunctionLibrary_eventSetVectorLength_Parms), 0x0010000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(A, TKMathFunctionLibrary_eventSetVectorLength_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|TK-Master Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/TKMathFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Changes the size (length) of a Vector to the given size (normalized vector * size)."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_SignedDistancePlanePoint()
	{
		struct TKMathFunctionLibrary_eventSignedDistancePlanePoint_Parms
		{
			FVector planeNormal;
			FVector planePoint;
			FVector point;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTKMathFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SignedDistancePlanePoint"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(TKMathFunctionLibrary_eventSignedDistancePlanePoint_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, TKMathFunctionLibrary_eventSignedDistancePlanePoint_Parms), 0x0010000000000580);
			UProperty* NewProp_point = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("point"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(point, TKMathFunctionLibrary_eventSignedDistancePlanePoint_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_planePoint = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("planePoint"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(planePoint, TKMathFunctionLibrary_eventSignedDistancePlanePoint_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_planeNormal = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("planeNormal"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(planeNormal, TKMathFunctionLibrary_eventSignedDistancePlanePoint_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|TK-Master Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/TKMathFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the shortest distance between a point and a plane.\nThe output is signed so it holds information as to which side of the plane normal the point is."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_SphereBoxIntersection()
	{
		struct TKMathFunctionLibrary_eventSphereBoxIntersection_Parms
		{
			FVector SphereOrigin;
			float SphereRadius;
			FVector BoxOrigin;
			FVector BoxExtent;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTKMathFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SphereBoxIntersection"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(TKMathFunctionLibrary_eventSphereBoxIntersection_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, TKMathFunctionLibrary_eventSphereBoxIntersection_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, TKMathFunctionLibrary_eventSphereBoxIntersection_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, TKMathFunctionLibrary_eventSphereBoxIntersection_Parms), sizeof(bool), true);
			UProperty* NewProp_BoxExtent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoxExtent"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BoxExtent, TKMathFunctionLibrary_eventSphereBoxIntersection_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_BoxOrigin = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoxOrigin"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BoxOrigin, TKMathFunctionLibrary_eventSphereBoxIntersection_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_SphereRadius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SphereRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(SphereRadius, TKMathFunctionLibrary_eventSphereBoxIntersection_Parms), 0x0010000000000080);
			UProperty* NewProp_SphereOrigin = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SphereOrigin"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SphereOrigin, TKMathFunctionLibrary_eventSphereBoxIntersection_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|TK-Master Math|Vector|Intersection"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/TKMathFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Performs a sphere vs box intersection test.\n@param SphereOrigin the center of the sphere being tested against the box.\n@param SphereRadius the size of the sphere being tested.\n@param BoxOrigin the box origin being tested against.\n@param BoxExtent the box extend (width, depth, height).\n@return Whether the sphere/box intersect or not."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_VectorDegreesToRadians()
	{
		struct TKMathFunctionLibrary_eventVectorDegreesToRadians_Parms
		{
			FVector DegVector;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTKMathFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VectorDegreesToRadians"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(TKMathFunctionLibrary_eventVectorDegreesToRadians_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, TKMathFunctionLibrary_eventVectorDegreesToRadians_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_DegVector = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DegVector"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DegVector, TKMathFunctionLibrary_eventVectorDegreesToRadians_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|TK-Master Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/TKMathFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts degrees to radians."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTKMathFunctionLibrary_VectorRadiansToDegrees()
	{
		struct TKMathFunctionLibrary_eventVectorRadiansToDegrees_Parms
		{
			FVector RadVector;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTKMathFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VectorRadiansToDegrees"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(TKMathFunctionLibrary_eventVectorRadiansToDegrees_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, TKMathFunctionLibrary_eventVectorRadiansToDegrees_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_RadVector = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RadVector"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RadVector, TKMathFunctionLibrary_eventVectorRadiansToDegrees_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|TK-Master Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/TKMathFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts radians to degrees."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UTKMathFunctionLibrary_NoRegister()
	{
		return UTKMathFunctionLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_UTKMathFunctionLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage__Script_VictoryBPLibrary();
			OuterClass = UTKMathFunctionLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UTKMathFunctionLibrary_AreLineSegmentsCrossing());
				OuterClass->LinkChild(Z_Construct_UFunction_UTKMathFunctionLibrary_ClosestPointOnLineSeqment());
				OuterClass->LinkChild(Z_Construct_UFunction_UTKMathFunctionLibrary_ClosestPointOnSphereToLine());
				OuterClass->LinkChild(Z_Construct_UFunction_UTKMathFunctionLibrary_ClosestPointsOfLineSegments());
				OuterClass->LinkChild(Z_Construct_UFunction_UTKMathFunctionLibrary_ClosestPointsOnTwoLines());
				OuterClass->LinkChild(Z_Construct_UFunction_UTKMathFunctionLibrary_ConvertAnchorToAnchor());
				OuterClass->LinkChild(Z_Construct_UFunction_UTKMathFunctionLibrary_ConvertPhysicsLinearVelocity());
				OuterClass->LinkChild(Z_Construct_UFunction_UTKMathFunctionLibrary_GetConsoleVariableFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UTKMathFunctionLibrary_GetConsoleVariableInt());
				OuterClass->LinkChild(Z_Construct_UFunction_UTKMathFunctionLibrary_GetVelocityAtPoint());
				OuterClass->LinkChild(Z_Construct_UFunction_UTKMathFunctionLibrary_GridSnap());
				OuterClass->LinkChild(Z_Construct_UFunction_UTKMathFunctionLibrary_IsEvenNumber());
				OuterClass->LinkChild(Z_Construct_UFunction_UTKMathFunctionLibrary_IsLineInsideSphere());
				OuterClass->LinkChild(Z_Construct_UFunction_UTKMathFunctionLibrary_IsMultipleOf());
				OuterClass->LinkChild(Z_Construct_UFunction_UTKMathFunctionLibrary_IsPointInsideBox());
				OuterClass->LinkChild(Z_Construct_UFunction_UTKMathFunctionLibrary_IsPowerOfTwo());
				OuterClass->LinkChild(Z_Construct_UFunction_UTKMathFunctionLibrary_LineExtentBoxIntersection());
				OuterClass->LinkChild(Z_Construct_UFunction_UTKMathFunctionLibrary_LineToLineIntersection());
				OuterClass->LinkChild(Z_Construct_UFunction_UTKMathFunctionLibrary_NegateFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UTKMathFunctionLibrary_NegateInt());
				OuterClass->LinkChild(Z_Construct_UFunction_UTKMathFunctionLibrary_NegateVector2D());
				OuterClass->LinkChild(Z_Construct_UFunction_UTKMathFunctionLibrary_PointOnWhichSideOfLineSegment());
				OuterClass->LinkChild(Z_Construct_UFunction_UTKMathFunctionLibrary_ProjectPointOnLine());
				OuterClass->LinkChild(Z_Construct_UFunction_UTKMathFunctionLibrary_RoundToLowerMultiple());
				OuterClass->LinkChild(Z_Construct_UFunction_UTKMathFunctionLibrary_RoundToNearestMultiple());
				OuterClass->LinkChild(Z_Construct_UFunction_UTKMathFunctionLibrary_RoundToUpperMultiple());
				OuterClass->LinkChild(Z_Construct_UFunction_UTKMathFunctionLibrary_SetCenterOfMassOffset());
				OuterClass->LinkChild(Z_Construct_UFunction_UTKMathFunctionLibrary_SetVectorLength());
				OuterClass->LinkChild(Z_Construct_UFunction_UTKMathFunctionLibrary_SignedDistancePlanePoint());
				OuterClass->LinkChild(Z_Construct_UFunction_UTKMathFunctionLibrary_SphereBoxIntersection());
				OuterClass->LinkChild(Z_Construct_UFunction_UTKMathFunctionLibrary_VectorDegreesToRadians());
				OuterClass->LinkChild(Z_Construct_UFunction_UTKMathFunctionLibrary_VectorRadiansToDegrees());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTKMathFunctionLibrary_AreLineSegmentsCrossing(), "AreLineSegmentsCrossing"); // 3396161289
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTKMathFunctionLibrary_ClosestPointOnLineSeqment(), "ClosestPointOnLineSeqment"); // 1022824309
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTKMathFunctionLibrary_ClosestPointOnSphereToLine(), "ClosestPointOnSphereToLine"); // 3298537208
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTKMathFunctionLibrary_ClosestPointsOfLineSegments(), "ClosestPointsOfLineSegments"); // 115851481
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTKMathFunctionLibrary_ClosestPointsOnTwoLines(), "ClosestPointsOnTwoLines"); // 3403411530
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTKMathFunctionLibrary_ConvertAnchorToAnchor(), "ConvertAnchorToAnchor"); // 2324306910
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTKMathFunctionLibrary_ConvertPhysicsLinearVelocity(), "ConvertPhysicsLinearVelocity"); // 2633253793
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTKMathFunctionLibrary_GetConsoleVariableFloat(), "GetConsoleVariableFloat"); // 513448423
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTKMathFunctionLibrary_GetConsoleVariableInt(), "GetConsoleVariableInt"); // 2799235180
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTKMathFunctionLibrary_GetVelocityAtPoint(), "GetVelocityAtPoint"); // 3175452403
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTKMathFunctionLibrary_GridSnap(), "GridSnap"); // 4145365916
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTKMathFunctionLibrary_IsEvenNumber(), "IsEvenNumber"); // 2869869703
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTKMathFunctionLibrary_IsLineInsideSphere(), "IsLineInsideSphere"); // 3077272444
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTKMathFunctionLibrary_IsMultipleOf(), "IsMultipleOf"); // 3772834003
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTKMathFunctionLibrary_IsPointInsideBox(), "IsPointInsideBox"); // 2192457317
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTKMathFunctionLibrary_IsPowerOfTwo(), "IsPowerOfTwo"); // 600005959
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTKMathFunctionLibrary_LineExtentBoxIntersection(), "LineExtentBoxIntersection"); // 3234618327
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTKMathFunctionLibrary_LineToLineIntersection(), "LineToLineIntersection"); // 4246266852
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTKMathFunctionLibrary_NegateFloat(), "NegateFloat"); // 2579646574
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTKMathFunctionLibrary_NegateInt(), "NegateInt"); // 339072247
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTKMathFunctionLibrary_NegateVector2D(), "NegateVector2D"); // 636233853
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTKMathFunctionLibrary_PointOnWhichSideOfLineSegment(), "PointOnWhichSideOfLineSegment"); // 2875949252
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTKMathFunctionLibrary_ProjectPointOnLine(), "ProjectPointOnLine"); // 1140058950
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTKMathFunctionLibrary_RoundToLowerMultiple(), "RoundToLowerMultiple"); // 88335957
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTKMathFunctionLibrary_RoundToNearestMultiple(), "RoundToNearestMultiple"); // 181608044
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTKMathFunctionLibrary_RoundToUpperMultiple(), "RoundToUpperMultiple"); // 1954811084
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTKMathFunctionLibrary_SetCenterOfMassOffset(), "SetCenterOfMassOffset"); // 24417181
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTKMathFunctionLibrary_SetVectorLength(), "SetVectorLength"); // 1055455778
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTKMathFunctionLibrary_SignedDistancePlanePoint(), "SignedDistancePlanePoint"); // 2145799413
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTKMathFunctionLibrary_SphereBoxIntersection(), "SphereBoxIntersection"); // 2768921458
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTKMathFunctionLibrary_VectorDegreesToRadians(), "VectorDegreesToRadians"); // 3968720074
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTKMathFunctionLibrary_VectorRadiansToDegrees(), "VectorRadiansToDegrees"); // 3082174768
				static TCppClassTypeInfo<TCppClassTypeTraits<UTKMathFunctionLibrary> > StaticCppClassTypeInfo;
				OuterClass->SetCppTypeInfo(&StaticCppClassTypeInfo);
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("TKMathFunctionLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/TKMathFunctionLibrary.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	IMPLEMENT_CLASS(UTKMathFunctionLibrary, 4021157474);
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTKMathFunctionLibrary(Z_Construct_UClass_UTKMathFunctionLibrary, &UTKMathFunctionLibrary::StaticClass, TEXT("/Script/VictoryBPLibrary"), TEXT("UTKMathFunctionLibrary"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTKMathFunctionLibrary);
	void AVictoryISM::StaticRegisterNativesAVictoryISM()
	{
	}
	UClass* Z_Construct_UClass_AVictoryISM_NoRegister()
	{
		return AVictoryISM::StaticClass();
	}
	UClass* Z_Construct_UClass_AVictoryISM()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage__Script_VictoryBPLibrary();
			OuterClass = AVictoryISM::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Mesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Mesh"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Mesh, AVictoryISM), 0x00100000000a001d, Z_Construct_UClass_UInstancedStaticMeshComponent_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				static TCppClassTypeInfo<TCppClassTypeTraits<AVictoryISM> > StaticCppClassTypeInfo;
				OuterClass->SetCppTypeInfo(&StaticCppClassTypeInfo);
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("VictoryISM.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/VictoryISM.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_Mesh, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_Mesh, TEXT("Category"), TEXT("Joy ISM"));
				MetaData->SetValue(NewProp_Mesh, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_Mesh, TEXT("ModuleRelativePath"), TEXT("Public/VictoryISM.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	IMPLEMENT_CLASS(AVictoryISM, 778963141);
	static FCompiledInDefer Z_CompiledInDefer_UClass_AVictoryISM(Z_Construct_UClass_AVictoryISM, &AVictoryISM::StaticClass, TEXT("/Script/VictoryBPLibrary"), TEXT("AVictoryISM"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(AVictoryISM);
static UEnum* EJoyGraphicsFullScreen_StaticEnum()
{
	extern VICTORYBPLIBRARY_API class UPackage* Z_Construct_UPackage__Script_VictoryBPLibrary();
	static UEnum* Singleton = nullptr;
	if (!Singleton)
	{
		extern VICTORYBPLIBRARY_API class UEnum* Z_Construct_UEnum_VictoryBPLibrary_EJoyGraphicsFullScreen();
		Singleton = GetStaticEnum(Z_Construct_UEnum_VictoryBPLibrary_EJoyGraphicsFullScreen, Z_Construct_UPackage__Script_VictoryBPLibrary(), TEXT("EJoyGraphicsFullScreen"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EJoyGraphicsFullScreen(EJoyGraphicsFullScreen_StaticEnum, TEXT("/Script/VictoryBPLibrary"), TEXT("EJoyGraphicsFullScreen"), false, nullptr, nullptr);
	UEnum* Z_Construct_UEnum_VictoryBPLibrary_EJoyGraphicsFullScreen()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_VictoryBPLibrary();
		extern uint32 Get_Z_Construct_UEnum_VictoryBPLibrary_EJoyGraphicsFullScreen_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EJoyGraphicsFullScreen"), 0, Get_Z_Construct_UEnum_VictoryBPLibrary_EJoyGraphicsFullScreen_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EJoyGraphicsFullScreen"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Emplace(TEXT("EJoyGraphicsFullScreen::FullScreen"), 0);
			EnumNames.Emplace(TEXT("EJoyGraphicsFullScreen::WindowedFullScreen"), 1);
			EnumNames.Emplace(TEXT("EJoyGraphicsFullScreen::WindowedFullScreenPerformance"), 2);
			EnumNames.Emplace(TEXT("EJoyGraphicsFullScreen::EJoyGraphicsFullScreen_Max"), 3);
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EJoyGraphicsFullScreen::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("EJoyGraphicsFullScreen_Max.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("EJoyGraphicsFullScreen_Max.ToolTip"), TEXT("256th entry"));
			MetaData->SetValue(ReturnEnum, TEXT("FullScreen.DisplayName"), TEXT("Regular Full Screen"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("256 entries max"));
			MetaData->SetValue(ReturnEnum, TEXT("WindowedFullScreen.DisplayName"), TEXT("Windowed Full Screen High Quality"));
			MetaData->SetValue(ReturnEnum, TEXT("WindowedFullScreenPerformance.DisplayName"), TEXT("Windowed Full Screen (Default)"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_VictoryBPLibrary_EJoyGraphicsFullScreen_CRC() { return 4277182635U; }
static UEnum* EVictoryHMDDevice_StaticEnum()
{
	extern VICTORYBPLIBRARY_API class UPackage* Z_Construct_UPackage__Script_VictoryBPLibrary();
	static UEnum* Singleton = nullptr;
	if (!Singleton)
	{
		extern VICTORYBPLIBRARY_API class UEnum* Z_Construct_UEnum_VictoryBPLibrary_EVictoryHMDDevice();
		Singleton = GetStaticEnum(Z_Construct_UEnum_VictoryBPLibrary_EVictoryHMDDevice, Z_Construct_UPackage__Script_VictoryBPLibrary(), TEXT("EVictoryHMDDevice"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EVictoryHMDDevice(EVictoryHMDDevice_StaticEnum, TEXT("/Script/VictoryBPLibrary"), TEXT("EVictoryHMDDevice"), false, nullptr, nullptr);
	UEnum* Z_Construct_UEnum_VictoryBPLibrary_EVictoryHMDDevice()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_VictoryBPLibrary();
		extern uint32 Get_Z_Construct_UEnum_VictoryBPLibrary_EVictoryHMDDevice_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EVictoryHMDDevice"), 0, Get_Z_Construct_UEnum_VictoryBPLibrary_EVictoryHMDDevice_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EVictoryHMDDevice"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Emplace(TEXT("EVictoryHMDDevice::None"), 0);
			EnumNames.Emplace(TEXT("EVictoryHMDDevice::OculusRift"), 1);
			EnumNames.Emplace(TEXT("EVictoryHMDDevice::Morpheus"), 2);
			EnumNames.Emplace(TEXT("EVictoryHMDDevice::ES2GenericStereoMesh"), 3);
			EnumNames.Emplace(TEXT("EVictoryHMDDevice::SteamVR"), 4);
			EnumNames.Emplace(TEXT("EVictoryHMDDevice::GearVR"), 5);
			EnumNames.Emplace(TEXT("EVictoryHMDDevice::EVictoryHMDDevice_MAX"), 6);
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EVictoryHMDDevice");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ES2GenericStereoMesh.DisplayName"), TEXT("ES2 Generic Stereo Mesh"));
			MetaData->SetValue(ReturnEnum, TEXT("GearVR.DisplayName"), TEXT("Gear VR"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Morpheus.DisplayName"), TEXT("Morpheus"));
			MetaData->SetValue(ReturnEnum, TEXT("None.DisplayName"), TEXT("None"));
			MetaData->SetValue(ReturnEnum, TEXT("OculusRift.DisplayName"), TEXT("Oculus Rift"));
			MetaData->SetValue(ReturnEnum, TEXT("SteamVR.DisplayName"), TEXT("Vive (Steam VR)"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_VictoryBPLibrary_EVictoryHMDDevice_CRC() { return 2187881138U; }
static UEnum* EJoyImageFormats_StaticEnum()
{
	extern VICTORYBPLIBRARY_API class UPackage* Z_Construct_UPackage__Script_VictoryBPLibrary();
	static UEnum* Singleton = nullptr;
	if (!Singleton)
	{
		extern VICTORYBPLIBRARY_API class UEnum* Z_Construct_UEnum_VictoryBPLibrary_EJoyImageFormats();
		Singleton = GetStaticEnum(Z_Construct_UEnum_VictoryBPLibrary_EJoyImageFormats, Z_Construct_UPackage__Script_VictoryBPLibrary(), TEXT("EJoyImageFormats"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EJoyImageFormats(EJoyImageFormats_StaticEnum, TEXT("/Script/VictoryBPLibrary"), TEXT("EJoyImageFormats"), false, nullptr, nullptr);
	UEnum* Z_Construct_UEnum_VictoryBPLibrary_EJoyImageFormats()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_VictoryBPLibrary();
		extern uint32 Get_Z_Construct_UEnum_VictoryBPLibrary_EJoyImageFormats_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EJoyImageFormats"), 0, Get_Z_Construct_UEnum_VictoryBPLibrary_EJoyImageFormats_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EJoyImageFormats"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Emplace(TEXT("EJoyImageFormats::JPG"), 0);
			EnumNames.Emplace(TEXT("EJoyImageFormats::PNG"), 1);
			EnumNames.Emplace(TEXT("EJoyImageFormats::BMP"), 2);
			EnumNames.Emplace(TEXT("EJoyImageFormats::ICO"), 3);
			EnumNames.Emplace(TEXT("EJoyImageFormats::EXR"), 4);
			EnumNames.Emplace(TEXT("EJoyImageFormats::ICNS"), 5);
			EnumNames.Emplace(TEXT("EJoyImageFormats::EJoyImageFormats_MAX"), 6);
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EJoyImageFormats");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("BMP.DisplayName"), TEXT("BMP        "));
			MetaData->SetValue(ReturnEnum, TEXT("EXR.DisplayName"), TEXT("EXR        "));
			MetaData->SetValue(ReturnEnum, TEXT("ICNS.DisplayName"), TEXT("ICNS        "));
			MetaData->SetValue(ReturnEnum, TEXT("ICO.DisplayName"), TEXT("ICO        "));
			MetaData->SetValue(ReturnEnum, TEXT("JPG.DisplayName"), TEXT("JPG        "));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnEnum, TEXT("PNG.DisplayName"), TEXT("PNG        "));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Key Modifiers"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_VictoryBPLibrary_EJoyImageFormats_CRC() { return 2290026455U; }
class UScriptStruct* FLevelStreamInstanceInfo::StaticStruct()
{
	extern VICTORYBPLIBRARY_API class UPackage* Z_Construct_UPackage__Script_VictoryBPLibrary();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern VICTORYBPLIBRARY_API class UScriptStruct* Z_Construct_UScriptStruct_FLevelStreamInstanceInfo();
		extern VICTORYBPLIBRARY_API uint32 Get_Z_Construct_UScriptStruct_FLevelStreamInstanceInfo_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FLevelStreamInstanceInfo, Z_Construct_UPackage__Script_VictoryBPLibrary(), TEXT("LevelStreamInstanceInfo"), sizeof(FLevelStreamInstanceInfo), Get_Z_Construct_UScriptStruct_FLevelStreamInstanceInfo_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FLevelStreamInstanceInfo(FLevelStreamInstanceInfo::StaticStruct, TEXT("/Script/VictoryBPLibrary"), TEXT("LevelStreamInstanceInfo"), false, nullptr, nullptr);
static struct FScriptStruct_VictoryBPLibrary_StaticRegisterNativesFLevelStreamInstanceInfo
{
	FScriptStruct_VictoryBPLibrary_StaticRegisterNativesFLevelStreamInstanceInfo()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("LevelStreamInstanceInfo")),new UScriptStruct::TCppStructOps<FLevelStreamInstanceInfo>);
	}
} ScriptStruct_VictoryBPLibrary_StaticRegisterNativesFLevelStreamInstanceInfo;
	UScriptStruct* Z_Construct_UScriptStruct_FLevelStreamInstanceInfo()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_VictoryBPLibrary();
		extern uint32 Get_Z_Construct_UScriptStruct_FLevelStreamInstanceInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("LevelStreamInstanceInfo"), sizeof(FLevelStreamInstanceInfo), Get_Z_Construct_UScriptStruct_FLevelStreamInstanceInfo_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LevelStreamInstanceInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FLevelStreamInstanceInfo>, EStructFlags(0x00000001));
			UProperty* NewProp_LODIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LODIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(LODIndex, FLevelStreamInstanceInfo), 0x0010000000000004);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShouldBlockOnLoad, FLevelStreamInstanceInfo, uint8);
			UProperty* NewProp_bShouldBlockOnLoad = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bShouldBlockOnLoad"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShouldBlockOnLoad, FLevelStreamInstanceInfo), 0x0010000000000004, CPP_BOOL_PROPERTY_BITMASK(bShouldBlockOnLoad, FLevelStreamInstanceInfo), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShouldBeVisible, FLevelStreamInstanceInfo, uint8);
			UProperty* NewProp_bShouldBeVisible = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bShouldBeVisible"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShouldBeVisible, FLevelStreamInstanceInfo), 0x0010000000000004, CPP_BOOL_PROPERTY_BITMASK(bShouldBeVisible, FLevelStreamInstanceInfo), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShouldBeLoaded, FLevelStreamInstanceInfo, uint8);
			UProperty* NewProp_bShouldBeLoaded = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bShouldBeLoaded"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShouldBeLoaded, FLevelStreamInstanceInfo), 0x0010000000000004, CPP_BOOL_PROPERTY_BITMASK(bShouldBeLoaded, FLevelStreamInstanceInfo), sizeof(uint8), false);
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Rotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Rotation, FLevelStreamInstanceInfo), 0x0010000000000004, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Location"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Location, FLevelStreamInstanceInfo), 0x0010000000000004, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_PackageNameToLoad = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PackageNameToLoad"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(PackageNameToLoad, FLevelStreamInstanceInfo), 0x0010000000000004);
			UProperty* NewProp_PackageName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PackageName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(PackageName, FLevelStreamInstanceInfo), 0x0010000000000004);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_LODIndex, TEXT("Category"), TEXT("LevelStreaming"));
			MetaData->SetValue(NewProp_LODIndex, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_bShouldBlockOnLoad, TEXT("Category"), TEXT("LevelStreaming"));
			MetaData->SetValue(NewProp_bShouldBlockOnLoad, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_bShouldBeVisible, TEXT("Category"), TEXT("LevelStreaming"));
			MetaData->SetValue(NewProp_bShouldBeVisible, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_bShouldBeLoaded, TEXT("Category"), TEXT("LevelStreaming"));
			MetaData->SetValue(NewProp_bShouldBeLoaded, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_Rotation, TEXT("Category"), TEXT("LevelStreaming"));
			MetaData->SetValue(NewProp_Rotation, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_Location, TEXT("Category"), TEXT("LevelStreaming"));
			MetaData->SetValue(NewProp_Location, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_PackageNameToLoad, TEXT("Category"), TEXT("LevelStreaming"));
			MetaData->SetValue(NewProp_PackageNameToLoad, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_PackageName, TEXT("Category"), TEXT("LevelStreaming"));
			MetaData->SetValue(NewProp_PackageName, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FLevelStreamInstanceInfo_CRC() { return 3488440688U; }
class UScriptStruct* FVictoryInputAxis::StaticStruct()
{
	extern VICTORYBPLIBRARY_API class UPackage* Z_Construct_UPackage__Script_VictoryBPLibrary();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern VICTORYBPLIBRARY_API class UScriptStruct* Z_Construct_UScriptStruct_FVictoryInputAxis();
		extern VICTORYBPLIBRARY_API uint32 Get_Z_Construct_UScriptStruct_FVictoryInputAxis_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FVictoryInputAxis, Z_Construct_UPackage__Script_VictoryBPLibrary(), TEXT("VictoryInputAxis"), sizeof(FVictoryInputAxis), Get_Z_Construct_UScriptStruct_FVictoryInputAxis_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FVictoryInputAxis(FVictoryInputAxis::StaticStruct, TEXT("/Script/VictoryBPLibrary"), TEXT("VictoryInputAxis"), false, nullptr, nullptr);
static struct FScriptStruct_VictoryBPLibrary_StaticRegisterNativesFVictoryInputAxis
{
	FScriptStruct_VictoryBPLibrary_StaticRegisterNativesFVictoryInputAxis()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("VictoryInputAxis")),new UScriptStruct::TCppStructOps<FVictoryInputAxis>);
	}
} ScriptStruct_VictoryBPLibrary_StaticRegisterNativesFVictoryInputAxis;
	UScriptStruct* Z_Construct_UScriptStruct_FVictoryInputAxis()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_VictoryBPLibrary();
		extern uint32 Get_Z_Construct_UScriptStruct_FVictoryInputAxis_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("VictoryInputAxis"), sizeof(FVictoryInputAxis), Get_Z_Construct_UScriptStruct_FVictoryInputAxis_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryInputAxis"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FVictoryInputAxis>, EStructFlags(0x00000001));
			UProperty* NewProp_Scale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Scale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Scale, FVictoryInputAxis), 0x0010000000000005);
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Key"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Key, FVictoryInputAxis), 0x0010000000000005, Z_Construct_UScriptStruct_FKey());
			UProperty* NewProp_KeyAsString = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("KeyAsString"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(KeyAsString, FVictoryInputAxis), 0x0010000000000005);
			UProperty* NewProp_AxisName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AxisName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(AxisName, FVictoryInputAxis), 0x0010000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_Scale, TEXT("Category"), TEXT("Input Song"));
			MetaData->SetValue(NewProp_Scale, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_Key, TEXT("Category"), TEXT("Input Song"));
			MetaData->SetValue(NewProp_Key, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_KeyAsString, TEXT("Category"), TEXT("Input Song"));
			MetaData->SetValue(NewProp_KeyAsString, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_AxisName, TEXT("Category"), TEXT("Input Song"));
			MetaData->SetValue(NewProp_AxisName, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FVictoryInputAxis_CRC() { return 790872029U; }
class UScriptStruct* FVictoryInput::StaticStruct()
{
	extern VICTORYBPLIBRARY_API class UPackage* Z_Construct_UPackage__Script_VictoryBPLibrary();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern VICTORYBPLIBRARY_API class UScriptStruct* Z_Construct_UScriptStruct_FVictoryInput();
		extern VICTORYBPLIBRARY_API uint32 Get_Z_Construct_UScriptStruct_FVictoryInput_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FVictoryInput, Z_Construct_UPackage__Script_VictoryBPLibrary(), TEXT("VictoryInput"), sizeof(FVictoryInput), Get_Z_Construct_UScriptStruct_FVictoryInput_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FVictoryInput(FVictoryInput::StaticStruct, TEXT("/Script/VictoryBPLibrary"), TEXT("VictoryInput"), false, nullptr, nullptr);
static struct FScriptStruct_VictoryBPLibrary_StaticRegisterNativesFVictoryInput
{
	FScriptStruct_VictoryBPLibrary_StaticRegisterNativesFVictoryInput()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("VictoryInput")),new UScriptStruct::TCppStructOps<FVictoryInput>);
	}
} ScriptStruct_VictoryBPLibrary_StaticRegisterNativesFVictoryInput;
	UScriptStruct* Z_Construct_UScriptStruct_FVictoryInput()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_VictoryBPLibrary();
		extern uint32 Get_Z_Construct_UScriptStruct_FVictoryInput_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("VictoryInput"), sizeof(FVictoryInput), Get_Z_Construct_UScriptStruct_FVictoryInput_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryInput"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FVictoryInput>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCmd, FVictoryInput, uint8);
			UProperty* NewProp_bCmd = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCmd"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCmd, FVictoryInput), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bCmd, FVictoryInput), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAlt, FVictoryInput, uint8);
			UProperty* NewProp_bAlt = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAlt"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAlt, FVictoryInput), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bAlt, FVictoryInput), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCtrl, FVictoryInput, uint8);
			UProperty* NewProp_bCtrl = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCtrl"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCtrl, FVictoryInput), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bCtrl, FVictoryInput), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShift, FVictoryInput, uint8);
			UProperty* NewProp_bShift = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bShift"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShift, FVictoryInput), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bShift, FVictoryInput), sizeof(uint8), false);
			UProperty* NewProp_KeyAsString = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("KeyAsString"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(KeyAsString, FVictoryInput), 0x0010000000000005);
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Key"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Key, FVictoryInput), 0x0010000000000005, Z_Construct_UScriptStruct_FKey());
			UProperty* NewProp_ActionName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ActionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ActionName, FVictoryInput), 0x0010000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_bCmd, TEXT("Category"), TEXT("Input Song"));
			MetaData->SetValue(NewProp_bCmd, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_bAlt, TEXT("Category"), TEXT("Input Song"));
			MetaData->SetValue(NewProp_bAlt, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_bCtrl, TEXT("Category"), TEXT("Input Song"));
			MetaData->SetValue(NewProp_bCtrl, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_bShift, TEXT("Category"), TEXT("Input Song"));
			MetaData->SetValue(NewProp_bShift, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_KeyAsString, TEXT("Category"), TEXT("Input Song"));
			MetaData->SetValue(NewProp_KeyAsString, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_Key, TEXT("Category"), TEXT("Input Song"));
			MetaData->SetValue(NewProp_Key, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_ActionName, TEXT("Category"), TEXT("Input Song"));
			MetaData->SetValue(NewProp_ActionName, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FVictoryInput_CRC() { return 1261228339U; }
	void UVictoryBPFunctionLibrary::StaticRegisterNativesUVictoryBPFunctionLibrary()
	{
		UClass* Class = UVictoryBPFunctionLibrary::StaticClass();
		static const TNameNativePtrPair<ANSICHAR> AnsiFuncs[] = {
			{ "Accessor__GetCharacterSkeletalMesh", (Native)&UVictoryBPFunctionLibrary::execAccessor__GetCharacterSkeletalMesh },
			{ "Accessor__GetNameAsString", (Native)&UVictoryBPFunctionLibrary::execAccessor__GetNameAsString },
			{ "Accessor__GetPlayerController", (Native)&UVictoryBPFunctionLibrary::execAccessor__GetPlayerController },
			{ "Actor__GetAttachedActors", (Native)&UVictoryBPFunctionLibrary::execActor__GetAttachedActors },
			{ "Actor__TeleportToActor", (Native)&UVictoryBPFunctionLibrary::execActor__TeleportToActor },
			{ "Actor_PrestreamTextures", (Native)&UVictoryBPFunctionLibrary::execActor_PrestreamTextures },
			{ "AddToActorRotation", (Native)&UVictoryBPFunctionLibrary::execAddToActorRotation },
			{ "AddToStreamingLevels", (Native)&UVictoryBPFunctionLibrary::execAddToStreamingLevels },
			{ "AnimatedVertex__GetAnimatedVertexLocations", (Native)&UVictoryBPFunctionLibrary::execAnimatedVertex__GetAnimatedVertexLocations },
			{ "Animation__GetAimOffsets", (Native)&UVictoryBPFunctionLibrary::execAnimation__GetAimOffsets },
			{ "Animation__GetAimOffsetsFromRotation", (Native)&UVictoryBPFunctionLibrary::execAnimation__GetAimOffsetsFromRotation },
			{ "AppendMultiple", (Native)&UVictoryBPFunctionLibrary::execAppendMultiple },
			{ "Array_IsValidIndex", (Native)&UVictoryBPFunctionLibrary::execArray_IsValidIndex },
			{ "Array_Sort", (Native)&UVictoryBPFunctionLibrary::execArray_Sort },
			{ "Calcs__ClosestPointToSourcePoint", (Native)&UVictoryBPFunctionLibrary::execCalcs__ClosestPointToSourcePoint },
			{ "Capture2D_Project", (Native)&UVictoryBPFunctionLibrary::execCapture2D_Project },
			{ "Capture2D_SaveImage", (Native)&UVictoryBPFunctionLibrary::execCapture2D_SaveImage },
			{ "CaptureComponent2D_Project", (Native)&UVictoryBPFunctionLibrary::execCaptureComponent2D_Project },
			{ "CaptureComponent2D_SaveImage", (Native)&UVictoryBPFunctionLibrary::execCaptureComponent2D_SaveImage },
			{ "Character__GetControllerRotation", (Native)&UVictoryBPFunctionLibrary::execCharacter__GetControllerRotation },
			{ "CharacterMovement__SetMaxMoveSpeed", (Native)&UVictoryBPFunctionLibrary::execCharacterMovement__SetMaxMoveSpeed },
			{ "ClientWindow__GameWindowIsForeGroundInOS", (Native)&UVictoryBPFunctionLibrary::execClientWindow__GameWindowIsForeGroundInOS },
			{ "Clone__StaticMeshActor", (Native)&UVictoryBPFunctionLibrary::execClone__StaticMeshActor },
			{ "CompareMD5Hash", (Native)&UVictoryBPFunctionLibrary::execCompareMD5Hash },
			{ "Component_PrestreamTextures", (Native)&UVictoryBPFunctionLibrary::execComponent_PrestreamTextures },
			{ "constructRand", (Native)&UVictoryBPFunctionLibrary::execconstructRand },
			{ "Conversion__FloatToRoundedInteger", (Native)&UVictoryBPFunctionLibrary::execConversion__FloatToRoundedInteger },
			{ "Conversions__ColorToString", (Native)&UVictoryBPFunctionLibrary::execConversions__ColorToString },
			{ "Conversions__RotatorToVector", (Native)&UVictoryBPFunctionLibrary::execConversions__RotatorToVector },
			{ "Conversions__StringToColor", (Native)&UVictoryBPFunctionLibrary::execConversions__StringToColor },
			{ "Conversions__StringToRotator", (Native)&UVictoryBPFunctionLibrary::execConversions__StringToRotator },
			{ "Conversions__StringToVector", (Native)&UVictoryBPFunctionLibrary::execConversions__StringToVector },
			{ "Conversions__VectorToRotator", (Native)&UVictoryBPFunctionLibrary::execConversions__VectorToRotator },
			{ "CountOccurrancesOfSubString", (Native)&UVictoryBPFunctionLibrary::execCountOccurrancesOfSubString },
			{ "CreateMD5Hash", (Native)&UVictoryBPFunctionLibrary::execCreateMD5Hash },
			{ "CreateObject", (Native)&UVictoryBPFunctionLibrary::execCreateObject },
			{ "CreatePlane", (Native)&UVictoryBPFunctionLibrary::execCreatePlane },
			{ "CreatePrimitiveComponent", (Native)&UVictoryBPFunctionLibrary::execCreatePrimitiveComponent },
			{ "CreateTextureRenderTarget2D", (Native)&UVictoryBPFunctionLibrary::execCreateTextureRenderTarget2D },
			{ "Data__GetCharacterBoneLocations", (Native)&UVictoryBPFunctionLibrary::execData__GetCharacterBoneLocations },
			{ "DistanceToSurface__DistaceOfPointToMeshSurface", (Native)&UVictoryBPFunctionLibrary::execDistanceToSurface__DistaceOfPointToMeshSurface },
			{ "DoesMaterialHaveParameter", (Native)&UVictoryBPFunctionLibrary::execDoesMaterialHaveParameter },
			{ "Draw__Thick3DLineBetweenActors", (Native)&UVictoryBPFunctionLibrary::execDraw__Thick3DLineBetweenActors },
			{ "Draw__Thick3DLineFromCharacterSocket", (Native)&UVictoryBPFunctionLibrary::execDraw__Thick3DLineFromCharacterSocket },
			{ "Draw__Thick3DLineFromSocket", (Native)&UVictoryBPFunctionLibrary::execDraw__Thick3DLineFromSocket },
			{ "DrawCircle", (Native)&UVictoryBPFunctionLibrary::execDrawCircle },
			{ "EqualEqual_Vector2DVector2D", (Native)&UVictoryBPFunctionLibrary::execEqualEqual_Vector2DVector2D },
			{ "FileIO__SaveStringArrayToFile", (Native)&UVictoryBPFunctionLibrary::execFileIO__SaveStringArrayToFile },
			{ "FileIO__SaveStringTextToFile", (Native)&UVictoryBPFunctionLibrary::execFileIO__SaveStringTextToFile },
			{ "FlashGameOnTaskBar", (Native)&UVictoryBPFunctionLibrary::execFlashGameOnTaskBar },
			{ "FlushPressedKeys", (Native)&UVictoryBPFunctionLibrary::execFlushPressedKeys },
			{ "GetActorRelativeLocation", (Native)&UVictoryBPFunctionLibrary::execGetActorRelativeLocation },
			{ "GetActorRelativeRotation", (Native)&UVictoryBPFunctionLibrary::execGetActorRelativeRotation },
			{ "GetAllBoneNamesBelowBone", (Native)&UVictoryBPFunctionLibrary::execGetAllBoneNamesBelowBone },
			{ "GetAllWidgetsOfClass", (Native)&UVictoryBPFunctionLibrary::execGetAllWidgetsOfClass },
			{ "GetBoxContainingWorldPoints", (Native)&UVictoryBPFunctionLibrary::execGetBoxContainingWorldPoints },
			{ "GetClosestActorOfClassInRadiusOfActor", (Native)&UVictoryBPFunctionLibrary::execGetClosestActorOfClassInRadiusOfActor },
			{ "GetClosestActorOfClassInRadiusOfLocation", (Native)&UVictoryBPFunctionLibrary::execGetClosestActorOfClassInRadiusOfLocation },
			{ "GetCommandLine", (Native)&UVictoryBPFunctionLibrary::execGetCommandLine },
			{ "GetComponentRelativeLocation", (Native)&UVictoryBPFunctionLibrary::execGetComponentRelativeLocation },
			{ "GetComponentRelativeRotation", (Native)&UVictoryBPFunctionLibrary::execGetComponentRelativeRotation },
			{ "GetCreationTime", (Native)&UVictoryBPFunctionLibrary::execGetCreationTime },
			{ "GetDistanceBetweenComponentSurfaces", (Native)&UVictoryBPFunctionLibrary::execGetDistanceBetweenComponentSurfaces },
			{ "GetDistanceToCollision", (Native)&UVictoryBPFunctionLibrary::execGetDistanceToCollision },
			{ "GetFirstWidgetOfClass", (Native)&UVictoryBPFunctionLibrary::execGetFirstWidgetOfClass },
			{ "GetGenericTeamId", (Native)&UVictoryBPFunctionLibrary::execGetGenericTeamId },
			{ "GetHeadMountedDisplayDeviceType", (Native)&UVictoryBPFunctionLibrary::execGetHeadMountedDisplayDeviceType },
			{ "GetLevelInstanceInfo", (Native)&UVictoryBPFunctionLibrary::execGetLevelInstanceInfo },
			{ "GetNamesOfLoadedLevels", (Native)&UVictoryBPFunctionLibrary::execGetNamesOfLoadedLevels },
			{ "GetObjectPath", (Native)&UVictoryBPFunctionLibrary::execGetObjectPath },
			{ "GetPlayerStart", (Native)&UVictoryBPFunctionLibrary::execGetPlayerStart },
			{ "GetPlayerUniqueNetID", (Native)&UVictoryBPFunctionLibrary::execGetPlayerUniqueNetID },
			{ "GetRotatorRelativeRotation", (Native)&UVictoryBPFunctionLibrary::execGetRotatorRelativeRotation },
			{ "GetSoundWaveFromFile", (Native)&UVictoryBPFunctionLibrary::execGetSoundWaveFromFile },
			{ "GetStaticMeshVertexLocations", (Native)&UVictoryBPFunctionLibrary::execGetStaticMeshVertexLocations },
			{ "GetTimeAlive", (Native)&UVictoryBPFunctionLibrary::execGetTimeAlive },
			{ "GetTimeInPlay", (Native)&UVictoryBPFunctionLibrary::execGetTimeInPlay },
			{ "GetUserDisplayAdapterBrand", (Native)&UVictoryBPFunctionLibrary::execGetUserDisplayAdapterBrand },
			{ "GetVectorRelativeLocation", (Native)&UVictoryBPFunctionLibrary::execGetVectorRelativeLocation },
			{ "GetViewportPosition", (Native)&UVictoryBPFunctionLibrary::execGetViewportPosition },
			{ "GetViewportPositionHitResultByChannel", (Native)&UVictoryBPFunctionLibrary::execGetViewportPositionHitResultByChannel },
			{ "GetWidgetFromName", (Native)&UVictoryBPFunctionLibrary::execGetWidgetFromName },
			{ "GraphicsSettings__SetFrameRateCap", (Native)&UVictoryBPFunctionLibrary::execGraphicsSettings__SetFrameRateCap },
			{ "GraphicsSettings__SetFrameRateToBeUnbound", (Native)&UVictoryBPFunctionLibrary::execGraphicsSettings__SetFrameRateToBeUnbound },
			{ "HasSubstring", (Native)&UVictoryBPFunctionLibrary::execHasSubstring },
			{ "HideStreamingLevel", (Native)&UVictoryBPFunctionLibrary::execHideStreamingLevel },
			{ "HorizontalFOV", (Native)&UVictoryBPFunctionLibrary::execHorizontalFOV },
			{ "InsertChildAt", (Native)&UVictoryBPFunctionLibrary::execInsertChildAt },
			{ "IsAlphaNumeric", (Native)&UVictoryBPFunctionLibrary::execIsAlphaNumeric },
			{ "IsPointOnPlane", (Native)&UVictoryBPFunctionLibrary::execIsPointOnPlane },
			{ "IsStandAlone", (Native)&UVictoryBPFunctionLibrary::execIsStandAlone },
			{ "IsWidgetOfClassInViewport", (Native)&UVictoryBPFunctionLibrary::execIsWidgetOfClassInViewport },
			{ "JoyFileIO_GetFiles", (Native)&UVictoryBPFunctionLibrary::execJoyFileIO_GetFiles },
			{ "JoyFileIO_GetFilesInRootAndAllSubFolders", (Native)&UVictoryBPFunctionLibrary::execJoyFileIO_GetFilesInRootAndAllSubFolders },
			{ "JoyGraphicsSettings__FullScreen_Get", (Native)&UVictoryBPFunctionLibrary::execJoyGraphicsSettings__FullScreen_Get },
			{ "JoyGraphicsSettings__FullScreen_Set", (Native)&UVictoryBPFunctionLibrary::execJoyGraphicsSettings__FullScreen_Set },
			{ "JoyIsKey", (Native)&UVictoryBPFunctionLibrary::execJoyIsKey },
			{ "LensFlare__GetLensFlareOffsets", (Native)&UVictoryBPFunctionLibrary::execLensFlare__GetLensFlareOffsets },
			{ "LoadObjectFromAssetPath", (Native)&UVictoryBPFunctionLibrary::execLoadObjectFromAssetPath },
			{ "LoadStringArrayFromFile", (Native)&UVictoryBPFunctionLibrary::execLoadStringArrayFromFile },
			{ "LoadTexture2D_FromDDSFile", (Native)&UVictoryBPFunctionLibrary::execLoadTexture2D_FromDDSFile },
			{ "LoadTexture2D_FromFileByExtension", (Native)&UVictoryBPFunctionLibrary::execLoadTexture2D_FromFileByExtension },
			{ "Loops_ResetBPRunawayCounter", (Native)&UVictoryBPFunctionLibrary::execLoops_ResetBPRunawayCounter },
			{ "MapRangeClamped", (Native)&UVictoryBPFunctionLibrary::execMapRangeClamped },
			{ "MaxOfFloatArray", (Native)&UVictoryBPFunctionLibrary::execMaxOfFloatArray },
			{ "MaxOfIntArray", (Native)&UVictoryBPFunctionLibrary::execMaxOfIntArray },
			{ "MinOfFloatArray", (Native)&UVictoryBPFunctionLibrary::execMinOfFloatArray },
			{ "MinOfIntArray", (Native)&UVictoryBPFunctionLibrary::execMinOfIntArray },
			{ "Mobility__SetSceneCompMobility", (Native)&UVictoryBPFunctionLibrary::execMobility__SetSceneCompMobility },
			{ "NotEqual_Vector2DVector2D", (Native)&UVictoryBPFunctionLibrary::execNotEqual_Vector2DVector2D },
			{ "Open_URL_In_Web_Browser", (Native)&UVictoryBPFunctionLibrary::execOpen_URL_In_Web_Browser },
			{ "OperatingSystem__GetCurrentPlatform", (Native)&UVictoryBPFunctionLibrary::execOperatingSystem__GetCurrentPlatform },
			{ "OptionsMenu__GetDisplayAdapterScreenResolutions", (Native)&UVictoryBPFunctionLibrary::execOptionsMenu__GetDisplayAdapterScreenResolutions },
			{ "Physics__EnterRagDoll", (Native)&UVictoryBPFunctionLibrary::execPhysics__EnterRagDoll },
			{ "Physics__GetLocationofRagDoll", (Native)&UVictoryBPFunctionLibrary::execPhysics__GetLocationofRagDoll },
			{ "Physics__InitializeVictoryRagDoll", (Native)&UVictoryBPFunctionLibrary::execPhysics__InitializeVictoryRagDoll },
			{ "Physics__IsRagDoll", (Native)&UVictoryBPFunctionLibrary::execPhysics__IsRagDoll },
			{ "Physics__LeaveRagDoll", (Native)&UVictoryBPFunctionLibrary::execPhysics__LeaveRagDoll },
			{ "Physics__UpdateCharacterCameraToRagdollLocation", (Native)&UVictoryBPFunctionLibrary::execPhysics__UpdateCharacterCameraToRagdollLocation },
			{ "PlayerController_GetControllerID", (Native)&UVictoryBPFunctionLibrary::execPlayerController_GetControllerID },
			{ "PlayerState_GetPlayerID", (Native)&UVictoryBPFunctionLibrary::execPlayerState_GetPlayerID },
			{ "PlaySoundAtLocationFromFile", (Native)&UVictoryBPFunctionLibrary::execPlaySoundAtLocationFromFile },
			{ "PlaySoundAttachedFromFile", (Native)&UVictoryBPFunctionLibrary::execPlaySoundAttachedFromFile },
			{ "PointDistanceToPlane", (Native)&UVictoryBPFunctionLibrary::execPointDistanceToPlane },
			{ "ProjectWorldToScreenPosition", (Native)&UVictoryBPFunctionLibrary::execProjectWorldToScreenPosition },
			{ "RandBool_Bernoulli", (Native)&UVictoryBPFunctionLibrary::execRandBool_Bernoulli },
			{ "RandBool_Bernoulli_MT", (Native)&UVictoryBPFunctionLibrary::execRandBool_Bernoulli_MT },
			{ "RandFloat_MINMAX_uniDis", (Native)&UVictoryBPFunctionLibrary::execRandFloat_MINMAX_uniDis },
			{ "RandFloat_MINMAX_uniDis_MT", (Native)&UVictoryBPFunctionLibrary::execRandFloat_MINMAX_uniDis_MT },
			{ "RandFloat_uniDis", (Native)&UVictoryBPFunctionLibrary::execRandFloat_uniDis },
			{ "RandFloat_uniDis_MT", (Native)&UVictoryBPFunctionLibrary::execRandFloat_uniDis_MT },
			{ "RandInt_MINMAX_uniDis", (Native)&UVictoryBPFunctionLibrary::execRandInt_MINMAX_uniDis },
			{ "RandInt_MINMAX_uniDis_MT", (Native)&UVictoryBPFunctionLibrary::execRandInt_MINMAX_uniDis_MT },
			{ "RandInt_uniDis", (Native)&UVictoryBPFunctionLibrary::execRandInt_uniDis },
			{ "RandInt_uniDis_MT", (Native)&UVictoryBPFunctionLibrary::execRandInt_uniDis_MT },
			{ "RealWorldTime__GetCurrentOSTime", (Native)&UVictoryBPFunctionLibrary::execRealWorldTime__GetCurrentOSTime },
			{ "RealWorldTime__GetDifferenceBetweenTimes", (Native)&UVictoryBPFunctionLibrary::execRealWorldTime__GetDifferenceBetweenTimes },
			{ "RealWorldTime__GetTimePassedSincePreviousTime", (Native)&UVictoryBPFunctionLibrary::execRealWorldTime__GetTimePassedSincePreviousTime },
			{ "RemoveAllWidgetsOfClass", (Native)&UVictoryBPFunctionLibrary::execRemoveAllWidgetsOfClass },
			{ "RemoveFromStreamingLevels", (Native)&UVictoryBPFunctionLibrary::execRemoveFromStreamingLevels },
			{ "Rendering__FreezeGameRendering", (Native)&UVictoryBPFunctionLibrary::execRendering__FreezeGameRendering },
			{ "Rendering__UnFreezeGameRendering", (Native)&UVictoryBPFunctionLibrary::execRendering__UnFreezeGameRendering },
			{ "SaveGameObject_GetAllSaveSlotFileNames", (Native)&UVictoryBPFunctionLibrary::execSaveGameObject_GetAllSaveSlotFileNames },
			{ "ScreenShots_Rename_Move_Most_Recent", (Native)&UVictoryBPFunctionLibrary::execScreenShots_Rename_Move_Most_Recent },
			{ "seedRand", (Native)&UVictoryBPFunctionLibrary::execseedRand },
			{ "seedRandWithEntropy", (Native)&UVictoryBPFunctionLibrary::execseedRandWithEntropy },
			{ "seedRandWithTime", (Native)&UVictoryBPFunctionLibrary::execseedRandWithTime },
			{ "Selection_SelectionBox", (Native)&UVictoryBPFunctionLibrary::execSelection_SelectionBox },
			{ "ServerTravel", (Native)&UVictoryBPFunctionLibrary::execServerTravel },
			{ "SetBloomIntensity", (Native)&UVictoryBPFunctionLibrary::execSetBloomIntensity },
			{ "SetComponentTickRate", (Native)&UVictoryBPFunctionLibrary::execSetComponentTickRate },
			{ "SetGenericTeamId", (Native)&UVictoryBPFunctionLibrary::execSetGenericTeamId },
			{ "SpawnActorIntoLevel", (Native)&UVictoryBPFunctionLibrary::execSpawnActorIntoLevel },
			{ "String__CombineStrings", (Native)&UVictoryBPFunctionLibrary::execString__CombineStrings },
			{ "String__CombineStrings_Multi", (Native)&UVictoryBPFunctionLibrary::execString__CombineStrings_Multi },
			{ "String__ExplodeString", (Native)&UVictoryBPFunctionLibrary::execString__ExplodeString },
			{ "StringConversion__GetFloatAsStringWithPrecision", (Native)&UVictoryBPFunctionLibrary::execStringConversion__GetFloatAsStringWithPrecision },
			{ "StringIsEmpty", (Native)&UVictoryBPFunctionLibrary::execStringIsEmpty },
			{ "Text_IsNumeric", (Native)&UVictoryBPFunctionLibrary::execText_IsNumeric },
			{ "Text_ToFloat", (Native)&UVictoryBPFunctionLibrary::execText_ToFloat },
			{ "Text_ToInt", (Native)&UVictoryBPFunctionLibrary::execText_ToInt },
			{ "TraceData__GetTraceDataFromCharacterSocket", (Native)&UVictoryBPFunctionLibrary::execTraceData__GetTraceDataFromCharacterSocket },
			{ "TraceData__GetTraceDataFromSkeletalMeshSocket", (Native)&UVictoryBPFunctionLibrary::execTraceData__GetTraceDataFromSkeletalMeshSocket },
			{ "Traces__CharacterMeshTrace___ClosestBone", (Native)&UVictoryBPFunctionLibrary::execTraces__CharacterMeshTrace___ClosestBone },
			{ "Traces__CharacterMeshTrace___ClosestSocket", (Native)&UVictoryBPFunctionLibrary::execTraces__CharacterMeshTrace___ClosestSocket },
			{ "TransformVectorToActorSpace", (Native)&UVictoryBPFunctionLibrary::execTransformVectorToActorSpace },
			{ "TransformVectorToActorSpaceAngle", (Native)&UVictoryBPFunctionLibrary::execTransformVectorToActorSpaceAngle },
			{ "UnloadStreamingLevel", (Native)&UVictoryBPFunctionLibrary::execUnloadStreamingLevel },
			{ "UTCToLocal", (Native)&UVictoryBPFunctionLibrary::execUTCToLocal },
			{ "Vector2DInterpTo", (Native)&UVictoryBPFunctionLibrary::execVector2DInterpTo },
			{ "Vector2DInterpTo_Constant", (Native)&UVictoryBPFunctionLibrary::execVector2DInterpTo_Constant },
			{ "VerticalFOV", (Native)&UVictoryBPFunctionLibrary::execVerticalFOV },
			{ "Victory_AI_MoveToWithFilter", (Native)&UVictoryBPFunctionLibrary::execVictory_AI_MoveToWithFilter },
			{ "Victory_Get_Pixel", (Native)&UVictoryBPFunctionLibrary::execVictory_Get_Pixel },
			{ "Victory_GetGPUBrand", (Native)&UVictoryBPFunctionLibrary::execVictory_GetGPUBrand },
			{ "Victory_GetGPUInfo", (Native)&UVictoryBPFunctionLibrary::execVictory_GetGPUInfo },
			{ "Victory_GetGRHIAdapterName", (Native)&UVictoryBPFunctionLibrary::execVictory_GetGRHIAdapterName },
			{ "Victory_GetPixelFromT2D", (Native)&UVictoryBPFunctionLibrary::execVictory_GetPixelFromT2D },
			{ "Victory_GetPixelsArrayFromT2D", (Native)&UVictoryBPFunctionLibrary::execVictory_GetPixelsArrayFromT2D },
			{ "Victory_GetStringFromOSClipboard", (Native)&UVictoryBPFunctionLibrary::execVictory_GetStringFromOSClipboard },
			{ "Victory_LoadTexture2D_FromFile", (Native)&UVictoryBPFunctionLibrary::execVictory_LoadTexture2D_FromFile },
			{ "Victory_LoadTexture2D_FromFile_Pixels", (Native)&UVictoryBPFunctionLibrary::execVictory_LoadTexture2D_FromFile_Pixels },
			{ "Victory_SavePixels", (Native)&UVictoryBPFunctionLibrary::execVictory_SavePixels },
			{ "Victory_SaveStringToOSClipboard", (Native)&UVictoryBPFunctionLibrary::execVictory_SaveStringToOSClipboard },
			{ "Victory_SecondsToHoursMinutesSeconds", (Native)&UVictoryBPFunctionLibrary::execVictory_SecondsToHoursMinutesSeconds },
			{ "VictoryAppendInline", (Native)&UVictoryBPFunctionLibrary::execVictoryAppendInline },
			{ "VictoryCreateProc", (Native)&UVictoryBPFunctionLibrary::execVictoryCreateProc },
			{ "VictoryDestructible_DestroyChunk", (Native)&UVictoryBPFunctionLibrary::execVictoryDestructible_DestroyChunk },
			{ "VictoryFloatMinusEquals", (Native)&UVictoryBPFunctionLibrary::execVictoryFloatMinusEquals },
			{ "VictoryFloatPlusEquals", (Native)&UVictoryBPFunctionLibrary::execVictoryFloatPlusEquals },
			{ "VictoryGetAllActionKeyBindings", (Native)&UVictoryBPFunctionLibrary::execVictoryGetAllActionKeyBindings },
			{ "VictoryGetAllAxisAndActionMappingsForKey", (Native)&UVictoryBPFunctionLibrary::execVictoryGetAllAxisAndActionMappingsForKey },
			{ "VictoryGetAllAxisKeyBindings", (Native)&UVictoryBPFunctionLibrary::execVictoryGetAllAxisKeyBindings },
			{ "VictoryGetApplicationName", (Native)&UVictoryBPFunctionLibrary::execVictoryGetApplicationName },
			{ "VictoryGetCustomConfigVar_Bool", (Native)&UVictoryBPFunctionLibrary::execVictoryGetCustomConfigVar_Bool },
			{ "VictoryGetCustomConfigVar_Color", (Native)&UVictoryBPFunctionLibrary::execVictoryGetCustomConfigVar_Color },
			{ "VictoryGetCustomConfigVar_Float", (Native)&UVictoryBPFunctionLibrary::execVictoryGetCustomConfigVar_Float },
			{ "VictoryGetCustomConfigVar_Int", (Native)&UVictoryBPFunctionLibrary::execVictoryGetCustomConfigVar_Int },
			{ "VictoryGetCustomConfigVar_Rotator", (Native)&UVictoryBPFunctionLibrary::execVictoryGetCustomConfigVar_Rotator },
			{ "VictoryGetCustomConfigVar_String", (Native)&UVictoryBPFunctionLibrary::execVictoryGetCustomConfigVar_String },
			{ "VictoryGetCustomConfigVar_Vector", (Native)&UVictoryBPFunctionLibrary::execVictoryGetCustomConfigVar_Vector },
			{ "VictoryGetCustomConfigVar_Vector2D", (Native)&UVictoryBPFunctionLibrary::execVictoryGetCustomConfigVar_Vector2D },
			{ "VictoryGetSoundVolume", (Native)&UVictoryBPFunctionLibrary::execVictoryGetSoundVolume },
			{ "VictoryGetVictoryInput", (Native)&UVictoryBPFunctionLibrary::execVictoryGetVictoryInput },
			{ "VictoryGetVictoryInputAxis", (Native)&UVictoryBPFunctionLibrary::execVictoryGetVictoryInputAxis },
			{ "VictoryIntMinusEquals", (Native)&UVictoryBPFunctionLibrary::execVictoryIntMinusEquals },
			{ "VictoryIntPlusEquals", (Native)&UVictoryBPFunctionLibrary::execVictoryIntPlusEquals },
			{ "VictoryIsApplicationRunning", (Native)&UVictoryBPFunctionLibrary::execVictoryIsApplicationRunning },
			{ "VictoryISM_ConvertToVictoryISMActors", (Native)&UVictoryBPFunctionLibrary::execVictoryISM_ConvertToVictoryISMActors },
			{ "VictoryISM_GetAllVictoryISMActors", (Native)&UVictoryBPFunctionLibrary::execVictoryISM_GetAllVictoryISMActors },
			{ "VictoryLoadLevelInstance", (Native)&UVictoryBPFunctionLibrary::execVictoryLoadLevelInstance },
			{ "VictoryPaths__ConfigDir", (Native)&UVictoryBPFunctionLibrary::execVictoryPaths__ConfigDir },
			{ "VictoryPaths__GameRootDirectory", (Native)&UVictoryBPFunctionLibrary::execVictoryPaths__GameRootDirectory },
			{ "VictoryPaths__LogsDir", (Native)&UVictoryBPFunctionLibrary::execVictoryPaths__LogsDir },
			{ "VictoryPaths__SavedDir", (Native)&UVictoryBPFunctionLibrary::execVictoryPaths__SavedDir },
			{ "VictoryPaths__ScreenShotsDir", (Native)&UVictoryBPFunctionLibrary::execVictoryPaths__ScreenShotsDir },
			{ "VictoryPaths__Win64Dir_BinaryLocation", (Native)&UVictoryBPFunctionLibrary::execVictoryPaths__Win64Dir_BinaryLocation },
			{ "VictoryPaths__WindowsNoEditorDir", (Native)&UVictoryBPFunctionLibrary::execVictoryPaths__WindowsNoEditorDir },
			{ "VictoryPhysics_UpdateAngularDamping", (Native)&UVictoryBPFunctionLibrary::execVictoryPhysics_UpdateAngularDamping },
			{ "VictoryReBindActionKey", (Native)&UVictoryBPFunctionLibrary::execVictoryReBindActionKey },
			{ "VictoryReBindAxisKey", (Native)&UVictoryBPFunctionLibrary::execVictoryReBindAxisKey },
			{ "VictoryRemoveActionKeyBind", (Native)&UVictoryBPFunctionLibrary::execVictoryRemoveActionKeyBind },
			{ "VictoryRemoveAxisKeyBind", (Native)&UVictoryBPFunctionLibrary::execVictoryRemoveAxisKeyBind },
			{ "VictorySetCustomConfigVar_Bool", (Native)&UVictoryBPFunctionLibrary::execVictorySetCustomConfigVar_Bool },
			{ "VictorySetCustomConfigVar_Color", (Native)&UVictoryBPFunctionLibrary::execVictorySetCustomConfigVar_Color },
			{ "VictorySetCustomConfigVar_Float", (Native)&UVictoryBPFunctionLibrary::execVictorySetCustomConfigVar_Float },
			{ "VictorySetCustomConfigVar_Int", (Native)&UVictoryBPFunctionLibrary::execVictorySetCustomConfigVar_Int },
			{ "VictorySetCustomConfigVar_Rotator", (Native)&UVictoryBPFunctionLibrary::execVictorySetCustomConfigVar_Rotator },
			{ "VictorySetCustomConfigVar_String", (Native)&UVictoryBPFunctionLibrary::execVictorySetCustomConfigVar_String },
			{ "VictorySetCustomConfigVar_Vector", (Native)&UVictoryBPFunctionLibrary::execVictorySetCustomConfigVar_Vector },
			{ "VictorySetCustomConfigVar_Vector2D", (Native)&UVictoryBPFunctionLibrary::execVictorySetCustomConfigVar_Vector2D },
			{ "VictorySimulateKeyPress", (Native)&UVictoryBPFunctionLibrary::execVictorySimulateKeyPress },
			{ "VictorySimulateMouseWheel", (Native)&UVictoryBPFunctionLibrary::execVictorySimulateMouseWheel },
			{ "VictorySortFloatArray", (Native)&UVictoryBPFunctionLibrary::execVictorySortFloatArray },
			{ "VictorySortIntArray", (Native)&UVictoryBPFunctionLibrary::execVictorySortIntArray },
			{ "VictorySoundVolumeChange", (Native)&UVictoryBPFunctionLibrary::execVictorySoundVolumeChange },
			{ "Viewport__EnableWorldRendering", (Native)&UVictoryBPFunctionLibrary::execViewport__EnableWorldRendering },
			{ "Viewport__GetCenterOfViewport", (Native)&UVictoryBPFunctionLibrary::execViewport__GetCenterOfViewport },
			{ "Viewport__GetMousePosition", (Native)&UVictoryBPFunctionLibrary::execViewport__GetMousePosition },
			{ "Viewport__SetMousePosition", (Native)&UVictoryBPFunctionLibrary::execViewport__SetMousePosition },
			{ "ViewportPositionDeproject", (Native)&UVictoryBPFunctionLibrary::execViewportPositionDeproject },
			{ "Visibility__GetNotRenderedActors", (Native)&UVictoryBPFunctionLibrary::execVisibility__GetNotRenderedActors },
			{ "Visibility__GetRenderedActors", (Native)&UVictoryBPFunctionLibrary::execVisibility__GetRenderedActors },
			{ "WidgetGetChildrenOfClass", (Native)&UVictoryBPFunctionLibrary::execWidgetGetChildrenOfClass },
			{ "WidgetGetParentOfClass", (Native)&UVictoryBPFunctionLibrary::execWidgetGetParentOfClass },
			{ "WidgetIsChildOf", (Native)&UVictoryBPFunctionLibrary::execWidgetIsChildOf },
			{ "WorldType__InEditorWorld", (Native)&UVictoryBPFunctionLibrary::execWorldType__InEditorWorld },
			{ "WorldType__InGameInstanceWorld", (Native)&UVictoryBPFunctionLibrary::execWorldType__InGameInstanceWorld },
			{ "WorldType__InPIEWorld", (Native)&UVictoryBPFunctionLibrary::execWorldType__InPIEWorld },
		};
		FNativeFunctionRegistrar::RegisterFunctions(Class, AnsiFuncs, 249);
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Accessor__GetCharacterSkeletalMesh()
	{
		struct VictoryBPFunctionLibrary_eventAccessor__GetCharacterSkeletalMesh_Parms
		{
			AActor* TheCharacter;
			bool IsValid;
			USkeletalMeshComponent* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Accessor__GetCharacterSkeletalMesh"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(VictoryBPFunctionLibrary_eventAccessor__GetCharacterSkeletalMesh_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventAccessor__GetCharacterSkeletalMesh_Parms), 0x0010000000080588, Z_Construct_UClass_USkeletalMeshComponent_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsValid, VictoryBPFunctionLibrary_eventAccessor__GetCharacterSkeletalMesh_Parms, bool);
			UProperty* NewProp_IsValid = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IsValid"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsValid, VictoryBPFunctionLibrary_eventAccessor__GetCharacterSkeletalMesh_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(IsValid, VictoryBPFunctionLibrary_eventAccessor__GetCharacterSkeletalMesh_Parms), sizeof(bool), true);
			UProperty* NewProp_TheCharacter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TheCharacter"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(TheCharacter, VictoryBPFunctionLibrary_eventAccessor__GetCharacterSkeletalMesh_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Retrieves the \"Mesh\" component of a Character. IsValid lets you know if the data is valid, make sure to check if it is! Requires: the passed in Actor must be a Character"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Accessor__GetNameAsString()
	{
		struct VictoryBPFunctionLibrary_eventAccessor__GetNameAsString_Parms
		{
			const UObject* TheObject;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Accessor__GetNameAsString"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventAccessor__GetNameAsString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventAccessor__GetNameAsString_Parms), 0x0010000000000580);
			UProperty* NewProp_TheObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TheObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(TheObject, VictoryBPFunctionLibrary_eventAccessor__GetNameAsString_Parms), 0x0010000000000082, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get Name as String"));
			MetaData->SetValue(NewProp_TheObject, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Accessor__GetPlayerController()
	{
		struct VictoryBPFunctionLibrary_eventAccessor__GetPlayerController_Parms
		{
			AActor* TheCharacter;
			bool IsValid;
			APlayerController* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Accessor__GetPlayerController"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventAccessor__GetPlayerController_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventAccessor__GetPlayerController_Parms), 0x0010000000000580, Z_Construct_UClass_APlayerController_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsValid, VictoryBPFunctionLibrary_eventAccessor__GetPlayerController_Parms, bool);
			UProperty* NewProp_IsValid = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IsValid"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsValid, VictoryBPFunctionLibrary_eventAccessor__GetPlayerController_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(IsValid, VictoryBPFunctionLibrary_eventAccessor__GetPlayerController_Parms), sizeof(bool), true);
			UProperty* NewProp_TheCharacter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TheCharacter"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(TheCharacter, VictoryBPFunctionLibrary_eventAccessor__GetPlayerController_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get Player Character's Player Controller. Requires: The Passed in Actor must be a character and it must be a player controlled character. IsValid will tell you if the return value is valid, make sure to do a Branch to confirm this!"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Actor__GetAttachedActors()
	{
		struct VictoryBPFunctionLibrary_eventActor__GetAttachedActors_Parms
		{
			AActor* ParentActor;
			TArray<AActor*> ActorsArray;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Actor__GetAttachedActors"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventActor__GetAttachedActors_Parms));
			UProperty* NewProp_ActorsArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ActorsArray, VictoryBPFunctionLibrary_eventActor__GetAttachedActors_Parms), 0x0010000000000180);
			UProperty* NewProp_ActorsArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsArray, TEXT("ActorsArray"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_ParentActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ParentActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ParentActor, VictoryBPFunctionLibrary_eventActor__GetAttachedActors_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Actor|Get Immediate Attached Actors"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Inspired by Sahkan!"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Actor__TeleportToActor()
	{
		struct VictoryBPFunctionLibrary_eventActor__TeleportToActor_Parms
		{
			AActor* ActorToTeleport;
			AActor* DestinationActor;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Actor__TeleportToActor"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventActor__TeleportToActor_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventActor__TeleportToActor_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventActor__TeleportToActor_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventActor__TeleportToActor_Parms), sizeof(bool), true);
			UProperty* NewProp_DestinationActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DestinationActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(DestinationActor, VictoryBPFunctionLibrary_eventActor__TeleportToActor_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_ActorToTeleport = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorToTeleport"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ActorToTeleport, VictoryBPFunctionLibrary_eventActor__TeleportToActor_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Actor|Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Teleport Actor To Actor. Moves an actor instantly to the position and rotation of another actor. Useful for player starts, notes, triggers, and any other destination actors who dont have collision. Returns false if the operation could not occur."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Actor_PrestreamTextures()
	{
		struct VictoryBPFunctionLibrary_eventActor_PrestreamTextures_Parms
		{
			AActor* Target;
			float Seconds;
			bool bEnableStreaming;
			int32 CinematicTextureGroups;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Actor_PrestreamTextures"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventActor_PrestreamTextures_Parms));
			UProperty* NewProp_CinematicTextureGroups = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CinematicTextureGroups"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(CinematicTextureGroups, VictoryBPFunctionLibrary_eventActor_PrestreamTextures_Parms), 0x0010000000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableStreaming, VictoryBPFunctionLibrary_eventActor_PrestreamTextures_Parms, bool);
			UProperty* NewProp_bEnableStreaming = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bEnableStreaming"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableStreaming, VictoryBPFunctionLibrary_eventActor_PrestreamTextures_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bEnableStreaming, VictoryBPFunctionLibrary_eventActor_PrestreamTextures_Parms), sizeof(bool), true);
			UProperty* NewProp_Seconds = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Seconds"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Seconds, VictoryBPFunctionLibrary_eventActor_PrestreamTextures_Parms), 0x0010000000000080);
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Target, VictoryBPFunctionLibrary_eventActor_PrestreamTextures_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VictoryBPLibrary|Actor"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bEnableStreaming"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_CinematicTextureGroups"), TEXT("0"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Seconds"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("PrestreamTextures (Actor)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Calls PrestreamTextures() for all the actor's meshcomponents.\nPrestreamTextures() tells the streaming system to start loading all textures with all mip-levels.\n@param Seconds - Number of seconds to force all mip-levels to be resident\n@param bEnableStreaming - Whether to start (true) or stop (false) streaming\n@param CinematicTextureGroups - Bitfield indicating which texture groups that use extra high-resolution mips"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_AddToActorRotation()
	{
		struct VictoryBPFunctionLibrary_eventAddToActorRotation_Parms
		{
			AActor* TheActor;
			FRotator AddRot;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddToActorRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(VictoryBPFunctionLibrary_eventAddToActorRotation_Parms));
			UProperty* NewProp_AddRot = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AddRot"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AddRot, VictoryBPFunctionLibrary_eventAddToActorRotation_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_TheActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TheActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(TheActor, VictoryBPFunctionLibrary_eventAddToActorRotation_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_AddToStreamingLevels()
	{
		struct VictoryBPFunctionLibrary_eventAddToStreamingLevels_Parms
		{
			UObject* WorldContextObject;
			FLevelStreamInstanceInfo LevelInstanceInfo;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddToStreamingLevels"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(VictoryBPFunctionLibrary_eventAddToStreamingLevels_Parms));
			UProperty* NewProp_LevelInstanceInfo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LevelInstanceInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LevelInstanceInfo, VictoryBPFunctionLibrary_eventAddToStreamingLevels_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FLevelStreamInstanceInfo());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, VictoryBPFunctionLibrary_eventAddToStreamingLevels_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LevelStreaming"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_LevelInstanceInfo, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_AnimatedVertex__GetAnimatedVertexLocations()
	{
		struct VictoryBPFunctionLibrary_eventAnimatedVertex__GetAnimatedVertexLocations_Parms
		{
			USkeletalMeshComponent* Mesh;
			TArray<FVector> Locations;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimatedVertex__GetAnimatedVertexLocations"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(VictoryBPFunctionLibrary_eventAnimatedVertex__GetAnimatedVertexLocations_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventAnimatedVertex__GetAnimatedVertexLocations_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventAnimatedVertex__GetAnimatedVertexLocations_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventAnimatedVertex__GetAnimatedVertexLocations_Parms), sizeof(bool), true);
			UProperty* NewProp_Locations = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Locations"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Locations, VictoryBPFunctionLibrary_eventAnimatedVertex__GetAnimatedVertexLocations_Parms), 0x0010000000000180);
			UProperty* NewProp_Locations_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Locations, TEXT("Locations"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Mesh = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Mesh"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Mesh, VictoryBPFunctionLibrary_eventAnimatedVertex__GetAnimatedVertexLocations_Parms), 0x0010000000080080, Z_Construct_UClass_USkeletalMeshComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns false if the operation could not occur. PawnVelocityCorrection is deprecated as of 4.9 due to internal improvements in the Engine."));
			MetaData->SetValue(NewProp_Mesh, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Animation__GetAimOffsets()
	{
		struct VictoryBPFunctionLibrary_eventAnimation__GetAimOffsets_Parms
		{
			AActor* AnimBPOwner;
			float Pitch;
			float Yaw;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Animation__GetAimOffsets"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(VictoryBPFunctionLibrary_eventAnimation__GetAimOffsets_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventAnimation__GetAimOffsets_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventAnimation__GetAimOffsets_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventAnimation__GetAimOffsets_Parms), sizeof(bool), true);
			UProperty* NewProp_Yaw = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Yaw"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Yaw, VictoryBPFunctionLibrary_eventAnimation__GetAimOffsets_Parms), 0x0010000000000180);
			UProperty* NewProp_Pitch = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Pitch"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Pitch, VictoryBPFunctionLibrary_eventAnimation__GetAimOffsets_Parms), 0x0010000000000180);
			UProperty* NewProp_AnimBPOwner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AnimBPOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(AnimBPOwner, VictoryBPFunctionLibrary_eventAnimation__GetAimOffsets_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("AnimBPOwner - Must be a Character, Conversion Internally For Convenience.\\n\\nRetrieves the Aim Offsets Pitch & Yaw Based On the Rotation of the Controller of The Character Owning The Anim Instance.\\n\\nThe Pitch and Yaw are meant to be used with a Blend Space going from -90,-90 to 90,90.\\n   Returns true if function filled the pitch and yaw vars successfully"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Animation__GetAimOffsetsFromRotation()
	{
		struct VictoryBPFunctionLibrary_eventAnimation__GetAimOffsetsFromRotation_Parms
		{
			AActor* AnimBPOwner;
			FRotator TheRotation;
			float Pitch;
			float Yaw;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Animation__GetAimOffsetsFromRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventAnimation__GetAimOffsetsFromRotation_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventAnimation__GetAimOffsetsFromRotation_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventAnimation__GetAimOffsetsFromRotation_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventAnimation__GetAimOffsetsFromRotation_Parms), sizeof(bool), true);
			UProperty* NewProp_Yaw = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Yaw"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Yaw, VictoryBPFunctionLibrary_eventAnimation__GetAimOffsetsFromRotation_Parms), 0x0010000000000180);
			UProperty* NewProp_Pitch = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Pitch"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Pitch, VictoryBPFunctionLibrary_eventAnimation__GetAimOffsetsFromRotation_Parms), 0x0010000000000180);
			UProperty* NewProp_TheRotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TheRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TheRotation, VictoryBPFunctionLibrary_eventAnimation__GetAimOffsetsFromRotation_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_AnimBPOwner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AnimBPOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(AnimBPOwner, VictoryBPFunctionLibrary_eventAnimation__GetAimOffsetsFromRotation_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("AnimBPOwner - Must be a Character, Conversion Internally For Convenience.\\n\\nRetrieves the Aim Offsets Pitch & Yaw for the AnimBPOwner Based On the supplied Rotation.\\n\\nThe Pitch and Yaw are meant to be used with a Blend Space going from -90,-90 to 90,90.\\n    Returns true if function filled the pitch and yaw vars successfully"));
			MetaData->SetValue(NewProp_TheRotation, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_AppendMultiple()
	{
		struct VictoryBPFunctionLibrary_eventAppendMultiple_Parms
		{
			FString A;
			FString B;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AppendMultiple"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventAppendMultiple_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventAppendMultiple_Parms), 0x0010000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(B, VictoryBPFunctionLibrary_eventAppendMultiple_Parms), 0x0010000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(A, VictoryBPFunctionLibrary_eventAppendMultiple_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CommutativeAssociativeBinaryOperator"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Append Multiple"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("concatenate combine append strings"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Addition of strings (A + B) with pins. Contributed by KeyToTruth"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Array_IsValidIndex()
	{
		struct VictoryBPFunctionLibrary_eventArray_IsValidIndex_Parms
		{
			TArray<int32> TargetArray;
			int32 Index;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Array_IsValidIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventArray_IsValidIndex_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventArray_IsValidIndex_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventArray_IsValidIndex_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventArray_IsValidIndex_Parms), sizeof(bool), true);
			UProperty* NewProp_Index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Index"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Index, VictoryBPFunctionLibrary_eventArray_IsValidIndex_Parms), 0x0010000000000080);
			UProperty* NewProp_TargetArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(TargetArray, VictoryBPFunctionLibrary_eventArray_IsValidIndex_Parms), 0x0010000008000182);
			UProperty* NewProp_TargetArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TargetArray, TEXT("TargetArray"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ArrayParm"), TEXT("TargetArray"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VictoryBPLibrary|Utilities|Array"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("VALID INDEX"));
			MetaData->SetValue(ReturnFunction, TEXT("CustomThunk"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Valid Index"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("*See if index is a valid index for this array\n*\n*@param    TargetArray        The array to perform the operation on\n*@param    Index            The index to check.\n*@return    Bool if integer is valid index for this array"));
			MetaData->SetValue(NewProp_TargetArray, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Array_Sort()
	{
		struct VictoryBPFunctionLibrary_eventArray_Sort_Parms
		{
			TArray<int32> TargetArray;
			bool bAscendingOrder;
			FName VariableName;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Array_Sort"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(VictoryBPFunctionLibrary_eventArray_Sort_Parms));
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(VariableName, VictoryBPFunctionLibrary_eventArray_Sort_Parms), 0x0010040000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAscendingOrder, VictoryBPFunctionLibrary_eventArray_Sort_Parms, bool);
			UProperty* NewProp_bAscendingOrder = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bAscendingOrder"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAscendingOrder, VictoryBPFunctionLibrary_eventArray_Sort_Parms), 0x0010040000000080, CPP_BOOL_PROPERTY_BITMASK(bAscendingOrder, VictoryBPFunctionLibrary_eventArray_Sort_Parms), sizeof(bool), true);
			UProperty* NewProp_TargetArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(TargetArray, VictoryBPFunctionLibrary_eventArray_Sort_Parms), 0x0010000008000182);
			UProperty* NewProp_TargetArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TargetArray, TEXT("TargetArray"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("bAscendingOrder,VariableName"));
			MetaData->SetValue(ReturnFunction, TEXT("ArrayParm"), TEXT("TargetArray"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VictoryBPLibrary|Utilities|Array"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bAscendingOrder"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_VariableName"), TEXT("None"));
			MetaData->SetValue(ReturnFunction, TEXT("CustomThunk"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Sort"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sort the elements of an array by FString, FName, FText, float, int or boolean.\nSupports struct and object based arrays.\n\n@param  TargetArray             The array to sort.\n@param  bAscendingOrder If true, sort by ascending order.\n@param  VariableName    If a struct or object based array, the name of the variable to sort by."));
			MetaData->SetValue(NewProp_TargetArray, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Calcs__ClosestPointToSourcePoint()
	{
		struct VictoryBPFunctionLibrary_eventCalcs__ClosestPointToSourcePoint_Parms
		{
			FVector Source;
			TArray<FVector> OtherPoints;
			FVector ClosestPoint;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Calcs__ClosestPointToSourcePoint"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventCalcs__ClosestPointToSourcePoint_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventCalcs__ClosestPointToSourcePoint_Parms), 0x0010000000000580);
			UProperty* NewProp_ClosestPoint = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ClosestPoint"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ClosestPoint, VictoryBPFunctionLibrary_eventCalcs__ClosestPointToSourcePoint_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_OtherPoints = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OtherPoints"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(OtherPoints, VictoryBPFunctionLibrary_eventCalcs__ClosestPointToSourcePoint_Parms), 0x0010000008000182);
			UProperty* NewProp_OtherPoints_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OtherPoints, TEXT("OtherPoints"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Source = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Source"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Source, VictoryBPFunctionLibrary_eventCalcs__ClosestPointToSourcePoint_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Compare Source Vector against Array of Vectors. Returns: Returns the Closest Vector to Source and what that closest Distance is, or -1 if there was an error such as array being empty. Ignores: Ignores Source if source is in the array"));
			MetaData->SetValue(NewProp_OtherPoints, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_Source, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Capture2D_Project()
	{
		struct VictoryBPFunctionLibrary_eventCapture2D_Project_Parms
		{
			ASceneCapture2D* Target;
			FVector Location;
			FVector2D OutPixelLocation;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Capture2D_Project"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventCapture2D_Project_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventCapture2D_Project_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventCapture2D_Project_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventCapture2D_Project_Parms), sizeof(bool), true);
			UProperty* NewProp_OutPixelLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutPixelLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OutPixelLocation, VictoryBPFunctionLibrary_eventCapture2D_Project_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Location, VictoryBPFunctionLibrary_eventCapture2D_Project_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Target, VictoryBPFunctionLibrary_eventCapture2D_Project_Parms), 0x0010000000000080, Z_Construct_UClass_ASceneCapture2D_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VictoryBPLibrary|SceneCapture"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("Target"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Contributed by Community Member Kris!"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Capture2D_SaveImage()
	{
		struct VictoryBPFunctionLibrary_eventCapture2D_SaveImage_Parms
		{
			ASceneCapture2D* Target;
			FString ImagePath;
			FLinearColor ClearColour;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Capture2D_SaveImage"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(VictoryBPFunctionLibrary_eventCapture2D_SaveImage_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventCapture2D_SaveImage_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventCapture2D_SaveImage_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventCapture2D_SaveImage_Parms), sizeof(bool), true);
			UProperty* NewProp_ClearColour = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ClearColour"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ClearColour, VictoryBPFunctionLibrary_eventCapture2D_SaveImage_Parms), 0x0010000000000082, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_ImagePath = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ImagePath"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ImagePath, VictoryBPFunctionLibrary_eventCapture2D_SaveImage_Parms), 0x0010000000000082);
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Target, VictoryBPFunctionLibrary_eventCapture2D_SaveImage_Parms), 0x0010000000000080, Z_Construct_UClass_ASceneCapture2D_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|SceneCapture"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("Target"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Make sure to include the appropriate image extension in your file path! Recommended: .bmp, .jpg, .png. Contributed by Community Member Kris!"));
			MetaData->SetValue(NewProp_ClearColour, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_ImagePath, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_CaptureComponent2D_Project()
	{
		struct VictoryBPFunctionLibrary_eventCaptureComponent2D_Project_Parms
		{
			USceneCaptureComponent2D* Target;
			FVector Location;
			FVector2D OutPixelLocation;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CaptureComponent2D_Project"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventCaptureComponent2D_Project_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventCaptureComponent2D_Project_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventCaptureComponent2D_Project_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventCaptureComponent2D_Project_Parms), sizeof(bool), true);
			UProperty* NewProp_OutPixelLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutPixelLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OutPixelLocation, VictoryBPFunctionLibrary_eventCaptureComponent2D_Project_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Location, VictoryBPFunctionLibrary_eventCaptureComponent2D_Project_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Target, VictoryBPFunctionLibrary_eventCaptureComponent2D_Project_Parms), 0x0010000000080080, Z_Construct_UClass_USceneCaptureComponent2D_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VictoryBPLibrary|SceneCapture"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Contributed by Community Member Kris!"));
			MetaData->SetValue(NewProp_Target, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_CaptureComponent2D_SaveImage()
	{
		struct VictoryBPFunctionLibrary_eventCaptureComponent2D_SaveImage_Parms
		{
			USceneCaptureComponent2D* Target;
			FString ImagePath;
			FLinearColor ClearColour;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CaptureComponent2D_SaveImage"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(VictoryBPFunctionLibrary_eventCaptureComponent2D_SaveImage_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventCaptureComponent2D_SaveImage_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventCaptureComponent2D_SaveImage_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventCaptureComponent2D_SaveImage_Parms), sizeof(bool), true);
			UProperty* NewProp_ClearColour = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ClearColour"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ClearColour, VictoryBPFunctionLibrary_eventCaptureComponent2D_SaveImage_Parms), 0x0010000000000082, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_ImagePath = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ImagePath"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ImagePath, VictoryBPFunctionLibrary_eventCaptureComponent2D_SaveImage_Parms), 0x0010000000000082);
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Target, VictoryBPFunctionLibrary_eventCaptureComponent2D_SaveImage_Parms), 0x0010000000080080, Z_Construct_UClass_USceneCaptureComponent2D_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|SceneCapture"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Make sure to include the appropriate image extension in your file path! Recommended: .bmp, .jpg, .png. Contributed by Community Member Kris!"));
			MetaData->SetValue(NewProp_ClearColour, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_ImagePath, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_Target, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Character__GetControllerRotation()
	{
		struct VictoryBPFunctionLibrary_eventCharacter__GetControllerRotation_Parms
		{
			AActor* TheCharacter;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Character__GetControllerRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(VictoryBPFunctionLibrary_eventCharacter__GetControllerRotation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventCharacter__GetControllerRotation_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_TheCharacter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TheCharacter"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(TheCharacter, VictoryBPFunctionLibrary_eventCharacter__GetControllerRotation_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Conversion!"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Input Actor is expected to be a ACharacter, conversion done internally for your convenience"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_CharacterMovement__SetMaxMoveSpeed()
	{
		struct VictoryBPFunctionLibrary_eventCharacterMovement__SetMaxMoveSpeed_Parms
		{
			ACharacter* TheCharacter;
			float NewMaxMoveSpeed;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CharacterMovement__SetMaxMoveSpeed"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventCharacterMovement__SetMaxMoveSpeed_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventCharacterMovement__SetMaxMoveSpeed_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventCharacterMovement__SetMaxMoveSpeed_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventCharacterMovement__SetMaxMoveSpeed_Parms), sizeof(bool), true);
			UProperty* NewProp_NewMaxMoveSpeed = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewMaxMoveSpeed"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NewMaxMoveSpeed, VictoryBPFunctionLibrary_eventCharacterMovement__SetMaxMoveSpeed_Parms), 0x0010000000000080);
			UProperty* NewProp_TheCharacter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TheCharacter"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(TheCharacter, VictoryBPFunctionLibrary_eventCharacterMovement__SetMaxMoveSpeed_Parms), 0x0010000000000080, Z_Construct_UClass_ACharacter_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("TheCharacter"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set Max Move Speed. Supply the Character whose Character Movement to change! Returns false if operation could not occur due to invalid Character or MovementComponent could not be obtained."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_ClientWindow__GameWindowIsForeGroundInOS()
	{
		struct VictoryBPFunctionLibrary_eventClientWindow__GameWindowIsForeGroundInOS_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClientWindow__GameWindowIsForeGroundInOS"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventClientWindow__GameWindowIsForeGroundInOS_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventClientWindow__GameWindowIsForeGroundInOS_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventClientWindow__GameWindowIsForeGroundInOS_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventClientWindow__GameWindowIsForeGroundInOS_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|GameWindow"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Is the Current Game Window the Foreground window in the OS, or in the Editor? This will be accurate in standalone running of the game as well as in the editor PIE"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Clone__StaticMeshActor()
	{
		struct VictoryBPFunctionLibrary_eventClone__StaticMeshActor_Parms
		{
			UObject* WorldContextObject;
			bool IsValid;
			AStaticMeshActor* ToClone;
			FVector LocationOffset;
			FRotator RotationOffset;
			AStaticMeshActor* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Clone__StaticMeshActor"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventClone__StaticMeshActor_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventClone__StaticMeshActor_Parms), 0x0010000000000580, Z_Construct_UClass_AStaticMeshActor_NoRegister());
			UProperty* NewProp_RotationOffset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RotationOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RotationOffset, VictoryBPFunctionLibrary_eventClone__StaticMeshActor_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_LocationOffset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LocationOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LocationOffset, VictoryBPFunctionLibrary_eventClone__StaticMeshActor_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_ToClone = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ToClone"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ToClone, VictoryBPFunctionLibrary_eventClone__StaticMeshActor_Parms), 0x0010000000000080, Z_Construct_UClass_AStaticMeshActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsValid, VictoryBPFunctionLibrary_eventClone__StaticMeshActor_Parms, bool);
			UProperty* NewProp_IsValid = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IsValid"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsValid, VictoryBPFunctionLibrary_eventClone__StaticMeshActor_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(IsValid, VictoryBPFunctionLibrary_eventClone__StaticMeshActor_Parms), sizeof(bool), true);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, VictoryBPFunctionLibrary_eventClone__StaticMeshActor_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_LocationOffset"), TEXT("0.000000,0.000000,0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_RotationOffset"), TEXT("0.000000,0.000000,0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Clones an actor by obtaining its class and creating a copy. Returns the created Actor. The cloned actor is set to have the rotation and location of the initial actor. You can optionally specify location / rotation offsets for the new clone from original actor. Use IsValid to know if the actor was able to be cloned."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_CompareMD5Hash()
	{
		struct VictoryBPFunctionLibrary_eventCompareMD5Hash_Parms
		{
			FString MD5HashFile1;
			FString MD5HashFile2;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CompareMD5Hash"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventCompareMD5Hash_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventCompareMD5Hash_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventCompareMD5Hash_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventCompareMD5Hash_Parms), sizeof(bool), true);
			UProperty* NewProp_MD5HashFile2 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MD5HashFile2"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(MD5HashFile2, VictoryBPFunctionLibrary_eventCompareMD5Hash_Parms), 0x0010000000000080);
			UProperty* NewProp_MD5HashFile1 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MD5HashFile1"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(MD5HashFile1, VictoryBPFunctionLibrary_eventCompareMD5Hash_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|MD5"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Game thread may pause while hashing is ocurring. Please note that hashing multi-gb size files is very very slow, smaller files will process much faster :) <3 Rama"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Component_PrestreamTextures()
	{
		struct VictoryBPFunctionLibrary_eventComponent_PrestreamTextures_Parms
		{
			UMeshComponent* Target;
			float Seconds;
			bool bEnableStreaming;
			int32 CinematicTextureGroups;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Component_PrestreamTextures"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventComponent_PrestreamTextures_Parms));
			UProperty* NewProp_CinematicTextureGroups = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CinematicTextureGroups"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(CinematicTextureGroups, VictoryBPFunctionLibrary_eventComponent_PrestreamTextures_Parms), 0x0010000000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableStreaming, VictoryBPFunctionLibrary_eventComponent_PrestreamTextures_Parms, bool);
			UProperty* NewProp_bEnableStreaming = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bEnableStreaming"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableStreaming, VictoryBPFunctionLibrary_eventComponent_PrestreamTextures_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bEnableStreaming, VictoryBPFunctionLibrary_eventComponent_PrestreamTextures_Parms), sizeof(bool), true);
			UProperty* NewProp_Seconds = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Seconds"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Seconds, VictoryBPFunctionLibrary_eventComponent_PrestreamTextures_Parms), 0x0010000000000080);
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Target, VictoryBPFunctionLibrary_eventComponent_PrestreamTextures_Parms), 0x0010000000080080, Z_Construct_UClass_UMeshComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VictoryBPLibrary|Component"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bEnableStreaming"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_CinematicTextureGroups"), TEXT("0"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Seconds"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("PrestreamTextures (Component)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Tells the streaming system to start loading all textures with all mip-levels.\n@param Seconds - Number of seconds to force all mip-levels to be resident\n@param bEnableStreaming - Whether to start (true) or stop (false) streaming\n@param CinematicTextureGroups - Bitfield indicating which texture groups that use extra high-resolution mips"));
			MetaData->SetValue(NewProp_Target, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_constructRand()
	{
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("constructRand"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Construct a random device, returns either a random device or the default random engine; system dependant;"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Conversion__FloatToRoundedInteger()
	{
		struct VictoryBPFunctionLibrary_eventConversion__FloatToRoundedInteger_Parms
		{
			float IN_Float;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conversion__FloatToRoundedInteger"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventConversion__FloatToRoundedInteger_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventConversion__FloatToRoundedInteger_Parms), 0x0010000000000580);
			UProperty* NewProp_IN_Float = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IN_Float"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(IN_Float, VictoryBPFunctionLibrary_eventConversion__FloatToRoundedInteger_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a float to a rounded Integer, examples: 1.4 becomes 1,   1.6 becomes 2"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Conversions__ColorToString()
	{
		struct VictoryBPFunctionLibrary_eventConversions__ColorToString_Parms
		{
			FLinearColor Color;
			FString ColorAsString;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conversions__ColorToString"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventConversions__ColorToString_Parms));
			UProperty* NewProp_ColorAsString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ColorAsString"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ColorAsString, VictoryBPFunctionLibrary_eventConversions__ColorToString_Parms), 0x0010000000000180);
			UProperty* NewProp_Color = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Color"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Color, VictoryBPFunctionLibrary_eventConversions__ColorToString_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Conversion!"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("~>"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Color to String"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Convert Color to String!"));
			MetaData->SetValue(NewProp_Color, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Conversions__RotatorToVector()
	{
		struct VictoryBPFunctionLibrary_eventConversions__RotatorToVector_Parms
		{
			FRotator TheRotator;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conversions__RotatorToVector"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventConversions__RotatorToVector_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventConversions__RotatorToVector_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_TheRotator = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TheRotator"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TheRotator, VictoryBPFunctionLibrary_eventConversions__RotatorToVector_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Conversion!"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Convert Rotator to Vector"));
			MetaData->SetValue(NewProp_TheRotator, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Conversions__StringToColor()
	{
		struct VictoryBPFunctionLibrary_eventConversions__StringToColor_Parms
		{
			FString String;
			FLinearColor ConvertedColor;
			bool IsValid;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conversions__StringToColor"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventConversions__StringToColor_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsValid, VictoryBPFunctionLibrary_eventConversions__StringToColor_Parms, bool);
			UProperty* NewProp_IsValid = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IsValid"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsValid, VictoryBPFunctionLibrary_eventConversions__StringToColor_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(IsValid, VictoryBPFunctionLibrary_eventConversions__StringToColor_Parms), sizeof(bool), true);
			UProperty* NewProp_ConvertedColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ConvertedColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ConvertedColor, VictoryBPFunctionLibrary_eventConversions__StringToColor_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_String = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("String"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(String, VictoryBPFunctionLibrary_eventConversions__StringToColor_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Conversion!"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("String to Color"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Convert String Back To Color. IsValid indicates whether or not the string could be successfully converted."));
			MetaData->SetValue(NewProp_String, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Conversions__StringToRotator()
	{
		struct VictoryBPFunctionLibrary_eventConversions__StringToRotator_Parms
		{
			FString String;
			FRotator ConvertedRotator;
			bool IsValid;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conversions__StringToRotator"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventConversions__StringToRotator_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsValid, VictoryBPFunctionLibrary_eventConversions__StringToRotator_Parms, bool);
			UProperty* NewProp_IsValid = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IsValid"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsValid, VictoryBPFunctionLibrary_eventConversions__StringToRotator_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(IsValid, VictoryBPFunctionLibrary_eventConversions__StringToRotator_Parms), sizeof(bool), true);
			UProperty* NewProp_ConvertedRotator = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ConvertedRotator"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ConvertedRotator, VictoryBPFunctionLibrary_eventConversions__StringToRotator_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_String = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("String"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(String, VictoryBPFunctionLibrary_eventConversions__StringToRotator_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Conversion!"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("String to Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Convert String Back To Rotator. IsValid indicates whether or not the string could be successfully converted."));
			MetaData->SetValue(NewProp_String, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Conversions__StringToVector()
	{
		struct VictoryBPFunctionLibrary_eventConversions__StringToVector_Parms
		{
			FString String;
			FVector ConvertedVector;
			bool IsValid;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conversions__StringToVector"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventConversions__StringToVector_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsValid, VictoryBPFunctionLibrary_eventConversions__StringToVector_Parms, bool);
			UProperty* NewProp_IsValid = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IsValid"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsValid, VictoryBPFunctionLibrary_eventConversions__StringToVector_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(IsValid, VictoryBPFunctionLibrary_eventConversions__StringToVector_Parms), sizeof(bool), true);
			UProperty* NewProp_ConvertedVector = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ConvertedVector"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ConvertedVector, VictoryBPFunctionLibrary_eventConversions__StringToVector_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_String = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("String"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(String, VictoryBPFunctionLibrary_eventConversions__StringToVector_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Conversion!"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("String to Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Convert String Back To Vector. IsValid indicates whether or not the string could be successfully converted."));
			MetaData->SetValue(NewProp_String, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Conversions__VectorToRotator()
	{
		struct VictoryBPFunctionLibrary_eventConversions__VectorToRotator_Parms
		{
			FVector TheVector;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conversions__VectorToRotator"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventConversions__VectorToRotator_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventConversions__VectorToRotator_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_TheVector = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TheVector"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TheVector, VictoryBPFunctionLibrary_eventConversions__VectorToRotator_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Conversion!"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Convert Vector to Rotator"));
			MetaData->SetValue(NewProp_TheVector, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_CountOccurrancesOfSubString()
	{
		struct VictoryBPFunctionLibrary_eventCountOccurrancesOfSubString_Parms
		{
			FString Source;
			FString SubString;
			TEnumAsByte<ESearchCase::Type> SearchCase;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CountOccurrancesOfSubString"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventCountOccurrancesOfSubString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventCountOccurrancesOfSubString_Parms), 0x0010000000000580);
			UProperty* NewProp_SearchCase = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SearchCase"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(SearchCase, VictoryBPFunctionLibrary_eventCountOccurrancesOfSubString_Parms), 0x0010000000000080, Z_Construct_UEnum_CoreUObject_ESearchCase());
			UProperty* NewProp_SubString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SubString"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SubString, VictoryBPFunctionLibrary_eventCountOccurrancesOfSubString_Parms), 0x0010000000000080);
			UProperty* NewProp_Source = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Source"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Source, VictoryBPFunctionLibrary_eventCountOccurrancesOfSubString_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_SearchCase"), TEXT("IgnoreCase"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_CreateMD5Hash()
	{
		struct VictoryBPFunctionLibrary_eventCreateMD5Hash_Parms
		{
			FString FileToHash;
			FString FileToStoreHashTo;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CreateMD5Hash"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventCreateMD5Hash_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventCreateMD5Hash_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventCreateMD5Hash_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventCreateMD5Hash_Parms), sizeof(bool), true);
			UProperty* NewProp_FileToStoreHashTo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FileToStoreHashTo"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(FileToStoreHashTo, VictoryBPFunctionLibrary_eventCreateMD5Hash_Parms), 0x0010000000000080);
			UProperty* NewProp_FileToHash = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FileToHash"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(FileToHash, VictoryBPFunctionLibrary_eventCreateMD5Hash_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|MD5"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Game thread may pause while hashing is ocurring. Please note that hashing multi-gb size files is very very slow, smaller files will process much faster :) <3 Rama"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_CreateObject()
	{
		struct VictoryBPFunctionLibrary_eventCreateObject_Parms
		{
			UObject* WorldContextObject;
			UClass* TheObjectClass;
			UObject* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CreateObject"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventCreateObject_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventCreateObject_Parms), 0x0010000000000580, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_TheObjectClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TheObjectClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(TheObjectClass, VictoryBPFunctionLibrary_eventCreateObject_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister(), UClass::StaticClass());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, VictoryBPFunctionLibrary_eventCreateObject_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Epic has introduced Construct Object as of 4.9.0, I recommend you use that instead! -Rama"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Make sure to save off the return value as a global variable in one of your BPs or else it will get garbage collected!"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_CreatePlane()
	{
		struct VictoryBPFunctionLibrary_eventCreatePlane_Parms
		{
			FVector Center;
			FVector Normal;
			FPlane ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CreatePlane"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(VictoryBPFunctionLibrary_eventCreatePlane_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventCreatePlane_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FPlane());
			UProperty* NewProp_Normal = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Normal"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Normal, VictoryBPFunctionLibrary_eventCreatePlane_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Center = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Center"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Center, VictoryBPFunctionLibrary_eventCreatePlane_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Math|Plane"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("make base plane"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Creates a plane centered on a world space point with a facing direction of Normal.\n\n@param Center  The world space point the plane should be centered on (easy to observe with DrawDebugPlane)\n@param Normal  The facing direction of the plane (can receive a Rotator)\n@return Plane coordinates"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_CreatePrimitiveComponent()
	{
		struct VictoryBPFunctionLibrary_eventCreatePrimitiveComponent_Parms
		{
			UObject* WorldContextObject;
			TSubclassOf<UPrimitiveComponent>  CompClass;
			FName Name;
			FVector Location;
			FRotator Rotation;
			UPrimitiveComponent* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CreatePrimitiveComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(VictoryBPFunctionLibrary_eventCreatePrimitiveComponent_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventCreatePrimitiveComponent_Parms), 0x0010000000080588, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Rotation, VictoryBPFunctionLibrary_eventCreatePrimitiveComponent_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Location, VictoryBPFunctionLibrary_eventCreatePrimitiveComponent_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Name = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Name"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(Name, VictoryBPFunctionLibrary_eventCreatePrimitiveComponent_Parms), 0x0010000000000080);
			UProperty* NewProp_CompClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CompClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(CompClass, VictoryBPFunctionLibrary_eventCreatePrimitiveComponent_Parms), 0x0014000000000080, Z_Construct_UClass_UPrimitiveComponent_NoRegister(), UClass::StaticClass());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, VictoryBPFunctionLibrary_eventCreatePrimitiveComponent_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Make sure to save off the return value as a global variable in one of your BPs or else it will get garbage collected!"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_CreateTextureRenderTarget2D()
	{
		struct VictoryBPFunctionLibrary_eventCreateTextureRenderTarget2D_Parms
		{
			int32 Width;
			int32 Height;
			bool bHDR;
			FLinearColor ClearColor;
			float Gamma;
			UTextureRenderTarget2D* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CreateTextureRenderTarget2D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(VictoryBPFunctionLibrary_eventCreateTextureRenderTarget2D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventCreateTextureRenderTarget2D_Parms), 0x0010000000000580, Z_Construct_UClass_UTextureRenderTarget2D_NoRegister());
			UProperty* NewProp_Gamma = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Gamma"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Gamma, VictoryBPFunctionLibrary_eventCreateTextureRenderTarget2D_Parms), 0x0010000000000080);
			UProperty* NewProp_ClearColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ClearColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ClearColor, VictoryBPFunctionLibrary_eventCreateTextureRenderTarget2D_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FLinearColor());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHDR, VictoryBPFunctionLibrary_eventCreateTextureRenderTarget2D_Parms, bool);
			UProperty* NewProp_bHDR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bHDR"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHDR, VictoryBPFunctionLibrary_eventCreateTextureRenderTarget2D_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bHDR, VictoryBPFunctionLibrary_eventCreateTextureRenderTarget2D_Parms), sizeof(bool), true);
			UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Height"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Height, VictoryBPFunctionLibrary_eventCreateTextureRenderTarget2D_Parms), 0x0010000000000080);
			UProperty* NewProp_Width = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Width"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Width, VictoryBPFunctionLibrary_eventCreateTextureRenderTarget2D_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bHDR"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_ClearColor"), TEXT("(R=1.000000,G=1.000000,B=1.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Gamma"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Height"), TEXT("256"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Width"), TEXT("256"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Create a new Texture Render Target 2D, ideal for use with Scene Capture Components created during runtime that need their own unique Render Targets\n@param        Width Texture Width\n@param        Height Texture Height\n@param        bHDR Whether to support storing HDR values, which requires more memory.\n@param        ClearColor The color the texture is cleared to\n@param        Gamma Will override FTextureRenderTarget2DResource::GetDisplayGamma if > 0.\n@return       A new Texture Render Target 2D!"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Data__GetCharacterBoneLocations()
	{
		struct VictoryBPFunctionLibrary_eventData__GetCharacterBoneLocations_Parms
		{
			AActor* TheCharacter;
			TArray<FVector> BoneLocations;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Data__GetCharacterBoneLocations"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(VictoryBPFunctionLibrary_eventData__GetCharacterBoneLocations_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventData__GetCharacterBoneLocations_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventData__GetCharacterBoneLocations_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventData__GetCharacterBoneLocations_Parms), sizeof(bool), true);
			UProperty* NewProp_BoneLocations = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoneLocations"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(BoneLocations, VictoryBPFunctionLibrary_eventData__GetCharacterBoneLocations_Parms), 0x0010000000000180);
			UProperty* NewProp_BoneLocations_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BoneLocations, TEXT("BoneLocations"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_TheCharacter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TheCharacter"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(TheCharacter, VictoryBPFunctionLibrary_eventData__GetCharacterBoneLocations_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Takes in an actor (for convenience) and tries to cast it to Character and return an array of Vectors of all of the current bone locations of the character's Mesh. Locations are in World Space. Returns: false if the operation could not occur. Requires: Character Mesh Component must be valid"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_DistanceToSurface__DistaceOfPointToMeshSurface()
	{
		struct VictoryBPFunctionLibrary_eventDistanceToSurface__DistaceOfPointToMeshSurface_Parms
		{
			AStaticMeshActor* TheSMA;
			FVector TestPoint;
			FVector ClosestSurfacePoint;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DistanceToSurface__DistaceOfPointToMeshSurface"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventDistanceToSurface__DistaceOfPointToMeshSurface_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventDistanceToSurface__DistaceOfPointToMeshSurface_Parms), 0x0010000000000580);
			UProperty* NewProp_ClosestSurfacePoint = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ClosestSurfacePoint"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ClosestSurfacePoint, VictoryBPFunctionLibrary_eventDistanceToSurface__DistaceOfPointToMeshSurface_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_TestPoint = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TestPoint"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TestPoint, VictoryBPFunctionLibrary_eventDistanceToSurface__DistaceOfPointToMeshSurface_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_TheSMA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TheSMA"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(TheSMA, VictoryBPFunctionLibrary_eventDistanceToSurface__DistaceOfPointToMeshSurface_Parms), 0x0010000000000080, Z_Construct_UClass_AStaticMeshActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Retrieve Distance of given point to any Surface point on a Static Mesh Actor. Returns the distance as well as the exact closest point on the mesh surface to the given point. Returns -1 if an error occurred"));
			MetaData->SetValue(NewProp_TestPoint, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_DoesMaterialHaveParameter()
	{
		struct VictoryBPFunctionLibrary_eventDoesMaterialHaveParameter_Parms
		{
			UMaterialInterface* Mat;
			FName Parameter;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DoesMaterialHaveParameter"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventDoesMaterialHaveParameter_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventDoesMaterialHaveParameter_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventDoesMaterialHaveParameter_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventDoesMaterialHaveParameter_Parms), sizeof(bool), true);
			UProperty* NewProp_Parameter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Parameter"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(Parameter, VictoryBPFunctionLibrary_eventDoesMaterialHaveParameter_Parms), 0x0010000000000080);
			UProperty* NewProp_Mat = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Mat"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Mat, VictoryBPFunctionLibrary_eventDoesMaterialHaveParameter_Parms), 0x0010000000000080, Z_Construct_UClass_UMaterialInterface_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("This node checks all Scalar, Vector, and Texture parameters of a material to see if the supplied parameter name is an actual parameter in the material! \x2665 Rama"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Draw__Thick3DLineBetweenActors()
	{
		struct VictoryBPFunctionLibrary_eventDraw__Thick3DLineBetweenActors_Parms
		{
			AActor* StartActor;
			AActor* EndActor;
			FLinearColor LineColor;
			float Thickness;
			float Duration;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Draw__Thick3DLineBetweenActors"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(VictoryBPFunctionLibrary_eventDraw__Thick3DLineBetweenActors_Parms));
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Duration, VictoryBPFunctionLibrary_eventDraw__Thick3DLineBetweenActors_Parms), 0x0010000000000080);
			UProperty* NewProp_Thickness = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Thickness"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Thickness, VictoryBPFunctionLibrary_eventDraw__Thick3DLineBetweenActors_Parms), 0x0010000000000080);
			UProperty* NewProp_LineColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LineColor, VictoryBPFunctionLibrary_eventDraw__Thick3DLineBetweenActors_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_EndActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EndActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(EndActor, VictoryBPFunctionLibrary_eventDraw__Thick3DLineBetweenActors_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_StartActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StartActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(StartActor, VictoryBPFunctionLibrary_eventDraw__Thick3DLineBetweenActors_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Duration"), TEXT("-1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_LineColor"), TEXT("(R=0.000000,G=0.000000,B=1.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Thickness"), TEXT("7.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draw 3D Line of Chosen Thickness Between Two Actors. Duration is in Seconds"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Draw__Thick3DLineFromCharacterSocket()
	{
		struct VictoryBPFunctionLibrary_eventDraw__Thick3DLineFromCharacterSocket_Parms
		{
			AActor* TheCharacter;
			FVector EndPoint;
			FName Socket;
			FLinearColor LineColor;
			float Thickness;
			float Duration;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Draw__Thick3DLineFromCharacterSocket"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventDraw__Thick3DLineFromCharacterSocket_Parms));
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Duration, VictoryBPFunctionLibrary_eventDraw__Thick3DLineFromCharacterSocket_Parms), 0x0010000000000080);
			UProperty* NewProp_Thickness = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Thickness"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Thickness, VictoryBPFunctionLibrary_eventDraw__Thick3DLineFromCharacterSocket_Parms), 0x0010000000000080);
			UProperty* NewProp_LineColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LineColor, VictoryBPFunctionLibrary_eventDraw__Thick3DLineFromCharacterSocket_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_Socket = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Socket"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(Socket, VictoryBPFunctionLibrary_eventDraw__Thick3DLineFromCharacterSocket_Parms), 0x0010000000000080);
			UProperty* NewProp_EndPoint = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EndPoint"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EndPoint, VictoryBPFunctionLibrary_eventDraw__Thick3DLineFromCharacterSocket_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_TheCharacter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TheCharacter"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(TheCharacter, VictoryBPFunctionLibrary_eventDraw__Thick3DLineFromCharacterSocket_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Duration"), TEXT("-1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_LineColor"), TEXT("(R=1.000000,G=0.000000,B=0.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Socket"), TEXT("SocketName"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Thickness"), TEXT("7.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draw 3D Line of Chosen Thickness From Socket on Character's Mesh to Destination, conversion of AActor to ACharacter done internally for your convenience. Duration is in Seconds"));
			MetaData->SetValue(NewProp_EndPoint, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Draw__Thick3DLineFromSocket()
	{
		struct VictoryBPFunctionLibrary_eventDraw__Thick3DLineFromSocket_Parms
		{
			USkeletalMeshComponent* Mesh;
			FVector EndPoint;
			FName Socket;
			FLinearColor LineColor;
			float Thickness;
			float Duration;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Draw__Thick3DLineFromSocket"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventDraw__Thick3DLineFromSocket_Parms));
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Duration, VictoryBPFunctionLibrary_eventDraw__Thick3DLineFromSocket_Parms), 0x0010000000000080);
			UProperty* NewProp_Thickness = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Thickness"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Thickness, VictoryBPFunctionLibrary_eventDraw__Thick3DLineFromSocket_Parms), 0x0010000000000080);
			UProperty* NewProp_LineColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LineColor, VictoryBPFunctionLibrary_eventDraw__Thick3DLineFromSocket_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_Socket = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Socket"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(Socket, VictoryBPFunctionLibrary_eventDraw__Thick3DLineFromSocket_Parms), 0x0010000000000080);
			UProperty* NewProp_EndPoint = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EndPoint"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EndPoint, VictoryBPFunctionLibrary_eventDraw__Thick3DLineFromSocket_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Mesh = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Mesh"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Mesh, VictoryBPFunctionLibrary_eventDraw__Thick3DLineFromSocket_Parms), 0x0010000000080080, Z_Construct_UClass_USkeletalMeshComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Duration"), TEXT("-1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_LineColor"), TEXT("(R=0.000000,G=1.000000,B=0.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Socket"), TEXT("SocketName"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Thickness"), TEXT("7.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draw 3D Line of Chosen Thickness From Mesh Socket to Destination. Duration is in Seconds"));
			MetaData->SetValue(NewProp_EndPoint, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_Mesh, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_DrawCircle()
	{
		struct VictoryBPFunctionLibrary_eventDrawCircle_Parms
		{
			UObject* WorldContextObject;
			FVector Center;
			float Radius;
			int32 NumPoints;
			float Thickness;
			FLinearColor LineColor;
			FVector YAxis;
			FVector ZAxis;
			float Duration;
			bool PersistentLines;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DrawCircle"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(VictoryBPFunctionLibrary_eventDrawCircle_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(PersistentLines, VictoryBPFunctionLibrary_eventDrawCircle_Parms, bool);
			UProperty* NewProp_PersistentLines = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PersistentLines"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(PersistentLines, VictoryBPFunctionLibrary_eventDrawCircle_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(PersistentLines, VictoryBPFunctionLibrary_eventDrawCircle_Parms), sizeof(bool), true);
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Duration, VictoryBPFunctionLibrary_eventDrawCircle_Parms), 0x0010000000000080);
			UProperty* NewProp_ZAxis = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ZAxis"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ZAxis, VictoryBPFunctionLibrary_eventDrawCircle_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_YAxis = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("YAxis"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(YAxis, VictoryBPFunctionLibrary_eventDrawCircle_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_LineColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LineColor, VictoryBPFunctionLibrary_eventDrawCircle_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_Thickness = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Thickness"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Thickness, VictoryBPFunctionLibrary_eventDrawCircle_Parms), 0x0010000000000080);
			UProperty* NewProp_NumPoints = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NumPoints"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NumPoints, VictoryBPFunctionLibrary_eventDrawCircle_Parms), 0x0010000000000080);
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Radius"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Radius, VictoryBPFunctionLibrary_eventDrawCircle_Parms), 0x0010000000000080);
			UProperty* NewProp_Center = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Center"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Center, VictoryBPFunctionLibrary_eventDrawCircle_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, VictoryBPFunctionLibrary_eventDrawCircle_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Duration"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_LineColor"), TEXT("(R=1.000000,G=0.000000,B=0.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_NumPoints"), TEXT("32"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_PersistentLines"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Thickness"), TEXT("7.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_YAxis"), TEXT("0.000000,1.000000,0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_ZAxis"), TEXT("0.000000,0.000000,1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_EqualEqual_Vector2DVector2D()
	{
		struct VictoryBPFunctionLibrary_eventEqualEqual_Vector2DVector2D_Parms
		{
			FVector2D A;
			FVector2D B;
			float ErrorTolerance;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EqualEqual_Vector2DVector2D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(VictoryBPFunctionLibrary_eventEqualEqual_Vector2DVector2D_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventEqualEqual_Vector2DVector2D_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventEqualEqual_Vector2DVector2D_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventEqualEqual_Vector2DVector2D_Parms), sizeof(bool), true);
			UProperty* NewProp_ErrorTolerance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ErrorTolerance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ErrorTolerance, VictoryBPFunctionLibrary_eventEqualEqual_Vector2DVector2D_Parms), 0x0010000000000080);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(B, VictoryBPFunctionLibrary_eventEqualEqual_Vector2DVector2D_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(A, VictoryBPFunctionLibrary_eventEqualEqual_Vector2DVector2D_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector2D"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_ErrorTolerance"), TEXT("0.000100"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Equal (vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("== equal"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if vector2D A is equal to vector2D B (A == B) within a specified error tolerance"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile()
	{
		struct VictoryBPFunctionLibrary_eventFileIO__SaveStringArrayToFile_Parms
		{
			FString SaveDirectory;
			FString JoyfulFileName;
			TArray<FString> SaveText;
			bool AllowOverWriting;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FileIO__SaveStringArrayToFile"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventFileIO__SaveStringArrayToFile_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventFileIO__SaveStringArrayToFile_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventFileIO__SaveStringArrayToFile_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventFileIO__SaveStringArrayToFile_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(AllowOverWriting, VictoryBPFunctionLibrary_eventFileIO__SaveStringArrayToFile_Parms, bool);
			UProperty* NewProp_AllowOverWriting = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AllowOverWriting"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(AllowOverWriting, VictoryBPFunctionLibrary_eventFileIO__SaveStringArrayToFile_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(AllowOverWriting, VictoryBPFunctionLibrary_eventFileIO__SaveStringArrayToFile_Parms), sizeof(bool), true);
			UProperty* NewProp_SaveText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SaveText"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(SaveText, VictoryBPFunctionLibrary_eventFileIO__SaveStringArrayToFile_Parms), 0x0010000000000080);
			UProperty* NewProp_SaveText_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SaveText, TEXT("SaveText"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_JoyfulFileName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("JoyfulFileName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(JoyfulFileName, VictoryBPFunctionLibrary_eventFileIO__SaveStringArrayToFile_Parms), 0x0010000000000080);
			UProperty* NewProp_SaveDirectory = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SaveDirectory"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SaveDirectory, VictoryBPFunctionLibrary_eventFileIO__SaveStringArrayToFile_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_AllowOverWriting"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Saves multiple Strings to filename of your choosing, with each string on its own line! Make sure include whichever file extension you want in the filename, ex: SelfNotes.txt . Make sure to include the entire file path in the save directory, ex: C:\\MyGameDir\\BPSavedTextFiles"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_FileIO__SaveStringTextToFile()
	{
		struct VictoryBPFunctionLibrary_eventFileIO__SaveStringTextToFile_Parms
		{
			FString SaveDirectory;
			FString JoyfulFileName;
			FString SaveText;
			bool AllowOverWriting;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FileIO__SaveStringTextToFile"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventFileIO__SaveStringTextToFile_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventFileIO__SaveStringTextToFile_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventFileIO__SaveStringTextToFile_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventFileIO__SaveStringTextToFile_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(AllowOverWriting, VictoryBPFunctionLibrary_eventFileIO__SaveStringTextToFile_Parms, bool);
			UProperty* NewProp_AllowOverWriting = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AllowOverWriting"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(AllowOverWriting, VictoryBPFunctionLibrary_eventFileIO__SaveStringTextToFile_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(AllowOverWriting, VictoryBPFunctionLibrary_eventFileIO__SaveStringTextToFile_Parms), sizeof(bool), true);
			UProperty* NewProp_SaveText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SaveText"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SaveText, VictoryBPFunctionLibrary_eventFileIO__SaveStringTextToFile_Parms), 0x0010000000000080);
			UProperty* NewProp_JoyfulFileName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("JoyfulFileName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(JoyfulFileName, VictoryBPFunctionLibrary_eventFileIO__SaveStringTextToFile_Parms), 0x0010000000000080);
			UProperty* NewProp_SaveDirectory = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SaveDirectory"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SaveDirectory, VictoryBPFunctionLibrary_eventFileIO__SaveStringTextToFile_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_AllowOverWriting"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Saves text to filename of your choosing, make sure include whichever file extension you want in the filename, ex: SelfNotes.txt . Make sure to include the entire file path in the save directory, ex: C:\\MyGameDir\\BPSavedTextFiles"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_FlashGameOnTaskBar()
	{
		struct VictoryBPFunctionLibrary_eventFlashGameOnTaskBar_Parms
		{
			APlayerController* PC;
			bool FlashContinuous;
			int32 MaxFlashCount;
			int32 FlashFrequencyMilliseconds;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FlashGameOnTaskBar"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventFlashGameOnTaskBar_Parms));
			UProperty* NewProp_FlashFrequencyMilliseconds = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FlashFrequencyMilliseconds"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(FlashFrequencyMilliseconds, VictoryBPFunctionLibrary_eventFlashGameOnTaskBar_Parms), 0x0010000000000080);
			UProperty* NewProp_MaxFlashCount = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MaxFlashCount"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaxFlashCount, VictoryBPFunctionLibrary_eventFlashGameOnTaskBar_Parms), 0x0010000000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(FlashContinuous, VictoryBPFunctionLibrary_eventFlashGameOnTaskBar_Parms, bool);
			UProperty* NewProp_FlashContinuous = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FlashContinuous"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(FlashContinuous, VictoryBPFunctionLibrary_eventFlashGameOnTaskBar_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(FlashContinuous, VictoryBPFunctionLibrary_eventFlashGameOnTaskBar_Parms), sizeof(bool), true);
			UProperty* NewProp_PC = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PC"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(PC, VictoryBPFunctionLibrary_eventFlashGameOnTaskBar_Parms), 0x0010000000000080, Z_Construct_UClass_APlayerController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|GameWindow"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_FlashContinuous"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_FlashFrequencyMilliseconds"), TEXT("500"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_MaxFlashCount"), TEXT("3"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Flashes the game on the windows OS task bar! Please note this won't look the best in PIE, flashing is smoother in Standalone or packaged game. You can use GameWindowIsForeGroundInOS to see if there is a need to get the user's attention! <3 Rama"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_FlushPressedKeys()
	{
		struct VictoryBPFunctionLibrary_eventFlushPressedKeys_Parms
		{
			APlayerController* PlayerController;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FlushPressedKeys"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventFlushPressedKeys_Parms));
			UProperty* NewProp_PlayerController = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PlayerController"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(PlayerController, VictoryBPFunctionLibrary_eventFlushPressedKeys_Parms), 0x0010000000000080, Z_Construct_UClass_APlayerController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VictoryBPLibrary|Input"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Flushes the current key state for target player controller."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetActorRelativeLocation()
	{
		struct VictoryBPFunctionLibrary_eventGetActorRelativeLocation_Parms
		{
			AActor* ParentActor;
			AActor* ChildActor;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetActorRelativeLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(VictoryBPFunctionLibrary_eventGetActorRelativeLocation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventGetActorRelativeLocation_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_ChildActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ChildActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ChildActor, VictoryBPFunctionLibrary_eventGetActorRelativeLocation_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_ParentActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ParentActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ParentActor, VictoryBPFunctionLibrary_eventGetActorRelativeLocation_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VictoryBPLibrary|Actor"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("ChildActor"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetActorRelativeRotation()
	{
		struct VictoryBPFunctionLibrary_eventGetActorRelativeRotation_Parms
		{
			AActor* ParentActor;
			AActor* ChildActor;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetActorRelativeRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(VictoryBPFunctionLibrary_eventGetActorRelativeRotation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventGetActorRelativeRotation_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_ChildActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ChildActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ChildActor, VictoryBPFunctionLibrary_eventGetActorRelativeRotation_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_ParentActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ParentActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ParentActor, VictoryBPFunctionLibrary_eventGetActorRelativeRotation_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VictoryBPLibrary|Actor"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("ChildActor"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetAllBoneNamesBelowBone()
	{
		struct VictoryBPFunctionLibrary_eventGetAllBoneNamesBelowBone_Parms
		{
			USkeletalMeshComponent* SkeletalMeshComp;
			FName StartingBoneName;
			TArray<FName> BoneNames;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAllBoneNamesBelowBone"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(VictoryBPFunctionLibrary_eventGetAllBoneNamesBelowBone_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventGetAllBoneNamesBelowBone_Parms), 0x0010000000000580);
			UProperty* NewProp_BoneNames = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoneNames"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(BoneNames, VictoryBPFunctionLibrary_eventGetAllBoneNamesBelowBone_Parms), 0x0010000000000180);
			UProperty* NewProp_BoneNames_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BoneNames, TEXT("BoneNames"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_StartingBoneName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StartingBoneName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(StartingBoneName, VictoryBPFunctionLibrary_eventGetAllBoneNamesBelowBone_Parms), 0x0010000000000080);
			UProperty* NewProp_SkeletalMeshComp = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SkeletalMeshComp"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SkeletalMeshComp, VictoryBPFunctionLibrary_eventGetAllBoneNamesBelowBone_Parms), 0x0010000000080080, Z_Construct_UClass_USkeletalMeshComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Components|SkinnedMesh"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get All Bone Names Below Bone, requires a physics asset, by Rama\n\n@param StartingBoneName The name of the bone to find all bones below.\n\n@param BoneNames , all of the bone names below the starting bone.\n\n@return total number of bones found"));
			MetaData->SetValue(NewProp_SkeletalMeshComp, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetAllWidgetsOfClass()
	{
		struct VictoryBPFunctionLibrary_eventGetAllWidgetsOfClass_Parms
		{
			UObject* WorldContextObject;
			TSubclassOf<UUserWidget>  WidgetClass;
			TArray<UUserWidget*> FoundWidgets;
			bool TopLevelOnly;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAllWidgetsOfClass"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(VictoryBPFunctionLibrary_eventGetAllWidgetsOfClass_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(TopLevelOnly, VictoryBPFunctionLibrary_eventGetAllWidgetsOfClass_Parms, bool);
			UProperty* NewProp_TopLevelOnly = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TopLevelOnly"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(TopLevelOnly, VictoryBPFunctionLibrary_eventGetAllWidgetsOfClass_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(TopLevelOnly, VictoryBPFunctionLibrary_eventGetAllWidgetsOfClass_Parms), sizeof(bool), true);
			UProperty* NewProp_FoundWidgets = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FoundWidgets"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(FoundWidgets, VictoryBPFunctionLibrary_eventGetAllWidgetsOfClass_Parms), 0x0010008000000180);
			UProperty* NewProp_FoundWidgets_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FoundWidgets, TEXT("FoundWidgets"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000080000, Z_Construct_UClass_UUserWidget_NoRegister());
			UProperty* NewProp_WidgetClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WidgetClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(WidgetClass, VictoryBPFunctionLibrary_eventGetAllWidgetsOfClass_Parms), 0x0014000000000080, Z_Construct_UClass_UUserWidget_NoRegister(), UClass::StaticClass());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, VictoryBPFunctionLibrary_eventGetAllWidgetsOfClass_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|UMG"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_TopLevelOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("DeterminesOutputType"), TEXT("WidgetClass"));
			MetaData->SetValue(ReturnFunction, TEXT("DynamicOutputParam"), TEXT("FoundWidgets"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Find all widgets of a certain class! Top level only means only widgets that are directly added to the viewport will be found"));
			MetaData->SetValue(NewProp_FoundWidgets, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetBoxContainingWorldPoints()
	{
		struct VictoryBPFunctionLibrary_eventGetBoxContainingWorldPoints_Parms
		{
			TArray<FVector> Points;
			FVector Center;
			FVector Extent;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetBoxContainingWorldPoints"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventGetBoxContainingWorldPoints_Parms));
			UProperty* NewProp_Extent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Extent"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Extent, VictoryBPFunctionLibrary_eventGetBoxContainingWorldPoints_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Center = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Center"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Center, VictoryBPFunctionLibrary_eventGetBoxContainingWorldPoints_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Points = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Points"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Points, VictoryBPFunctionLibrary_eventGetBoxContainingWorldPoints_Parms), 0x0010000008000182);
			UProperty* NewProp_Points_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Points, TEXT("Points"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Generates a box that is guaranteed to contain all of the supplied points.\n\n@param Points  The world space points that the box will encompass."));
			MetaData->SetValue(NewProp_Points, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor()
	{
		struct VictoryBPFunctionLibrary_eventGetClosestActorOfClassInRadiusOfActor_Parms
		{
			UObject* WorldContextObject;
			TSubclassOf<AActor>  ActorClass;
			AActor* ActorCenter;
			float Radius;
			bool IsValid;
			AActor* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetClosestActorOfClassInRadiusOfActor"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventGetClosestActorOfClassInRadiusOfActor_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventGetClosestActorOfClassInRadiusOfActor_Parms), 0x0010000000000580, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsValid, VictoryBPFunctionLibrary_eventGetClosestActorOfClassInRadiusOfActor_Parms, bool);
			UProperty* NewProp_IsValid = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IsValid"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsValid, VictoryBPFunctionLibrary_eventGetClosestActorOfClassInRadiusOfActor_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(IsValid, VictoryBPFunctionLibrary_eventGetClosestActorOfClassInRadiusOfActor_Parms), sizeof(bool), true);
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Radius"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Radius, VictoryBPFunctionLibrary_eventGetClosestActorOfClassInRadiusOfActor_Parms), 0x0010000000000080);
			UProperty* NewProp_ActorCenter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorCenter"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ActorCenter, VictoryBPFunctionLibrary_eventGetClosestActorOfClassInRadiusOfActor_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_ActorClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(ActorClass, VictoryBPFunctionLibrary_eventGetClosestActorOfClassInRadiusOfActor_Parms), 0x0014000000000080, Z_Construct_UClass_AActor_NoRegister(), UClass::StaticClass());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, VictoryBPFunctionLibrary_eventGetClosestActorOfClassInRadiusOfActor_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|AI"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation()
	{
		struct VictoryBPFunctionLibrary_eventGetClosestActorOfClassInRadiusOfLocation_Parms
		{
			UObject* WorldContextObject;
			TSubclassOf<AActor>  ActorClass;
			FVector Center;
			float Radius;
			bool IsValid;
			AActor* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetClosestActorOfClassInRadiusOfLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventGetClosestActorOfClassInRadiusOfLocation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventGetClosestActorOfClassInRadiusOfLocation_Parms), 0x0010000000000580, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsValid, VictoryBPFunctionLibrary_eventGetClosestActorOfClassInRadiusOfLocation_Parms, bool);
			UProperty* NewProp_IsValid = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IsValid"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsValid, VictoryBPFunctionLibrary_eventGetClosestActorOfClassInRadiusOfLocation_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(IsValid, VictoryBPFunctionLibrary_eventGetClosestActorOfClassInRadiusOfLocation_Parms), sizeof(bool), true);
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Radius"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Radius, VictoryBPFunctionLibrary_eventGetClosestActorOfClassInRadiusOfLocation_Parms), 0x0010000000000080);
			UProperty* NewProp_Center = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Center"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Center, VictoryBPFunctionLibrary_eventGetClosestActorOfClassInRadiusOfLocation_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_ActorClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(ActorClass, VictoryBPFunctionLibrary_eventGetClosestActorOfClassInRadiusOfLocation_Parms), 0x0014000000000080, Z_Construct_UClass_AActor_NoRegister(), UClass::StaticClass());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, VictoryBPFunctionLibrary_eventGetClosestActorOfClassInRadiusOfLocation_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|AI"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetCommandLine()
	{
		struct VictoryBPFunctionLibrary_eventGetCommandLine_Parms
		{
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetCommandLine"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventGetCommandLine_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventGetCommandLine_Parms), 0x0010000000000582);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Core"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Retrieves command line arguments that were passed into unreal"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetComponentRelativeLocation()
	{
		struct VictoryBPFunctionLibrary_eventGetComponentRelativeLocation_Parms
		{
			USceneComponent* ParentComponent;
			USceneComponent* ChildComponent;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetComponentRelativeLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(VictoryBPFunctionLibrary_eventGetComponentRelativeLocation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventGetComponentRelativeLocation_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_ChildComponent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ChildComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ChildComponent, VictoryBPFunctionLibrary_eventGetComponentRelativeLocation_Parms), 0x0010000000080080, Z_Construct_UClass_USceneComponent_NoRegister());
			UProperty* NewProp_ParentComponent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ParentComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ParentComponent, VictoryBPFunctionLibrary_eventGetComponentRelativeLocation_Parms), 0x0010000000080080, Z_Construct_UClass_USceneComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VictoryBPLibrary|Components"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("ChildComponent"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_ChildComponent, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_ParentComponent, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetComponentRelativeRotation()
	{
		struct VictoryBPFunctionLibrary_eventGetComponentRelativeRotation_Parms
		{
			USceneComponent* ParentComponent;
			USceneComponent* ChildComponent;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetComponentRelativeRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(VictoryBPFunctionLibrary_eventGetComponentRelativeRotation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventGetComponentRelativeRotation_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_ChildComponent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ChildComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ChildComponent, VictoryBPFunctionLibrary_eventGetComponentRelativeRotation_Parms), 0x0010000000080080, Z_Construct_UClass_USceneComponent_NoRegister());
			UProperty* NewProp_ParentComponent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ParentComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ParentComponent, VictoryBPFunctionLibrary_eventGetComponentRelativeRotation_Parms), 0x0010000000080080, Z_Construct_UClass_USceneComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VictoryBPLibrary|Components"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("ChildComponent"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_ChildComponent, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_ParentComponent, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetCreationTime()
	{
		struct VictoryBPFunctionLibrary_eventGetCreationTime_Parms
		{
			const AActor* Target;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetCreationTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventGetCreationTime_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventGetCreationTime_Parms), 0x0010000000000580);
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Target, VictoryBPFunctionLibrary_eventGetCreationTime_Parms), 0x0010000000000082, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VictoryBPLibrary|Actor"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("Target"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the time target actor was created."));
			MetaData->SetValue(NewProp_Target, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetDistanceBetweenComponentSurfaces()
	{
		struct VictoryBPFunctionLibrary_eventGetDistanceBetweenComponentSurfaces_Parms
		{
			UPrimitiveComponent* CollisionComponent1;
			UPrimitiveComponent* CollisionComponent2;
			FVector PointOnSurface1;
			FVector PointOnSurface2;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetDistanceBetweenComponentSurfaces"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventGetDistanceBetweenComponentSurfaces_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventGetDistanceBetweenComponentSurfaces_Parms), 0x0010000000000580);
			UProperty* NewProp_PointOnSurface2 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PointOnSurface2"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PointOnSurface2, VictoryBPFunctionLibrary_eventGetDistanceBetweenComponentSurfaces_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_PointOnSurface1 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PointOnSurface1"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PointOnSurface1, VictoryBPFunctionLibrary_eventGetDistanceBetweenComponentSurfaces_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_CollisionComponent2 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CollisionComponent2"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CollisionComponent2, VictoryBPFunctionLibrary_eventGetDistanceBetweenComponentSurfaces_Parms), 0x0010000000080080, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			UProperty* NewProp_CollisionComponent1 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CollisionComponent1"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CollisionComponent1, VictoryBPFunctionLibrary_eventGetDistanceBetweenComponentSurfaces_Parms), 0x0010000000080080, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Physics"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Closest Surface"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_CollisionComponent2, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_CollisionComponent1, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetDistanceToCollision()
	{
		struct VictoryBPFunctionLibrary_eventGetDistanceToCollision_Parms
		{
			UPrimitiveComponent* CollisionComponent;
			FVector Point;
			FVector ClosestPointOnCollision;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetDistanceToCollision"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventGetDistanceToCollision_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventGetDistanceToCollision_Parms), 0x0010000000000580);
			UProperty* NewProp_ClosestPointOnCollision = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ClosestPointOnCollision"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ClosestPointOnCollision, VictoryBPFunctionLibrary_eventGetDistanceToCollision_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Point = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Point"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Point, VictoryBPFunctionLibrary_eventGetDistanceToCollision_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_CollisionComponent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CollisionComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CollisionComponent, VictoryBPFunctionLibrary_eventGetDistanceToCollision_Parms), 0x0010000000080080, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Physics"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Closest Surface"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_Point, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_CollisionComponent, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetFirstWidgetOfClass()
	{
		struct VictoryBPFunctionLibrary_eventGetFirstWidgetOfClass_Parms
		{
			UObject* WorldContextObject;
			TSubclassOf<UUserWidget>  WidgetClass;
			bool TopLevelOnly;
			UUserWidget* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetFirstWidgetOfClass"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022409, 65535, sizeof(VictoryBPFunctionLibrary_eventGetFirstWidgetOfClass_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventGetFirstWidgetOfClass_Parms), 0x0010000000080588, Z_Construct_UClass_UUserWidget_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(TopLevelOnly, VictoryBPFunctionLibrary_eventGetFirstWidgetOfClass_Parms, bool);
			UProperty* NewProp_TopLevelOnly = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TopLevelOnly"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(TopLevelOnly, VictoryBPFunctionLibrary_eventGetFirstWidgetOfClass_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(TopLevelOnly, VictoryBPFunctionLibrary_eventGetFirstWidgetOfClass_Parms), sizeof(bool), true);
			UProperty* NewProp_WidgetClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WidgetClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(WidgetClass, VictoryBPFunctionLibrary_eventGetFirstWidgetOfClass_Parms), 0x0014000000000080, Z_Construct_UClass_UUserWidget_NoRegister(), UClass::StaticClass());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, VictoryBPFunctionLibrary_eventGetFirstWidgetOfClass_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|UMG"));
			MetaData->SetValue(ReturnFunction, TEXT("DeterminesOutputType"), TEXT("WidgetClass"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Find first widget of a certain class and return it.\n@param WidgetClass The widget class to filter by.\n@param TopLevelOnly Only a widget that is a direct child of the viewport will be returned."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetGenericTeamId()
	{
		struct VictoryBPFunctionLibrary_eventGetGenericTeamId_Parms
		{
			AActor* Target;
			uint8 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetGenericTeamId"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventGetGenericTeamId_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventGetGenericTeamId_Parms), 0x0010000000000580);
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Target, VictoryBPFunctionLibrary_eventGetGenericTeamId_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Team"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetHeadMountedDisplayDeviceType()
	{
		struct VictoryBPFunctionLibrary_eventGetHeadMountedDisplayDeviceType_Parms
		{
			EVictoryHMDDevice ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetHeadMountedDisplayDeviceType"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventGetHeadMountedDisplayDeviceType_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventGetHeadMountedDisplayDeviceType_Parms), 0x0010000000000580, Z_Construct_UEnum_VictoryBPLibrary_EVictoryHMDDevice());
			UProperty* NewProp_ReturnValue_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_ReturnValue, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("keywords"), TEXT("HMD vive oculus rift gearvr morpheus"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetLevelInstanceInfo()
	{
		struct VictoryBPFunctionLibrary_eventGetLevelInstanceInfo_Parms
		{
			ULevelStreamingKismet* LevelInstance;
			FLevelStreamInstanceInfo ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetLevelInstanceInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventGetLevelInstanceInfo_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventGetLevelInstanceInfo_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FLevelStreamInstanceInfo());
			UProperty* NewProp_LevelInstance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LevelInstance"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(LevelInstance, VictoryBPFunctionLibrary_eventGetLevelInstanceInfo_Parms), 0x0010000000000080, Z_Construct_UClass_ULevelStreamingKismet_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LevelStreaming"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetNamesOfLoadedLevels()
	{
		struct VictoryBPFunctionLibrary_eventGetNamesOfLoadedLevels_Parms
		{
			UObject* WorldContextObject;
			TArray<FString> NamesOfLoadedLevels;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetNamesOfLoadedLevels"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventGetNamesOfLoadedLevels_Parms));
			UProperty* NewProp_NamesOfLoadedLevels = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NamesOfLoadedLevels"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(NamesOfLoadedLevels, VictoryBPFunctionLibrary_eventGetNamesOfLoadedLevels_Parms), 0x0010000000000180);
			UProperty* NewProp_NamesOfLoadedLevels_Inner = new(EC_InternalUseOnlyConstructor, NewProp_NamesOfLoadedLevels, TEXT("NamesOfLoadedLevels"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, VictoryBPFunctionLibrary_eventGetNamesOfLoadedLevels_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the names of all currently loaded and visible levels!"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetObjectPath()
	{
		struct VictoryBPFunctionLibrary_eventGetObjectPath_Parms
		{
			UObject* Obj;
			FName ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetObjectPath"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventGetObjectPath_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventGetObjectPath_Parms), 0x0010000000000580);
			UProperty* NewProp_Obj = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Obj"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Obj, VictoryBPFunctionLibrary_eventGetObjectPath_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Uses the same format as I use for LoadObjectFromAssetPath! Use this node to get the asset path of objects in the world! -Rama"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetPlayerStart()
	{
		struct VictoryBPFunctionLibrary_eventGetPlayerStart_Parms
		{
			UObject* WorldContextObject;
			FString PlayerStartName;
			APlayerStart* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetPlayerStart"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventGetPlayerStart_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventGetPlayerStart_Parms), 0x0010000000000580, Z_Construct_UClass_APlayerStart_NoRegister());
			UProperty* NewProp_PlayerStartName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PlayerStartName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(PlayerStartName, VictoryBPFunctionLibrary_eventGetPlayerStart_Parms), 0x0010000000000080);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, VictoryBPFunctionLibrary_eventGetPlayerStart_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get a Player Start by Name!"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetPlayerUniqueNetID()
	{
		struct VictoryBPFunctionLibrary_eventGetPlayerUniqueNetID_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetPlayerUniqueNetID"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventGetPlayerUniqueNetID_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventGetPlayerUniqueNetID_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Retrieves the unique net ID for the local player as a number! The number itself will vary based on what Online Subsystem is being used, but you are guaranteed that this number is unique per player!"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetRotatorRelativeRotation()
	{
		struct VictoryBPFunctionLibrary_eventGetRotatorRelativeRotation_Parms
		{
			FRotator ParentRotation;
			FRotator ChildRotation;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetRotatorRelativeRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(VictoryBPFunctionLibrary_eventGetRotatorRelativeRotation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventGetRotatorRelativeRotation_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_ChildRotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ChildRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ChildRotation, VictoryBPFunctionLibrary_eventGetRotatorRelativeRotation_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_ParentRotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ParentRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ParentRotation, VictoryBPFunctionLibrary_eventGetRotatorRelativeRotation_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VictoryBPLibrary|Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetSoundWaveFromFile()
	{
		struct VictoryBPFunctionLibrary_eventGetSoundWaveFromFile_Parms
		{
			FString FilePath;
			USoundWave* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetSoundWaveFromFile"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventGetSoundWaveFromFile_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventGetSoundWaveFromFile_Parms), 0x0010000000000580, Z_Construct_UClass_USoundWave_NoRegister());
			UProperty* NewProp_FilePath = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FilePath"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(FilePath, VictoryBPFunctionLibrary_eventGetSoundWaveFromFile_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Contributed by UE4 forum member n00854180t! Creates a USoundWave* from file path.\nRead .ogg header file and refresh USoundWave metadata.\n\nNOT SUPPORTED ON PS4.\n\n@param FilePath               path to file to create sound wave from"));
			MetaData->SetValue(NewProp_FilePath, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetStaticMeshVertexLocations()
	{
		struct VictoryBPFunctionLibrary_eventGetStaticMeshVertexLocations_Parms
		{
			UStaticMeshComponent* Comp;
			TArray<FVector> VertexPositions;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetStaticMeshVertexLocations"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventGetStaticMeshVertexLocations_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventGetStaticMeshVertexLocations_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventGetStaticMeshVertexLocations_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventGetStaticMeshVertexLocations_Parms), sizeof(bool), true);
			UProperty* NewProp_VertexPositions = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VertexPositions"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(VertexPositions, VictoryBPFunctionLibrary_eventGetStaticMeshVertexLocations_Parms), 0x0010000000000180);
			UProperty* NewProp_VertexPositions_Inner = new(EC_InternalUseOnlyConstructor, NewProp_VertexPositions, TEXT("VertexPositions"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Comp = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Comp"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Comp, VictoryBPFunctionLibrary_eventGetStaticMeshVertexLocations_Parms), 0x0010000000080080, Z_Construct_UClass_UStaticMeshComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Obtain the scaled,rotated, and translated vertex positions for any static mesh! Returns false if operation could not occur because the comp or static mesh asset was invalid. <3 Rama"));
			MetaData->SetValue(NewProp_Comp, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetTimeAlive()
	{
		struct VictoryBPFunctionLibrary_eventGetTimeAlive_Parms
		{
			const AActor* Target;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetTimeAlive"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventGetTimeAlive_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventGetTimeAlive_Parms), 0x0010000000000580);
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Target, VictoryBPFunctionLibrary_eventGetTimeAlive_Parms), 0x0010000000000082, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VictoryBPLibrary|Actor"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("Target"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the time target actor has been alive."));
			MetaData->SetValue(NewProp_Target, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetTimeInPlay()
	{
		struct VictoryBPFunctionLibrary_eventGetTimeInPlay_Parms
		{
			AActor* Actor;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetTimeInPlay"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventGetTimeInPlay_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventGetTimeInPlay_Parms), 0x0010000000000580);
			UProperty* NewProp_Actor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Actor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Actor, VictoryBPFunctionLibrary_eventGetTimeInPlay_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("The number of seconds that this actor has been in play, relative to Get Game Time In Seconds."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetUserDisplayAdapterBrand()
	{
		struct VictoryBPFunctionLibrary_eventGetUserDisplayAdapterBrand_Parms
		{
			bool IsAMD;
			bool IsNvidia;
			bool IsIntel;
			bool IsUnknown;
			int32 UnknownId;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetUserDisplayAdapterBrand"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventGetUserDisplayAdapterBrand_Parms));
			UProperty* NewProp_UnknownId = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnknownId"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(UnknownId, VictoryBPFunctionLibrary_eventGetUserDisplayAdapterBrand_Parms), 0x0010000000000180);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsUnknown, VictoryBPFunctionLibrary_eventGetUserDisplayAdapterBrand_Parms, bool);
			UProperty* NewProp_IsUnknown = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IsUnknown"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsUnknown, VictoryBPFunctionLibrary_eventGetUserDisplayAdapterBrand_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(IsUnknown, VictoryBPFunctionLibrary_eventGetUserDisplayAdapterBrand_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsIntel, VictoryBPFunctionLibrary_eventGetUserDisplayAdapterBrand_Parms, bool);
			UProperty* NewProp_IsIntel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IsIntel"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsIntel, VictoryBPFunctionLibrary_eventGetUserDisplayAdapterBrand_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(IsIntel, VictoryBPFunctionLibrary_eventGetUserDisplayAdapterBrand_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsNvidia, VictoryBPFunctionLibrary_eventGetUserDisplayAdapterBrand_Parms, bool);
			UProperty* NewProp_IsNvidia = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IsNvidia"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsNvidia, VictoryBPFunctionLibrary_eventGetUserDisplayAdapterBrand_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(IsNvidia, VictoryBPFunctionLibrary_eventGetUserDisplayAdapterBrand_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsAMD, VictoryBPFunctionLibrary_eventGetUserDisplayAdapterBrand_Parms, bool);
			UProperty* NewProp_IsAMD = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IsAMD"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsAMD, VictoryBPFunctionLibrary_eventGetUserDisplayAdapterBrand_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(IsAMD, VictoryBPFunctionLibrary_eventGetUserDisplayAdapterBrand_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("Keyword"), TEXT("amd nvidia graphics card brand make model"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetVectorRelativeLocation()
	{
		struct VictoryBPFunctionLibrary_eventGetVectorRelativeLocation_Parms
		{
			FVector ParentLocation;
			FRotator ParentRotation;
			FVector ChildLocation;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetVectorRelativeLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(VictoryBPFunctionLibrary_eventGetVectorRelativeLocation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventGetVectorRelativeLocation_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_ChildLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ChildLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ChildLocation, VictoryBPFunctionLibrary_eventGetVectorRelativeLocation_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_ParentRotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ParentRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ParentRotation, VictoryBPFunctionLibrary_eventGetVectorRelativeLocation_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_ParentLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ParentLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ParentLocation, VictoryBPFunctionLibrary_eventGetVectorRelativeLocation_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VictoryBPLibrary|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetViewportPosition()
	{
		struct VictoryBPFunctionLibrary_eventGetViewportPosition_Parms
		{
			UObject* WorldContextObject;
			FVector2D ScreenPosition;
			FVector2D OutViewportPosition;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetViewportPosition"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventGetViewportPosition_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventGetViewportPosition_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventGetViewportPosition_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventGetViewportPosition_Parms), sizeof(bool), true);
			UProperty* NewProp_OutViewportPosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutViewportPosition"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OutViewportPosition, VictoryBPFunctionLibrary_eventGetViewportPosition_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_ScreenPosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ScreenPosition"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ScreenPosition, VictoryBPFunctionLibrary_eventGetViewportPosition_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, VictoryBPFunctionLibrary_eventGetViewportPosition_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VictoryBPLibrary|Game|Viewport"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts the screen position (primary screen's top left corner) supplied by pointer events or similar\nto the local space of viewport related to WorldContextObject.\n\n@param WorldContextObject    World context.\n@param ScreenPosition                Coordinates from FPointerEvent GetScreenSpacePosition() or similar.\n@param OutViewportPosition   Coordinates based on the local viewport (fullscreen or otherwise).\n\n@return True if OutViewportPosition is not 0,0."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
			MetaData->SetValue(NewProp_ScreenPosition, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetViewportPositionHitResultByChannel()
	{
		struct VictoryBPFunctionLibrary_eventGetViewportPositionHitResultByChannel_Parms
		{
			UObject* WorldContextObject;
			FVector2D ViewportPosition;
			TEnumAsByte<ECollisionChannel> TraceChannel;
			bool bTraceComplex;
			FHitResult OutHitResult;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetViewportPositionHitResultByChannel"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventGetViewportPositionHitResultByChannel_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventGetViewportPositionHitResultByChannel_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventGetViewportPositionHitResultByChannel_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventGetViewportPositionHitResultByChannel_Parms), sizeof(bool), true);
			UProperty* NewProp_OutHitResult = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutHitResult"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OutHitResult, VictoryBPFunctionLibrary_eventGetViewportPositionHitResultByChannel_Parms), 0x0010008000000180, Z_Construct_UScriptStruct_FHitResult());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTraceComplex, VictoryBPFunctionLibrary_eventGetViewportPositionHitResultByChannel_Parms, bool);
			UProperty* NewProp_bTraceComplex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTraceComplex"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTraceComplex, VictoryBPFunctionLibrary_eventGetViewportPositionHitResultByChannel_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bTraceComplex, VictoryBPFunctionLibrary_eventGetViewportPositionHitResultByChannel_Parms), sizeof(bool), true);
			UProperty* NewProp_TraceChannel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceChannel"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(TraceChannel, VictoryBPFunctionLibrary_eventGetViewportPositionHitResultByChannel_Parms), 0x0010000000000080, Z_Construct_UEnum_Engine_ECollisionChannel());
			UProperty* NewProp_ViewportPosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ViewportPosition"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ViewportPosition, VictoryBPFunctionLibrary_eventGetViewportPositionHitResultByChannel_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, VictoryBPFunctionLibrary_eventGetViewportPositionHitResultByChannel_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("bTraceComplex"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VictoryBPLibrary|Game|Viewport"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Does a line collision trace based the viewport position and returns the first blocking hit encountered.\nThis trace finds the objects that RESPOND to the given TraceChannel\n\n@param WorldContextObject    World context.\n@param ViewportPosition              Local space of viewport from GetViewportPosition() or similar.\n@param TraceChannel\n@param bTraceComplex                 True to test against complex collision, false to test against simplified collision.\n@param OutHitResult                  Properties of the trace hit.\n\n@return True if there was a hit, false otherwise."));
			MetaData->SetValue(ReturnFunction, TEXT("TraceChannel"), TEXT("ECC_Visibility"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
			MetaData->SetValue(NewProp_ViewportPosition, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetWidgetFromName()
	{
		struct VictoryBPFunctionLibrary_eventGetWidgetFromName_Parms
		{
			UUserWidget* ParentUserWidget;
			FName Name;
			UWidget* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetWidgetFromName"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422409, 65535, sizeof(VictoryBPFunctionLibrary_eventGetWidgetFromName_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventGetWidgetFromName_Parms), 0x0010000000080588, Z_Construct_UClass_UWidget_NoRegister());
			UProperty* NewProp_Name = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Name"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(Name, VictoryBPFunctionLibrary_eventGetWidgetFromName_Parms), 0x0010000008000182);
			UProperty* NewProp_ParentUserWidget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ParentUserWidget"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ParentUserWidget, VictoryBPFunctionLibrary_eventGetWidgetFromName_Parms), 0x0010000000080080, Z_Construct_UClass_UUserWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|UMG"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("ParentUserWidget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_Name, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_ParentUserWidget, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GraphicsSettings__SetFrameRateCap()
	{
		struct VictoryBPFunctionLibrary_eventGraphicsSettings__SetFrameRateCap_Parms
		{
			float NewValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GraphicsSettings__SetFrameRateCap"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventGraphicsSettings__SetFrameRateCap_Parms));
			UProperty* NewProp_NewValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NewValue, VictoryBPFunctionLibrary_eventGraphicsSettings__SetFrameRateCap_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Graphics Settings"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the Max Frame Rate. Min value is 10."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_GraphicsSettings__SetFrameRateToBeUnbound()
	{
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GraphicsSettings__SetFrameRateToBeUnbound"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Graphics Settings"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Only hardware dependent, no smoothing"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_HasSubstring()
	{
		struct VictoryBPFunctionLibrary_eventHasSubstring_Parms
		{
			FString SearchIn;
			FString Substring;
			TEnumAsByte<ESearchCase::Type> SearchCase;
			TEnumAsByte<ESearchDir::Type> SearchDir;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HasSubstring"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventHasSubstring_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventHasSubstring_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventHasSubstring_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventHasSubstring_Parms), sizeof(bool), true);
			UProperty* NewProp_SearchDir = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SearchDir"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(SearchDir, VictoryBPFunctionLibrary_eventHasSubstring_Parms), 0x0010000000000080, Z_Construct_UEnum_CoreUObject_ESearchDir());
			UProperty* NewProp_SearchCase = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SearchCase"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(SearchCase, VictoryBPFunctionLibrary_eventHasSubstring_Parms), 0x0010000000000080, Z_Construct_UEnum_CoreUObject_ESearchCase());
			UProperty* NewProp_Substring = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Substring"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Substring, VictoryBPFunctionLibrary_eventHasSubstring_Parms), 0x0010000000000080);
			UProperty* NewProp_SearchIn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SearchIn"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SearchIn, VictoryBPFunctionLibrary_eventHasSubstring_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_SearchCase"), TEXT("IgnoreCase"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_SearchDir"), TEXT("FromStart"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns whether or not the SearchIn string contains the supplied Substring.\n     Ex: \"cat\" is a contained within \"concatenation\" as a substring.\n@param SearchIn The string to search within\n@param Substring The string to look for in the SearchIn string\n@param bUseCase Whether or not to be case-sensitive\n@param bSearchFromEnd Whether or not to start the search from the end of the string instead of the beginning"));
			MetaData->SetValue(NewProp_Substring, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_SearchIn, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_HideStreamingLevel()
	{
		struct VictoryBPFunctionLibrary_eventHideStreamingLevel_Parms
		{
			ULevelStreamingKismet* LevelInstance;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HideStreamingLevel"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventHideStreamingLevel_Parms));
			UProperty* NewProp_LevelInstance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LevelInstance"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(LevelInstance, VictoryBPFunctionLibrary_eventHideStreamingLevel_Parms), 0x0010000000000080, Z_Construct_UClass_ULevelStreamingKismet_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LevelStreaming"));
			MetaData->SetValue(ReturnFunction, TEXT("keywords"), TEXT("remove"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_HorizontalFOV()
	{
		struct VictoryBPFunctionLibrary_eventHorizontalFOV_Parms
		{
			float VerticalFOV;
			float AspectRatio;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HorizontalFOV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventHorizontalFOV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventHorizontalFOV_Parms), 0x0010000000000580);
			UProperty* NewProp_AspectRatio = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AspectRatio"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(AspectRatio, VictoryBPFunctionLibrary_eventHorizontalFOV_Parms), 0x0010000000000080);
			UProperty* NewProp_VerticalFOV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VerticalFOV"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(VerticalFOV, VictoryBPFunctionLibrary_eventHorizontalFOV_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VictoryBPLibrary|Game|Viewport"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Helper function to calculate vertical FOV from horizontal FOV and aspect ratio.\nUseful to for determining distance from camera fit in-game objects to the width of the screen."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_InsertChildAt()
	{
		struct VictoryBPFunctionLibrary_eventInsertChildAt_Parms
		{
			UWidget* Parent;
			int32 Index;
			UWidget* Content;
			UPanelSlot* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InsertChildAt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventInsertChildAt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventInsertChildAt_Parms), 0x0010000000080588, Z_Construct_UClass_UPanelSlot_NoRegister());
			UProperty* NewProp_Content = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Content"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Content, VictoryBPFunctionLibrary_eventInsertChildAt_Parms), 0x0010000000080080, Z_Construct_UClass_UWidget_NoRegister());
			UProperty* NewProp_Index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Index"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Index, VictoryBPFunctionLibrary_eventInsertChildAt_Parms), 0x0010000000000080);
			UProperty* NewProp_Parent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Parent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Parent, VictoryBPFunctionLibrary_eventInsertChildAt_Parms), 0x0010000000080080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VictoryBPLibrary|Widget|Panel"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Inserts child widget into panel widget at given location.\nNOTE: The child widgets \"Construct\" event will be fired again!\n\n@param  Parent  - The panel to insert the child into.\n@param  Index   - Where to insert the new widget.\n@param  Content - The child widget to insert.\n@return slot assigned to content."));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_Content, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_Parent, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_IsAlphaNumeric()
	{
		struct VictoryBPFunctionLibrary_eventIsAlphaNumeric_Parms
		{
			FString String;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsAlphaNumeric"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventIsAlphaNumeric_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventIsAlphaNumeric_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventIsAlphaNumeric_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventIsAlphaNumeric_Parms), sizeof(bool), true);
			UProperty* NewProp_String = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("String"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(String, VictoryBPFunctionLibrary_eventIsAlphaNumeric_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|String"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_String, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_IsPointOnPlane()
	{
		struct VictoryBPFunctionLibrary_eventIsPointOnPlane_Parms
		{
			FPlane Plane;
			FVector Point;
			float Tolerance;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsPointOnPlane"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventIsPointOnPlane_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventIsPointOnPlane_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventIsPointOnPlane_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventIsPointOnPlane_Parms), sizeof(bool), true);
			UProperty* NewProp_Tolerance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Tolerance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Tolerance, VictoryBPFunctionLibrary_eventIsPointOnPlane_Parms), 0x0010000000000080);
			UProperty* NewProp_Point = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Point"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Point, VictoryBPFunctionLibrary_eventIsPointOnPlane_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Plane = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Plane"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Plane, VictoryBPFunctionLibrary_eventIsPointOnPlane_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FPlane());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Math|Plane"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Tolerance"), TEXT("0.010000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Use a larger tolerance to allow inaccuracy of measurement in certain situations"));
			MetaData->SetValue(NewProp_Plane, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_IsStandAlone()
	{
		struct VictoryBPFunctionLibrary_eventIsStandAlone_Parms
		{
			UObject* WorldContextObject;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsStandAlone"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventIsStandAlone_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventIsStandAlone_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventIsStandAlone_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventIsStandAlone_Parms), sizeof(bool), true);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, VictoryBPFunctionLibrary_eventIsStandAlone_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Networking"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("SinglePlayer multiplayer"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns whether this game instance is single player.  <3 Rama"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_IsWidgetOfClassInViewport()
	{
		struct VictoryBPFunctionLibrary_eventIsWidgetOfClassInViewport_Parms
		{
			UObject* WorldContextObject;
			TSubclassOf<UUserWidget>  WidgetClass;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsWidgetOfClassInViewport"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventIsWidgetOfClassInViewport_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventIsWidgetOfClassInViewport_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventIsWidgetOfClassInViewport_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventIsWidgetOfClassInViewport_Parms), sizeof(bool), true);
			UProperty* NewProp_WidgetClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WidgetClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(WidgetClass, VictoryBPFunctionLibrary_eventIsWidgetOfClassInViewport_Parms), 0x0014000000000080, Z_Construct_UClass_UUserWidget_NoRegister(), UClass::StaticClass());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, VictoryBPFunctionLibrary_eventIsWidgetOfClassInViewport_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|UMG"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_JoyFileIO_GetFiles()
	{
		struct VictoryBPFunctionLibrary_eventJoyFileIO_GetFiles_Parms
		{
			TArray<FString> Files;
			FString RootFolderFullPath;
			FString Ext;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("JoyFileIO_GetFiles"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventJoyFileIO_GetFiles_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventJoyFileIO_GetFiles_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventJoyFileIO_GetFiles_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventJoyFileIO_GetFiles_Parms), sizeof(bool), true);
			UProperty* NewProp_Ext = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Ext"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Ext, VictoryBPFunctionLibrary_eventJoyFileIO_GetFiles_Parms), 0x0010000000000080);
			UProperty* NewProp_RootFolderFullPath = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RootFolderFullPath"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(RootFolderFullPath, VictoryBPFunctionLibrary_eventJoyFileIO_GetFiles_Parms), 0x0010000000000080);
			UProperty* NewProp_Files = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Files"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Files, VictoryBPFunctionLibrary_eventJoyFileIO_GetFiles_Parms), 0x0010000000000180);
			UProperty* NewProp_Files_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Files, TEXT("Files"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|File IO"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Obtain all files in a provided directory, with optional extension filter. All files are returned if Ext is left blank. Returns false if operation could not occur."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_JoyFileIO_GetFilesInRootAndAllSubFolders()
	{
		struct VictoryBPFunctionLibrary_eventJoyFileIO_GetFilesInRootAndAllSubFolders_Parms
		{
			TArray<FString> Files;
			FString RootFolderFullPath;
			FString Ext;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("JoyFileIO_GetFilesInRootAndAllSubFolders"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventJoyFileIO_GetFilesInRootAndAllSubFolders_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventJoyFileIO_GetFilesInRootAndAllSubFolders_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventJoyFileIO_GetFilesInRootAndAllSubFolders_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventJoyFileIO_GetFilesInRootAndAllSubFolders_Parms), sizeof(bool), true);
			UProperty* NewProp_Ext = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Ext"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Ext, VictoryBPFunctionLibrary_eventJoyFileIO_GetFilesInRootAndAllSubFolders_Parms), 0x0010000000000080);
			UProperty* NewProp_RootFolderFullPath = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RootFolderFullPath"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(RootFolderFullPath, VictoryBPFunctionLibrary_eventJoyFileIO_GetFilesInRootAndAllSubFolders_Parms), 0x0010000000000080);
			UProperty* NewProp_Files = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Files"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Files, VictoryBPFunctionLibrary_eventJoyFileIO_GetFilesInRootAndAllSubFolders_Parms), 0x0010000000000180);
			UProperty* NewProp_Files_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Files, TEXT("Files"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|File IO"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Obtain all files in a provided root directory, including all subdirectories, with optional extension filter. All files are returned if Ext is left blank. The full file path is returned because the file could be in any subdirectory. Returns false if operation could not occur."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_JoyGraphicsSettings__FullScreen_Get()
	{
		struct VictoryBPFunctionLibrary_eventJoyGraphicsSettings__FullScreen_Get_Parms
		{
			TEnumAsByte<EJoyGraphicsFullScreen::Type> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("JoyGraphicsSettings__FullScreen_Get"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventJoyGraphicsSettings__FullScreen_Get_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventJoyGraphicsSettings__FullScreen_Get_Parms), 0x0010000000000580, Z_Construct_UEnum_VictoryBPLibrary_EJoyGraphicsFullScreen());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Graphics Settings"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get Full Screen Type"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_JoyGraphicsSettings__FullScreen_Set()
	{
		struct VictoryBPFunctionLibrary_eventJoyGraphicsSettings__FullScreen_Set_Parms
		{
			TEnumAsByte<EJoyGraphicsFullScreen::Type> NewSetting;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("JoyGraphicsSettings__FullScreen_Set"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventJoyGraphicsSettings__FullScreen_Set_Parms));
			UProperty* NewProp_NewSetting = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewSetting"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(NewSetting, VictoryBPFunctionLibrary_eventJoyGraphicsSettings__FullScreen_Set_Parms), 0x0010000000000080, Z_Construct_UEnum_VictoryBPLibrary_EJoyGraphicsFullScreen());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Graphics Settings"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set Full Screen Type"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_JoyIsKey()
	{
		struct VictoryBPFunctionLibrary_eventJoyIsKey_Parms
		{
			FKeyEvent KeyEvent;
			FKey Key;
			bool Ctrl;
			bool Shift;
			bool Alt;
			bool Cmd;
			bool Match;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("JoyIsKey"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventJoyIsKey_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Match, VictoryBPFunctionLibrary_eventJoyIsKey_Parms, bool);
			UProperty* NewProp_Match = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Match"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Match, VictoryBPFunctionLibrary_eventJoyIsKey_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(Match, VictoryBPFunctionLibrary_eventJoyIsKey_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Cmd, VictoryBPFunctionLibrary_eventJoyIsKey_Parms, bool);
			UProperty* NewProp_Cmd = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Cmd"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Cmd, VictoryBPFunctionLibrary_eventJoyIsKey_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(Cmd, VictoryBPFunctionLibrary_eventJoyIsKey_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Alt, VictoryBPFunctionLibrary_eventJoyIsKey_Parms, bool);
			UProperty* NewProp_Alt = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Alt"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Alt, VictoryBPFunctionLibrary_eventJoyIsKey_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(Alt, VictoryBPFunctionLibrary_eventJoyIsKey_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Shift, VictoryBPFunctionLibrary_eventJoyIsKey_Parms, bool);
			UProperty* NewProp_Shift = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Shift"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Shift, VictoryBPFunctionLibrary_eventJoyIsKey_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(Shift, VictoryBPFunctionLibrary_eventJoyIsKey_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Ctrl, VictoryBPFunctionLibrary_eventJoyIsKey_Parms, bool);
			UProperty* NewProp_Ctrl = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Ctrl"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Ctrl, VictoryBPFunctionLibrary_eventJoyIsKey_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(Ctrl, VictoryBPFunctionLibrary_eventJoyIsKey_Parms), sizeof(bool), true);
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Key, VictoryBPFunctionLibrary_eventJoyIsKey_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FKey());
			UProperty* NewProp_KeyEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("KeyEvent"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(KeyEvent, VictoryBPFunctionLibrary_eventJoyIsKey_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FKeyEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|UMG"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("== match same equal"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Handy helper to check if a Key Event was for specified Key \x2665 Rama"));
			MetaData->SetValue(NewProp_KeyEvent, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_LensFlare__GetLensFlareOffsets()
	{
		struct VictoryBPFunctionLibrary_eventLensFlare__GetLensFlareOffsets_Parms
		{
			APlayerController* PlayerController;
			AActor* LightSource;
			float PitchOffset;
			float YawOffset;
			float RollOffset;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LensFlare__GetLensFlareOffsets"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(VictoryBPFunctionLibrary_eventLensFlare__GetLensFlareOffsets_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventLensFlare__GetLensFlareOffsets_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventLensFlare__GetLensFlareOffsets_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventLensFlare__GetLensFlareOffsets_Parms), sizeof(bool), true);
			UProperty* NewProp_RollOffset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RollOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RollOffset, VictoryBPFunctionLibrary_eventLensFlare__GetLensFlareOffsets_Parms), 0x0010000000000180);
			UProperty* NewProp_YawOffset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("YawOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(YawOffset, VictoryBPFunctionLibrary_eventLensFlare__GetLensFlareOffsets_Parms), 0x0010000000000180);
			UProperty* NewProp_PitchOffset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PitchOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(PitchOffset, VictoryBPFunctionLibrary_eventLensFlare__GetLensFlareOffsets_Parms), 0x0010000000000180);
			UProperty* NewProp_LightSource = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LightSource"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(LightSource, VictoryBPFunctionLibrary_eventLensFlare__GetLensFlareOffsets_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_PlayerController = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PlayerController"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(PlayerController, VictoryBPFunctionLibrary_eventLensFlare__GetLensFlareOffsets_Parms), 0x0010000000000080, Z_Construct_UClass_APlayerController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Rotator out value is the degrees of difference between the player camera and the direction of player to light source. Returns false if the operation could not occur."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_LoadObjectFromAssetPath()
	{
		struct VictoryBPFunctionLibrary_eventLoadObjectFromAssetPath_Parms
		{
			TSubclassOf<UObject>  ObjectClass;
			FName Path;
			bool IsValid;
			UObject* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LoadObjectFromAssetPath"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(VictoryBPFunctionLibrary_eventLoadObjectFromAssetPath_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventLoadObjectFromAssetPath_Parms), 0x0010000000000580, Z_Construct_UClass_UObject_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsValid, VictoryBPFunctionLibrary_eventLoadObjectFromAssetPath_Parms, bool);
			UProperty* NewProp_IsValid = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IsValid"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsValid, VictoryBPFunctionLibrary_eventLoadObjectFromAssetPath_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(IsValid, VictoryBPFunctionLibrary_eventLoadObjectFromAssetPath_Parms), sizeof(bool), true);
			UProperty* NewProp_Path = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Path"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(Path, VictoryBPFunctionLibrary_eventLoadObjectFromAssetPath_Parms), 0x0010000000000080);
			UProperty* NewProp_ObjectClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ObjectClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(ObjectClass, VictoryBPFunctionLibrary_eventLoadObjectFromAssetPath_Parms), 0x0014000000000080, Z_Construct_UClass_UObject_NoRegister(), UClass::StaticClass());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("The FName that is expected is the exact same format as when you right click on asset -> Copy Reference! You can directly paste copied references into this node! IsValid lets you know if the path was correct or not and I was able to load the object. MAKE SURE TO SAVE THE RETURNED OBJECT AS A VARIABLE. Otherwise your shiny new asset will get garbage collected. I recommend you cast the return value to the appropriate object and then promote it to a variable :)  -Rama"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_LoadStringArrayFromFile()
	{
		struct VictoryBPFunctionLibrary_eventLoadStringArrayFromFile_Parms
		{
			TArray<FString> StringArray;
			int32 ArraySize;
			FString FullFilePath;
			bool ExcludeEmptyLines;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LoadStringArrayFromFile"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventLoadStringArrayFromFile_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventLoadStringArrayFromFile_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventLoadStringArrayFromFile_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventLoadStringArrayFromFile_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ExcludeEmptyLines, VictoryBPFunctionLibrary_eventLoadStringArrayFromFile_Parms, bool);
			UProperty* NewProp_ExcludeEmptyLines = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ExcludeEmptyLines"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ExcludeEmptyLines, VictoryBPFunctionLibrary_eventLoadStringArrayFromFile_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(ExcludeEmptyLines, VictoryBPFunctionLibrary_eventLoadStringArrayFromFile_Parms), sizeof(bool), true);
			UProperty* NewProp_FullFilePath = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FullFilePath"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(FullFilePath, VictoryBPFunctionLibrary_eventLoadStringArrayFromFile_Parms), 0x0010000000000080);
			UProperty* NewProp_ArraySize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ArraySize"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ArraySize, VictoryBPFunctionLibrary_eventLoadStringArrayFromFile_Parms), 0x0010000000000180);
			UProperty* NewProp_StringArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StringArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(StringArray, VictoryBPFunctionLibrary_eventLoadStringArrayFromFile_Parms), 0x0010000000000180);
			UProperty* NewProp_StringArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_StringArray, TEXT("StringArray"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_ExcludeEmptyLines"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_FullFilePath"), TEXT("Enter Full File Path"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Loads a text file from hard disk and parses it into a String array, where each entry in the string array is 1 line from the text file. Option to exclude lines that are only whitespace characters or '\\n'. Returns the size of the final String Array that was created. Returns false if the file could be loaded from hard disk."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_LoadTexture2D_FromDDSFile()
	{
		struct VictoryBPFunctionLibrary_eventLoadTexture2D_FromDDSFile_Parms
		{
			FString FullFilePath;
			UTexture2D* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LoadTexture2D_FromDDSFile"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventLoadTexture2D_FromDDSFile_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventLoadTexture2D_FromDDSFile_Parms), 0x0010000000000580, Z_Construct_UClass_UTexture2D_NoRegister());
			UProperty* NewProp_FullFilePath = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FullFilePath"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(FullFilePath, VictoryBPFunctionLibrary_eventLoadTexture2D_FromDDSFile_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Load Texture From File"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("image DDS"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Load a Texture 2D from a DDS file! Contributed by UE4 forum member n00854180t!"));
			MetaData->SetValue(NewProp_FullFilePath, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_LoadTexture2D_FromFileByExtension()
	{
		struct VictoryBPFunctionLibrary_eventLoadTexture2D_FromFileByExtension_Parms
		{
			FString ImagePath;
			bool IsValid;
			int32 OutWidth;
			int32 OutHeight;
			UTexture2D* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LoadTexture2D_FromFileByExtension"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(VictoryBPFunctionLibrary_eventLoadTexture2D_FromFileByExtension_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventLoadTexture2D_FromFileByExtension_Parms), 0x0010000000000580, Z_Construct_UClass_UTexture2D_NoRegister());
			UProperty* NewProp_OutHeight = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutHeight"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(OutHeight, VictoryBPFunctionLibrary_eventLoadTexture2D_FromFileByExtension_Parms), 0x0010000000000180);
			UProperty* NewProp_OutWidth = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutWidth"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(OutWidth, VictoryBPFunctionLibrary_eventLoadTexture2D_FromFileByExtension_Parms), 0x0010000000000180);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsValid, VictoryBPFunctionLibrary_eventLoadTexture2D_FromFileByExtension_Parms, bool);
			UProperty* NewProp_IsValid = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IsValid"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsValid, VictoryBPFunctionLibrary_eventLoadTexture2D_FromFileByExtension_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(IsValid, VictoryBPFunctionLibrary_eventLoadTexture2D_FromFileByExtension_Parms), sizeof(bool), true);
			UProperty* NewProp_ImagePath = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ImagePath"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ImagePath, VictoryBPFunctionLibrary_eventLoadTexture2D_FromFileByExtension_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Load Texture From File"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Make sure your image path has a valid extension! Supported types can be seen in the BP node Victory_LoadTexture2D_FromFile. Contributed by Community Member Kris!"));
			MetaData->SetValue(NewProp_ImagePath, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Loops_ResetBPRunawayCounter()
	{
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Loops_ResetBPRunawayCounter"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Call this periodically in a huge loop you are intentionally using to reset the BP runaway loop system. Caution, if you have an infinite loop this will permanently hang your system until you turn your computer off. Use very very carefully! When constructing a new loop and you are not sure if it is totally stable, do NOT use this node! Always test new loops normally to ensure you dont truly have a runaway loop that would hang your computer forever."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_MapRangeClamped()
	{
		struct VictoryBPFunctionLibrary_eventMapRangeClamped_Parms
		{
			float Value;
			float InRangeA;
			float InRangeB;
			float OutRangeA;
			float OutRangeB;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MapRangeClamped"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventMapRangeClamped_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventMapRangeClamped_Parms), 0x0010000000000580);
			UProperty* NewProp_OutRangeB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutRangeB"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(OutRangeB, VictoryBPFunctionLibrary_eventMapRangeClamped_Parms), 0x0010000000000080);
			UProperty* NewProp_OutRangeA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutRangeA"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(OutRangeA, VictoryBPFunctionLibrary_eventMapRangeClamped_Parms), 0x0010000000000080);
			UProperty* NewProp_InRangeB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InRangeB"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InRangeB, VictoryBPFunctionLibrary_eventMapRangeClamped_Parms), 0x0010000000000080);
			UProperty* NewProp_InRangeA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InRangeA"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InRangeA, VictoryBPFunctionLibrary_eventMapRangeClamped_Parms), 0x0010000000000080);
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Value, VictoryBPFunctionLibrary_eventMapRangeClamped_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Math"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("get mapped value clamped"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns Value mapped from one range into another where the value is clamped to the output range.  (e.g. 0.5 normalized from the range 0->1 to 0->50 would result in 25)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_MaxOfFloatArray()
	{
		struct VictoryBPFunctionLibrary_eventMaxOfFloatArray_Parms
		{
			TArray<float> FloatArray;
			int32 IndexOfMaxValue;
			float MaxValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MaxOfFloatArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventMaxOfFloatArray_Parms));
			UProperty* NewProp_MaxValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MaxValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MaxValue, VictoryBPFunctionLibrary_eventMaxOfFloatArray_Parms), 0x0010000000000180);
			UProperty* NewProp_IndexOfMaxValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IndexOfMaxValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(IndexOfMaxValue, VictoryBPFunctionLibrary_eventMaxOfFloatArray_Parms), 0x0010000000000180);
			UProperty* NewProp_FloatArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FloatArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(FloatArray, VictoryBPFunctionLibrary_eventMaxOfFloatArray_Parms), 0x0010000008000182);
			UProperty* NewProp_FloatArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FloatArray, TEXT("FloatArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Array"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Max of all array entries. Returns -1 if the supplied array is empty. Returns the index of the max value as well as the value itself."));
			MetaData->SetValue(NewProp_FloatArray, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_MaxOfIntArray()
	{
		struct VictoryBPFunctionLibrary_eventMaxOfIntArray_Parms
		{
			TArray<int32> IntArray;
			int32 IndexOfMaxValue;
			int32 MaxValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MaxOfIntArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventMaxOfIntArray_Parms));
			UProperty* NewProp_MaxValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MaxValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaxValue, VictoryBPFunctionLibrary_eventMaxOfIntArray_Parms), 0x0010000000000180);
			UProperty* NewProp_IndexOfMaxValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IndexOfMaxValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(IndexOfMaxValue, VictoryBPFunctionLibrary_eventMaxOfIntArray_Parms), 0x0010000000000180);
			UProperty* NewProp_IntArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IntArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(IntArray, VictoryBPFunctionLibrary_eventMaxOfIntArray_Parms), 0x0010000008000182);
			UProperty* NewProp_IntArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_IntArray, TEXT("IntArray"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Array"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Max of all array entries. Returns -1 if the supplied array is empty. Returns the index of the max value as well as the value itself."));
			MetaData->SetValue(NewProp_IntArray, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_MinOfFloatArray()
	{
		struct VictoryBPFunctionLibrary_eventMinOfFloatArray_Parms
		{
			TArray<float> FloatArray;
			int32 IndexOfMinValue;
			float MinValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MinOfFloatArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventMinOfFloatArray_Parms));
			UProperty* NewProp_MinValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MinValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MinValue, VictoryBPFunctionLibrary_eventMinOfFloatArray_Parms), 0x0010000000000180);
			UProperty* NewProp_IndexOfMinValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IndexOfMinValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(IndexOfMinValue, VictoryBPFunctionLibrary_eventMinOfFloatArray_Parms), 0x0010000000000180);
			UProperty* NewProp_FloatArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FloatArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(FloatArray, VictoryBPFunctionLibrary_eventMinOfFloatArray_Parms), 0x0010000008000182);
			UProperty* NewProp_FloatArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FloatArray, TEXT("FloatArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Array"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Min of all array entries. Returns -1 if the supplied array is empty. Returns the index of the min value as well as the value itself."));
			MetaData->SetValue(NewProp_FloatArray, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_MinOfIntArray()
	{
		struct VictoryBPFunctionLibrary_eventMinOfIntArray_Parms
		{
			TArray<int32> IntArray;
			int32 IndexOfMinValue;
			int32 MinValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MinOfIntArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventMinOfIntArray_Parms));
			UProperty* NewProp_MinValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MinValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MinValue, VictoryBPFunctionLibrary_eventMinOfIntArray_Parms), 0x0010000000000180);
			UProperty* NewProp_IndexOfMinValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IndexOfMinValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(IndexOfMinValue, VictoryBPFunctionLibrary_eventMinOfIntArray_Parms), 0x0010000000000180);
			UProperty* NewProp_IntArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IntArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(IntArray, VictoryBPFunctionLibrary_eventMinOfIntArray_Parms), 0x0010000008000182);
			UProperty* NewProp_IntArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_IntArray, TEXT("IntArray"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Array"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Min of all array entries. Returns -1 if the supplied array is empty. Returns the index of the min value as well as the value itself."));
			MetaData->SetValue(NewProp_IntArray, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Mobility__SetSceneCompMobility()
	{
		struct VictoryBPFunctionLibrary_eventMobility__SetSceneCompMobility_Parms
		{
			USceneComponent* SceneComp;
			TEnumAsByte<EComponentMobility::Type> NewMobility;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Mobility__SetSceneCompMobility"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventMobility__SetSceneCompMobility_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventMobility__SetSceneCompMobility_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventMobility__SetSceneCompMobility_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventMobility__SetSceneCompMobility_Parms), sizeof(bool), true);
			UProperty* NewProp_NewMobility = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewMobility"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(NewMobility, VictoryBPFunctionLibrary_eventMobility__SetSceneCompMobility_Parms), 0x0010000000000080, Z_Construct_UEnum_Engine_EComponentMobility());
			UProperty* NewProp_SceneComp = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SceneComp"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SceneComp, VictoryBPFunctionLibrary_eventMobility__SetSceneCompMobility_Parms), 0x0010000000080080, Z_Construct_UClass_USceneComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Change the Mobility of a Static Mesh Component, can be used in Constructor Script or in Event Graph! Returns false if operation could not occur."));
			MetaData->SetValue(NewProp_SceneComp, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_NotEqual_Vector2DVector2D()
	{
		struct VictoryBPFunctionLibrary_eventNotEqual_Vector2DVector2D_Parms
		{
			FVector2D A;
			FVector2D B;
			float ErrorTolerance;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NotEqual_Vector2DVector2D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(VictoryBPFunctionLibrary_eventNotEqual_Vector2DVector2D_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventNotEqual_Vector2DVector2D_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventNotEqual_Vector2DVector2D_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventNotEqual_Vector2DVector2D_Parms), sizeof(bool), true);
			UProperty* NewProp_ErrorTolerance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ErrorTolerance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ErrorTolerance, VictoryBPFunctionLibrary_eventNotEqual_Vector2DVector2D_Parms), 0x0010000000000080);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(B, VictoryBPFunctionLibrary_eventNotEqual_Vector2DVector2D_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(A, VictoryBPFunctionLibrary_eventNotEqual_Vector2DVector2D_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector2D"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_ErrorTolerance"), TEXT("0.000100"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Not Equal (vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("!= not equal"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if vector2D A is not equal to vector2D B (A != B) within a specified error tolerance"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Open_URL_In_Web_Browser()
	{
		struct VictoryBPFunctionLibrary_eventOpen_URL_In_Web_Browser_Parms
		{
			FString TheURL;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Open_URL_In_Web_Browser"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventOpen_URL_In_Web_Browser_Parms));
			UProperty* NewProp_TheURL = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TheURL"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(TheURL, VictoryBPFunctionLibrary_eventOpen_URL_In_Web_Browser_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Launches the specified URL in the OS default web browser :) <3 Rama"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_OperatingSystem__GetCurrentPlatform()
	{
		struct VictoryBPFunctionLibrary_eventOperatingSystem__GetCurrentPlatform_Parms
		{
			bool Windows_;
			bool Mac;
			bool Linux;
			bool iOS;
			bool Android;
			bool Android_ARM;
			bool Android_Vulkan;
			bool PS4;
			bool XBoxOne;
			bool HTML5;
			bool Apple;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OperatingSystem__GetCurrentPlatform"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventOperatingSystem__GetCurrentPlatform_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Apple, VictoryBPFunctionLibrary_eventOperatingSystem__GetCurrentPlatform_Parms, bool);
			UProperty* NewProp_Apple = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Apple"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Apple, VictoryBPFunctionLibrary_eventOperatingSystem__GetCurrentPlatform_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(Apple, VictoryBPFunctionLibrary_eventOperatingSystem__GetCurrentPlatform_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(HTML5, VictoryBPFunctionLibrary_eventOperatingSystem__GetCurrentPlatform_Parms, bool);
			UProperty* NewProp_HTML5 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HTML5"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(HTML5, VictoryBPFunctionLibrary_eventOperatingSystem__GetCurrentPlatform_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(HTML5, VictoryBPFunctionLibrary_eventOperatingSystem__GetCurrentPlatform_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(XBoxOne, VictoryBPFunctionLibrary_eventOperatingSystem__GetCurrentPlatform_Parms, bool);
			UProperty* NewProp_XBoxOne = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("XBoxOne"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(XBoxOne, VictoryBPFunctionLibrary_eventOperatingSystem__GetCurrentPlatform_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(XBoxOne, VictoryBPFunctionLibrary_eventOperatingSystem__GetCurrentPlatform_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(PS4, VictoryBPFunctionLibrary_eventOperatingSystem__GetCurrentPlatform_Parms, bool);
			UProperty* NewProp_PS4 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PS4"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(PS4, VictoryBPFunctionLibrary_eventOperatingSystem__GetCurrentPlatform_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(PS4, VictoryBPFunctionLibrary_eventOperatingSystem__GetCurrentPlatform_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Android_Vulkan, VictoryBPFunctionLibrary_eventOperatingSystem__GetCurrentPlatform_Parms, bool);
			UProperty* NewProp_Android_Vulkan = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Android_Vulkan"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Android_Vulkan, VictoryBPFunctionLibrary_eventOperatingSystem__GetCurrentPlatform_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(Android_Vulkan, VictoryBPFunctionLibrary_eventOperatingSystem__GetCurrentPlatform_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Android_ARM, VictoryBPFunctionLibrary_eventOperatingSystem__GetCurrentPlatform_Parms, bool);
			UProperty* NewProp_Android_ARM = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Android_ARM"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Android_ARM, VictoryBPFunctionLibrary_eventOperatingSystem__GetCurrentPlatform_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(Android_ARM, VictoryBPFunctionLibrary_eventOperatingSystem__GetCurrentPlatform_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Android, VictoryBPFunctionLibrary_eventOperatingSystem__GetCurrentPlatform_Parms, bool);
			UProperty* NewProp_Android = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Android"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Android, VictoryBPFunctionLibrary_eventOperatingSystem__GetCurrentPlatform_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(Android, VictoryBPFunctionLibrary_eventOperatingSystem__GetCurrentPlatform_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(iOS, VictoryBPFunctionLibrary_eventOperatingSystem__GetCurrentPlatform_Parms, bool);
			UProperty* NewProp_iOS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("iOS"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(iOS, VictoryBPFunctionLibrary_eventOperatingSystem__GetCurrentPlatform_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(iOS, VictoryBPFunctionLibrary_eventOperatingSystem__GetCurrentPlatform_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Linux, VictoryBPFunctionLibrary_eventOperatingSystem__GetCurrentPlatform_Parms, bool);
			UProperty* NewProp_Linux = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Linux"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Linux, VictoryBPFunctionLibrary_eventOperatingSystem__GetCurrentPlatform_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(Linux, VictoryBPFunctionLibrary_eventOperatingSystem__GetCurrentPlatform_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Mac, VictoryBPFunctionLibrary_eventOperatingSystem__GetCurrentPlatform_Parms, bool);
			UProperty* NewProp_Mac = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Mac"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Mac, VictoryBPFunctionLibrary_eventOperatingSystem__GetCurrentPlatform_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(Mac, VictoryBPFunctionLibrary_eventOperatingSystem__GetCurrentPlatform_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Windows_, VictoryBPFunctionLibrary_eventOperatingSystem__GetCurrentPlatform_Parms, bool);
			UProperty* NewProp_Windows_ = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Windows_"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Windows_, VictoryBPFunctionLibrary_eventOperatingSystem__GetCurrentPlatform_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(Windows_, VictoryBPFunctionLibrary_eventOperatingSystem__GetCurrentPlatform_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns which platform the game code is running in."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_OptionsMenu__GetDisplayAdapterScreenResolutions()
	{
		struct VictoryBPFunctionLibrary_eventOptionsMenu__GetDisplayAdapterScreenResolutions_Parms
		{
			TArray<int32> Widths;
			TArray<int32> Heights;
			TArray<int32> RefreshRates;
			bool IncludeRefreshRates;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OptionsMenu__GetDisplayAdapterScreenResolutions"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventOptionsMenu__GetDisplayAdapterScreenResolutions_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventOptionsMenu__GetDisplayAdapterScreenResolutions_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventOptionsMenu__GetDisplayAdapterScreenResolutions_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventOptionsMenu__GetDisplayAdapterScreenResolutions_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IncludeRefreshRates, VictoryBPFunctionLibrary_eventOptionsMenu__GetDisplayAdapterScreenResolutions_Parms, bool);
			UProperty* NewProp_IncludeRefreshRates = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IncludeRefreshRates"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IncludeRefreshRates, VictoryBPFunctionLibrary_eventOptionsMenu__GetDisplayAdapterScreenResolutions_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(IncludeRefreshRates, VictoryBPFunctionLibrary_eventOptionsMenu__GetDisplayAdapterScreenResolutions_Parms), sizeof(bool), true);
			UProperty* NewProp_RefreshRates = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RefreshRates"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(RefreshRates, VictoryBPFunctionLibrary_eventOptionsMenu__GetDisplayAdapterScreenResolutions_Parms), 0x0010000000000180);
			UProperty* NewProp_RefreshRates_Inner = new(EC_InternalUseOnlyConstructor, NewProp_RefreshRates, TEXT("RefreshRates"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_Heights = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Heights"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Heights, VictoryBPFunctionLibrary_eventOptionsMenu__GetDisplayAdapterScreenResolutions_Parms), 0x0010000000000180);
			UProperty* NewProp_Heights_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Heights, TEXT("Heights"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_Widths = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Widths"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Widths, VictoryBPFunctionLibrary_eventOptionsMenu__GetDisplayAdapterScreenResolutions_Parms), 0x0010000000000180);
			UProperty* NewProp_Widths_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Widths, TEXT("Widths"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_IncludeRefreshRates"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("screen resolutions display adapter"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns three arrays containing all of the resolutions and refresh rates for the current computer's current display adapter. You can loop over just 1 of the arrays and use the current index for the other two arrays, as all 3 arrays will always have the same length. Returns false if operation could not occur."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Physics__EnterRagDoll()
	{
		struct VictoryBPFunctionLibrary_eventPhysics__EnterRagDoll_Parms
		{
			AActor* TheCharacter;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Physics__EnterRagDoll"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventPhysics__EnterRagDoll_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventPhysics__EnterRagDoll_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventPhysics__EnterRagDoll_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventPhysics__EnterRagDoll_Parms), sizeof(bool), true);
			UProperty* NewProp_TheCharacter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TheCharacter"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(TheCharacter, VictoryBPFunctionLibrary_eventPhysics__EnterRagDoll_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Cause a supplied Character (casted from Actor internally) to enter Ragdoll physics. A check will be done to see if the character has a physics asset."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Physics__GetLocationofRagDoll()
	{
		struct VictoryBPFunctionLibrary_eventPhysics__GetLocationofRagDoll_Parms
		{
			AActor* TheCharacter;
			FVector RagdollLocation;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Physics__GetLocationofRagDoll"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventPhysics__GetLocationofRagDoll_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventPhysics__GetLocationofRagDoll_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventPhysics__GetLocationofRagDoll_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventPhysics__GetLocationofRagDoll_Parms), sizeof(bool), true);
			UProperty* NewProp_RagdollLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RagdollLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RagdollLocation, VictoryBPFunctionLibrary_eventPhysics__GetLocationofRagDoll_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_TheCharacter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TheCharacter"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(TheCharacter, VictoryBPFunctionLibrary_eventPhysics__GetLocationofRagDoll_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the Ragdoll Position of the supplied actor, casted to Character internally. Returns false if operation could not occur."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Physics__InitializeVictoryRagDoll()
	{
		struct VictoryBPFunctionLibrary_eventPhysics__InitializeVictoryRagDoll_Parms
		{
			AActor* TheCharacter;
			FVector InitLocation;
			FRotator InitRotation;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Physics__InitializeVictoryRagDoll"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventPhysics__InitializeVictoryRagDoll_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventPhysics__InitializeVictoryRagDoll_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventPhysics__InitializeVictoryRagDoll_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventPhysics__InitializeVictoryRagDoll_Parms), sizeof(bool), true);
			UProperty* NewProp_InitRotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InitRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InitRotation, VictoryBPFunctionLibrary_eventPhysics__InitializeVictoryRagDoll_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_InitLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InitLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InitLocation, VictoryBPFunctionLibrary_eventPhysics__InitializeVictoryRagDoll_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_TheCharacter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TheCharacter"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(TheCharacter, VictoryBPFunctionLibrary_eventPhysics__InitializeVictoryRagDoll_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Initialize Victory Ragdoll Mode, by Obtaining the Default Relative Rotation and Location for this Character's Mesh. The Output Location and Rotation must be saved for use with LeaveRagdoll. Returns false if operation could not occur"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Physics__IsRagDoll()
	{
		struct VictoryBPFunctionLibrary_eventPhysics__IsRagDoll_Parms
		{
			AActor* TheCharacter;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Physics__IsRagDoll"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventPhysics__IsRagDoll_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventPhysics__IsRagDoll_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventPhysics__IsRagDoll_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventPhysics__IsRagDoll_Parms), sizeof(bool), true);
			UProperty* NewProp_TheCharacter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TheCharacter"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(TheCharacter, VictoryBPFunctionLibrary_eventPhysics__IsRagDoll_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns whether or not a supplied Character is in Ragdoll Physics. Cast from Actor done internally for your convenience."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Physics__LeaveRagDoll()
	{
		struct VictoryBPFunctionLibrary_eventPhysics__LeaveRagDoll_Parms
		{
			AActor* TheCharacter;
			bool SetToFallingMovementMode;
			float HeightAboveRBMesh;
			FVector InitLocation;
			FRotator InitRotation;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Physics__LeaveRagDoll"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventPhysics__LeaveRagDoll_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventPhysics__LeaveRagDoll_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventPhysics__LeaveRagDoll_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventPhysics__LeaveRagDoll_Parms), sizeof(bool), true);
			UProperty* NewProp_InitRotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InitRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InitRotation, VictoryBPFunctionLibrary_eventPhysics__LeaveRagDoll_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_InitLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InitLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InitLocation, VictoryBPFunctionLibrary_eventPhysics__LeaveRagDoll_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_HeightAboveRBMesh = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HeightAboveRBMesh"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(HeightAboveRBMesh, VictoryBPFunctionLibrary_eventPhysics__LeaveRagDoll_Parms), 0x0010000000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(SetToFallingMovementMode, VictoryBPFunctionLibrary_eventPhysics__LeaveRagDoll_Parms, bool);
			UProperty* NewProp_SetToFallingMovementMode = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SetToFallingMovementMode"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(SetToFallingMovementMode, VictoryBPFunctionLibrary_eventPhysics__LeaveRagDoll_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(SetToFallingMovementMode, VictoryBPFunctionLibrary_eventPhysics__LeaveRagDoll_Parms), sizeof(bool), true);
			UProperty* NewProp_TheCharacter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TheCharacter"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(TheCharacter, VictoryBPFunctionLibrary_eventPhysics__LeaveRagDoll_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_HeightAboveRBMesh"), TEXT("64.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_InitLocation"), TEXT("0.000000,0.000000,0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_InitRotation"), TEXT("0.000000,0.000000,0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_SetToFallingMovementMode"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Cause a supplied Character (casted from Actor internally) to exit Ragdoll physics. HeightAboveRBMesh is how far above the RB Mesh the Actor Capsule should be moved to upon exiting. Pass in the InitLocation and InitRotation from InitializeVictoryRagdoll"));
			MetaData->SetValue(NewProp_InitRotation, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_InitLocation, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Physics__UpdateCharacterCameraToRagdollLocation()
	{
		struct VictoryBPFunctionLibrary_eventPhysics__UpdateCharacterCameraToRagdollLocation_Parms
		{
			AActor* TheCharacter;
			float HeightOffset;
			float InterpSpeed;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Physics__UpdateCharacterCameraToRagdollLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventPhysics__UpdateCharacterCameraToRagdollLocation_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventPhysics__UpdateCharacterCameraToRagdollLocation_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventPhysics__UpdateCharacterCameraToRagdollLocation_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventPhysics__UpdateCharacterCameraToRagdollLocation_Parms), sizeof(bool), true);
			UProperty* NewProp_InterpSpeed = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InterpSpeed"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InterpSpeed, VictoryBPFunctionLibrary_eventPhysics__UpdateCharacterCameraToRagdollLocation_Parms), 0x0010000000000080);
			UProperty* NewProp_HeightOffset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HeightOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(HeightOffset, VictoryBPFunctionLibrary_eventPhysics__UpdateCharacterCameraToRagdollLocation_Parms), 0x0010000000000080);
			UProperty* NewProp_TheCharacter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TheCharacter"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(TheCharacter, VictoryBPFunctionLibrary_eventPhysics__UpdateCharacterCameraToRagdollLocation_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_HeightOffset"), TEXT("128.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_InterpSpeed"), TEXT("3.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Update the TheCharacter's Capsule Location and Camera to the Current Location of the Ragdoll. InterpSpeed is how fast the camera keeps up with the moving ragdoll! HeightOffset is the height above the ragdoll that the camera should stay. Returns false if operation could not occur or if Mesh was not in ragdoll"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_PlayerController_GetControllerID()
	{
		struct VictoryBPFunctionLibrary_eventPlayerController_GetControllerID_Parms
		{
			APlayerController* ThePC;
			int32 ControllerID;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PlayerController_GetControllerID"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(VictoryBPFunctionLibrary_eventPlayerController_GetControllerID_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventPlayerController_GetControllerID_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventPlayerController_GetControllerID_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventPlayerController_GetControllerID_Parms), sizeof(bool), true);
			UProperty* NewProp_ControllerID = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ControllerID"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ControllerID, VictoryBPFunctionLibrary_eventPlayerController_GetControllerID_Parms), 0x0010000000000180);
			UProperty* NewProp_ThePC = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ThePC"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ThePC, VictoryBPFunctionLibrary_eventPlayerController_GetControllerID_Parms), 0x0010000000000080, Z_Construct_UClass_APlayerController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the Controller ID for a supplied Player Controller <3 Rama. Returns false if operation could not occur."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_PlayerState_GetPlayerID()
	{
		struct VictoryBPFunctionLibrary_eventPlayerState_GetPlayerID_Parms
		{
			APlayerController* ThePC;
			int32 PlayerID;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PlayerState_GetPlayerID"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(VictoryBPFunctionLibrary_eventPlayerState_GetPlayerID_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventPlayerState_GetPlayerID_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventPlayerState_GetPlayerID_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventPlayerState_GetPlayerID_Parms), sizeof(bool), true);
			UProperty* NewProp_PlayerID = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PlayerID"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(PlayerID, VictoryBPFunctionLibrary_eventPlayerState_GetPlayerID_Parms), 0x0010000000000180);
			UProperty* NewProp_ThePC = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ThePC"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ThePC, VictoryBPFunctionLibrary_eventPlayerState_GetPlayerID_Parms), 0x0010000000000080, Z_Construct_UClass_APlayerController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Networking"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the Unique PlayerID from the PlayerState for a supplied Player Controller. Returns false if operation could not occur. Epic accepted my pull request for this a while back so now you can just GetPlayerState and directly access <3 Rama"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_PlaySoundAtLocationFromFile()
	{
		struct VictoryBPFunctionLibrary_eventPlaySoundAtLocationFromFile_Parms
		{
			UObject* WorldContextObject;
			FString FilePath;
			FVector Location;
			float VolumeMultiplier;
			float PitchMultiplier;
			float StartTime;
			USoundAttenuation* AttenuationSettings;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PlaySoundAtLocationFromFile"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(VictoryBPFunctionLibrary_eventPlaySoundAtLocationFromFile_Parms));
			UProperty* NewProp_AttenuationSettings = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AttenuationSettings"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(AttenuationSettings, VictoryBPFunctionLibrary_eventPlaySoundAtLocationFromFile_Parms), 0x0010040000000080, Z_Construct_UClass_USoundAttenuation_NoRegister());
			UProperty* NewProp_StartTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StartTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(StartTime, VictoryBPFunctionLibrary_eventPlaySoundAtLocationFromFile_Parms), 0x0010040000000080);
			UProperty* NewProp_PitchMultiplier = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PitchMultiplier"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(PitchMultiplier, VictoryBPFunctionLibrary_eventPlaySoundAtLocationFromFile_Parms), 0x0010040000000080);
			UProperty* NewProp_VolumeMultiplier = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VolumeMultiplier"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(VolumeMultiplier, VictoryBPFunctionLibrary_eventPlaySoundAtLocationFromFile_Parms), 0x0010040000000080);
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Location, VictoryBPFunctionLibrary_eventPlaySoundAtLocationFromFile_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_FilePath = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FilePath"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(FilePath, VictoryBPFunctionLibrary_eventPlaySoundAtLocationFromFile_Parms), 0x0010000000000080);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, VictoryBPFunctionLibrary_eventPlaySoundAtLocationFromFile_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("3"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_PitchMultiplier"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_StartTime"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_VolumeMultiplier"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("PitchMultiplier"), TEXT("1.0"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Contributed by UE4 forum member n00854180t! Plays a .ogg sound at the given location. This is a fire and forget sound and does not travel with any actor. Replication is also not handled at this point.\n\nNOT SUPPORTED ON PS4.\n\n@param FilePath - Path to sound file to play\n@param Location - World position to play sound at\n@param World - The World in which the sound is to be played\n@param VolumeMultiplier - Volume multiplier\n@param PitchMultiplier - PitchMultiplier\n@param AttenuationSettings - Override attenuation settings package to play sound with"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("VolumeMultiplier"), TEXT("1.0"));
			MetaData->SetValue(NewProp_FilePath, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_PlaySoundAttachedFromFile()
	{
		struct VictoryBPFunctionLibrary_eventPlaySoundAttachedFromFile_Parms
		{
			FString FilePath;
			USceneComponent* AttachToComponent;
			FName AttachPointName;
			FVector Location;
			TEnumAsByte<EAttachLocation::Type> LocationType;
			bool bStopWhenAttachedToDestroyed;
			float VolumeMultiplier;
			float PitchMultiplier;
			float StartTime;
			USoundAttenuation* AttenuationSettings;
			UAudioComponent* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PlaySoundAttachedFromFile"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(VictoryBPFunctionLibrary_eventPlaySoundAttachedFromFile_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventPlaySoundAttachedFromFile_Parms), 0x0010000000080588, Z_Construct_UClass_UAudioComponent_NoRegister());
			UProperty* NewProp_AttenuationSettings = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AttenuationSettings"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(AttenuationSettings, VictoryBPFunctionLibrary_eventPlaySoundAttachedFromFile_Parms), 0x0010040000000080, Z_Construct_UClass_USoundAttenuation_NoRegister());
			UProperty* NewProp_StartTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StartTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(StartTime, VictoryBPFunctionLibrary_eventPlaySoundAttachedFromFile_Parms), 0x0010040000000080);
			UProperty* NewProp_PitchMultiplier = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PitchMultiplier"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(PitchMultiplier, VictoryBPFunctionLibrary_eventPlaySoundAttachedFromFile_Parms), 0x0010040000000080);
			UProperty* NewProp_VolumeMultiplier = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VolumeMultiplier"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(VolumeMultiplier, VictoryBPFunctionLibrary_eventPlaySoundAttachedFromFile_Parms), 0x0010040000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bStopWhenAttachedToDestroyed, VictoryBPFunctionLibrary_eventPlaySoundAttachedFromFile_Parms, bool);
			UProperty* NewProp_bStopWhenAttachedToDestroyed = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bStopWhenAttachedToDestroyed"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bStopWhenAttachedToDestroyed, VictoryBPFunctionLibrary_eventPlaySoundAttachedFromFile_Parms), 0x0010040000000080, CPP_BOOL_PROPERTY_BITMASK(bStopWhenAttachedToDestroyed, VictoryBPFunctionLibrary_eventPlaySoundAttachedFromFile_Parms), sizeof(bool), true);
			UProperty* NewProp_LocationType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LocationType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(LocationType, VictoryBPFunctionLibrary_eventPlaySoundAttachedFromFile_Parms), 0x0010040000000080, Z_Construct_UEnum_Engine_EAttachLocation());
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Location, VictoryBPFunctionLibrary_eventPlaySoundAttachedFromFile_Parms), 0x0010040000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_AttachPointName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AttachPointName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(AttachPointName, VictoryBPFunctionLibrary_eventPlaySoundAttachedFromFile_Parms), 0x0010040000000080);
			UProperty* NewProp_AttachToComponent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AttachToComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(AttachToComponent, VictoryBPFunctionLibrary_eventPlaySoundAttachedFromFile_Parms), 0x0010000000080080, Z_Construct_UClass_USceneComponent_NoRegister());
			UProperty* NewProp_FilePath = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FilePath"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(FilePath, VictoryBPFunctionLibrary_eventPlaySoundAttachedFromFile_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("2"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_AttachPointName"), TEXT("None"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bStopWhenAttachedToDestroyed"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_LocationType"), TEXT("SnapToTarget"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_PitchMultiplier"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_StartTime"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_VolumeMultiplier"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("PitchMultiplier"), TEXT("1.0"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Contributed by UE4 forum member n00854180t! Plays a .ogg sound from file, attached to and following the specified component. This is a fire and forget sound. Replication is also not handled at this point.\n@param FilePath - Path to sound file to play\n@param AttachComponent - Component to attach to.\n@param AttachPointName - Optional named point within the AttachComponent to play the sound at\n@param Location - Depending on the value of Location Type this is either a relative offset from the attach component/point or an absolute world position that will be translated to a relative offset\n@param LocationType - Specifies whether Location is a relative offset or an absolute world position\n@param bStopWhenAttachedToDestroyed - Specifies whether the sound should stop playing when the owner of the attach to component is destroyed.\n@param VolumeMultiplier - Volume multiplier\n@param PitchMultiplier - PitchMultiplier\n@param AttenuationSettings - Override attenuation settings package to play sound with"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("VolumeMultiplier"), TEXT("1.0"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_AttachToComponent, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_FilePath, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_PointDistanceToPlane()
	{
		struct VictoryBPFunctionLibrary_eventPointDistanceToPlane_Parms
		{
			FPlane Plane;
			FVector Point;
			float Distance;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PointDistanceToPlane"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventPointDistanceToPlane_Parms));
			UProperty* NewProp_Distance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Distance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Distance, VictoryBPFunctionLibrary_eventPointDistanceToPlane_Parms), 0x0010000000000180);
			UProperty* NewProp_Point = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Point"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Point, VictoryBPFunctionLibrary_eventPointDistanceToPlane_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Plane = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Plane"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Plane, VictoryBPFunctionLibrary_eventPointDistanceToPlane_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FPlane());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Math|Plane"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT(">0: point is in front of the plane, <0: behind, =0: on the plane *"));
			MetaData->SetValue(NewProp_Plane, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_ProjectWorldToScreenPosition()
	{
		struct VictoryBPFunctionLibrary_eventProjectWorldToScreenPosition_Parms
		{
			FVector WorldLocation;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ProjectWorldToScreenPosition"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventProjectWorldToScreenPosition_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventProjectWorldToScreenPosition_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_WorldLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(WorldLocation, VictoryBPFunctionLibrary_eventProjectWorldToScreenPosition_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_WorldLocation, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandBool_Bernoulli()
	{
		struct VictoryBPFunctionLibrary_eventRandBool_Bernoulli_Parms
		{
			float fBias;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandBool_Bernoulli"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventRandBool_Bernoulli_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventRandBool_Bernoulli_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventRandBool_Bernoulli_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventRandBool_Bernoulli_Parms), sizeof(bool), true);
			UProperty* NewProp_fBias = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("fBias"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(fBias, VictoryBPFunctionLibrary_eventRandBool_Bernoulli_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Random Bool - Bernoulli distribution\n@param fBias - Bias of Bernoulli distribution\n@return uniformly distributed bool based on bias parameter"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandBool_Bernoulli_MT()
	{
		struct VictoryBPFunctionLibrary_eventRandBool_Bernoulli_MT_Parms
		{
			float fBias;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandBool_Bernoulli_MT"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventRandBool_Bernoulli_MT_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventRandBool_Bernoulli_MT_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventRandBool_Bernoulli_MT_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventRandBool_Bernoulli_MT_Parms), sizeof(bool), true);
			UProperty* NewProp_fBias = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("fBias"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(fBias, VictoryBPFunctionLibrary_eventRandBool_Bernoulli_MT_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Random Bool - Bernoulli distribution - Mersenne Twister\n@param fBias - Bias of Bernoulli distribution\n@return uniformly distributed bool based on bias parameter"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandFloat_MINMAX_uniDis()
	{
		struct VictoryBPFunctionLibrary_eventRandFloat_MINMAX_uniDis_Parms
		{
			float iMin;
			float iMax;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandFloat_MINMAX_uniDis"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventRandFloat_MINMAX_uniDis_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventRandFloat_MINMAX_uniDis_Parms), 0x0010000000000580);
			UProperty* NewProp_iMax = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("iMax"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(iMax, VictoryBPFunctionLibrary_eventRandFloat_MINMAX_uniDis_Parms), 0x0010000000000080);
			UProperty* NewProp_iMin = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("iMin"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(iMin, VictoryBPFunctionLibrary_eventRandFloat_MINMAX_uniDis_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Random Double - Uniform distribution based on MIN to MAX parameters\n@param iMin - Minimum value of uniform distribution\n@param iMax - Maximum value of uniform distribution\n@return double - uniform distribution from iMin to iMax parameters"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandFloat_MINMAX_uniDis_MT()
	{
		struct VictoryBPFunctionLibrary_eventRandFloat_MINMAX_uniDis_MT_Parms
		{
			float iMin;
			float iMax;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandFloat_MINMAX_uniDis_MT"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventRandFloat_MINMAX_uniDis_MT_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventRandFloat_MINMAX_uniDis_MT_Parms), 0x0010000000000580);
			UProperty* NewProp_iMax = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("iMax"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(iMax, VictoryBPFunctionLibrary_eventRandFloat_MINMAX_uniDis_MT_Parms), 0x0010000000000080);
			UProperty* NewProp_iMin = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("iMin"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(iMin, VictoryBPFunctionLibrary_eventRandFloat_MINMAX_uniDis_MT_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Random Float - Uniform distribution based on MIN to MAX parameters - Mersenne Twister\n@param iMin - Minimum value of uniform distribution\n@param iMax - Maximum value of uniform distribution\n@return float - uniform distribution from iMin to iMax parameters"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandFloat_uniDis()
	{
		struct VictoryBPFunctionLibrary_eventRandFloat_uniDis_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandFloat_uniDis"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventRandFloat_uniDis_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventRandFloat_uniDis_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Random Double - Zero to One Uniform distribution\n@return double - uniform distribution from 0 to 1"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandFloat_uniDis_MT()
	{
		struct VictoryBPFunctionLibrary_eventRandFloat_uniDis_MT_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandFloat_uniDis_MT"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventRandFloat_uniDis_MT_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventRandFloat_uniDis_MT_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Random Float - Zero to One Uniform distribution -  Mersenne Twister\n@return float - uniform distribution from 0 to 1"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandInt_MINMAX_uniDis()
	{
		struct VictoryBPFunctionLibrary_eventRandInt_MINMAX_uniDis_Parms
		{
			int32 iMin;
			int32 iMax;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandInt_MINMAX_uniDis"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventRandInt_MINMAX_uniDis_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventRandInt_MINMAX_uniDis_Parms), 0x0010000000000580);
			UProperty* NewProp_iMax = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("iMax"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(iMax, VictoryBPFunctionLibrary_eventRandInt_MINMAX_uniDis_Parms), 0x0010000000000080);
			UProperty* NewProp_iMin = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("iMin"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(iMin, VictoryBPFunctionLibrary_eventRandInt_MINMAX_uniDis_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Random Integer - MIN to MAX Uniform distribution\n@param iMin - Minimum value of uniform distribution\n@param iMax - Maximum value of uniform distribution\n@return int32 - uniform distribution from iMin to iMax parameters"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandInt_MINMAX_uniDis_MT()
	{
		struct VictoryBPFunctionLibrary_eventRandInt_MINMAX_uniDis_MT_Parms
		{
			int32 iMin;
			int32 iMax;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandInt_MINMAX_uniDis_MT"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventRandInt_MINMAX_uniDis_MT_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventRandInt_MINMAX_uniDis_MT_Parms), 0x0010000000000580);
			UProperty* NewProp_iMax = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("iMax"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(iMax, VictoryBPFunctionLibrary_eventRandInt_MINMAX_uniDis_MT_Parms), 0x0010000000000080);
			UProperty* NewProp_iMin = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("iMin"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(iMin, VictoryBPFunctionLibrary_eventRandInt_MINMAX_uniDis_MT_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Random Integer - MIN to MAX Uniform distribution - Mersenne Twister\n@param iMin - Minimum value of uniform distribution\n@param iMax - Maximum value of uniform distribution\n@return int32 - uniform distribution from iMin to iMax parameters"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandInt_uniDis()
	{
		struct VictoryBPFunctionLibrary_eventRandInt_uniDis_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandInt_uniDis"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventRandInt_uniDis_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventRandInt_uniDis_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Random Integer - Zero to One Uniform distribution\n@return int32 - uniform distribution from 0 to 1"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandInt_uniDis_MT()
	{
		struct VictoryBPFunctionLibrary_eventRandInt_uniDis_MT_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandInt_uniDis_MT"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventRandInt_uniDis_MT_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventRandInt_uniDis_MT_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Random Integer - Zero to One Uniform distribution - Mersenne Twister\n@return int32 - uniform distribution from 0 to 1"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime()
	{
		struct VictoryBPFunctionLibrary_eventRealWorldTime__GetCurrentOSTime_Parms
		{
			int32 MilliSeconds;
			int32 Seconds;
			int32 Minutes;
			int32 Hours12;
			int32 Hours24;
			int32 Day;
			int32 Month;
			int32 Year;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RealWorldTime__GetCurrentOSTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventRealWorldTime__GetCurrentOSTime_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventRealWorldTime__GetCurrentOSTime_Parms), 0x0010000000000580);
			UProperty* NewProp_Year = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Year"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Year, VictoryBPFunctionLibrary_eventRealWorldTime__GetCurrentOSTime_Parms), 0x0010000000000180);
			UProperty* NewProp_Month = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Month"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Month, VictoryBPFunctionLibrary_eventRealWorldTime__GetCurrentOSTime_Parms), 0x0010000000000180);
			UProperty* NewProp_Day = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Day"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Day, VictoryBPFunctionLibrary_eventRealWorldTime__GetCurrentOSTime_Parms), 0x0010000000000180);
			UProperty* NewProp_Hours24 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Hours24"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Hours24, VictoryBPFunctionLibrary_eventRealWorldTime__GetCurrentOSTime_Parms), 0x0010000000000180);
			UProperty* NewProp_Hours12 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Hours12"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Hours12, VictoryBPFunctionLibrary_eventRealWorldTime__GetCurrentOSTime_Parms), 0x0010000000000180);
			UProperty* NewProp_Minutes = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Minutes"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Minutes, VictoryBPFunctionLibrary_eventRealWorldTime__GetCurrentOSTime_Parms), 0x0010000000000180);
			UProperty* NewProp_Seconds = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Seconds"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Seconds, VictoryBPFunctionLibrary_eventRealWorldTime__GetCurrentOSTime_Parms), 0x0010000000000180);
			UProperty* NewProp_MilliSeconds = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MilliSeconds"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MilliSeconds, VictoryBPFunctionLibrary_eventRealWorldTime__GetCurrentOSTime_Parms), 0x0010000000000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Retrieves the OS system Date and Time as a string at the instant this BP node runs. Use my other RealWorldTime node to get the time passed since the return value of this node! You can use this to record milliseconds/seconds/minutes/hours between events in game logic!"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_RealWorldTime__GetDifferenceBetweenTimes()
	{
		struct VictoryBPFunctionLibrary_eventRealWorldTime__GetDifferenceBetweenTimes_Parms
		{
			FString PreviousTime1;
			FString PreviousTime2;
			float Milliseconds;
			float Seconds;
			float Minutes;
			float Hours;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RealWorldTime__GetDifferenceBetweenTimes"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventRealWorldTime__GetDifferenceBetweenTimes_Parms));
			UProperty* NewProp_Hours = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Hours"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Hours, VictoryBPFunctionLibrary_eventRealWorldTime__GetDifferenceBetweenTimes_Parms), 0x0010000000000180);
			UProperty* NewProp_Minutes = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Minutes"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Minutes, VictoryBPFunctionLibrary_eventRealWorldTime__GetDifferenceBetweenTimes_Parms), 0x0010000000000180);
			UProperty* NewProp_Seconds = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Seconds"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Seconds, VictoryBPFunctionLibrary_eventRealWorldTime__GetDifferenceBetweenTimes_Parms), 0x0010000000000180);
			UProperty* NewProp_Milliseconds = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Milliseconds"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Milliseconds, VictoryBPFunctionLibrary_eventRealWorldTime__GetDifferenceBetweenTimes_Parms), 0x0010000000000180);
			UProperty* NewProp_PreviousTime2 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PreviousTime2"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(PreviousTime2, VictoryBPFunctionLibrary_eventRealWorldTime__GetDifferenceBetweenTimes_Parms), 0x0010000000000080);
			UProperty* NewProp_PreviousTime1 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PreviousTime1"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(PreviousTime1, VictoryBPFunctionLibrary_eventRealWorldTime__GetDifferenceBetweenTimes_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the difference between two recorded times! You can use this to record milliseconds/seconds/minutes/hours between events in game logic!"));
			MetaData->SetValue(NewProp_PreviousTime2, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_PreviousTime1, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_RealWorldTime__GetTimePassedSincePreviousTime()
	{
		struct VictoryBPFunctionLibrary_eventRealWorldTime__GetTimePassedSincePreviousTime_Parms
		{
			FString PreviousTime;
			float Milliseconds;
			float Seconds;
			float Minutes;
			float Hours;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RealWorldTime__GetTimePassedSincePreviousTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventRealWorldTime__GetTimePassedSincePreviousTime_Parms));
			UProperty* NewProp_Hours = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Hours"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Hours, VictoryBPFunctionLibrary_eventRealWorldTime__GetTimePassedSincePreviousTime_Parms), 0x0010000000000180);
			UProperty* NewProp_Minutes = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Minutes"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Minutes, VictoryBPFunctionLibrary_eventRealWorldTime__GetTimePassedSincePreviousTime_Parms), 0x0010000000000180);
			UProperty* NewProp_Seconds = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Seconds"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Seconds, VictoryBPFunctionLibrary_eventRealWorldTime__GetTimePassedSincePreviousTime_Parms), 0x0010000000000180);
			UProperty* NewProp_Milliseconds = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Milliseconds"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Milliseconds, VictoryBPFunctionLibrary_eventRealWorldTime__GetTimePassedSincePreviousTime_Parms), 0x0010000000000180);
			UProperty* NewProp_PreviousTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PreviousTime"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(PreviousTime, VictoryBPFunctionLibrary_eventRealWorldTime__GetTimePassedSincePreviousTime_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the amount of seconds/minutes/hours since the the supplied DateTime string! You can use this to record milliseconds/seconds/minutes/hours between events in game logic!"));
			MetaData->SetValue(NewProp_PreviousTime, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_RemoveAllWidgetsOfClass()
	{
		struct VictoryBPFunctionLibrary_eventRemoveAllWidgetsOfClass_Parms
		{
			UObject* WorldContextObject;
			TSubclassOf<UUserWidget>  WidgetClass;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RemoveAllWidgetsOfClass"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventRemoveAllWidgetsOfClass_Parms));
			UProperty* NewProp_WidgetClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WidgetClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(WidgetClass, VictoryBPFunctionLibrary_eventRemoveAllWidgetsOfClass_Parms), 0x0014000000000080, Z_Construct_UClass_UUserWidget_NoRegister(), UClass::StaticClass());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, VictoryBPFunctionLibrary_eventRemoveAllWidgetsOfClass_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|UMG"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Remove all widgets of a certain class from viewport!"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_RemoveFromStreamingLevels()
	{
		struct VictoryBPFunctionLibrary_eventRemoveFromStreamingLevels_Parms
		{
			UObject* WorldContextObject;
			FLevelStreamInstanceInfo LevelInstanceInfo;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RemoveFromStreamingLevels"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(VictoryBPFunctionLibrary_eventRemoveFromStreamingLevels_Parms));
			UProperty* NewProp_LevelInstanceInfo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LevelInstanceInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LevelInstanceInfo, VictoryBPFunctionLibrary_eventRemoveFromStreamingLevels_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FLevelStreamInstanceInfo());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, VictoryBPFunctionLibrary_eventRemoveFromStreamingLevels_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LevelStreaming"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_LevelInstanceInfo, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Rendering__FreezeGameRendering()
	{
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Rendering__FreezeGameRendering"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|GameWindow"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Freeze Game Render, Does Not Stop Game Logic, Just Rendering. This is not like Pausing. Mainly useful for freezing render when window is not in the foreground"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Rendering__UnFreezeGameRendering()
	{
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Rendering__UnFreezeGameRendering"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|GameWindow"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Unfreeze Game Render. This is not an unpause function, it's just for actual screen rendering"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_SaveGameObject_GetAllSaveSlotFileNames()
	{
		struct VictoryBPFunctionLibrary_eventSaveGameObject_GetAllSaveSlotFileNames_Parms
		{
			TArray<FString> FileNames;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SaveGameObject_GetAllSaveSlotFileNames"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventSaveGameObject_GetAllSaveSlotFileNames_Parms));
			UProperty* NewProp_FileNames = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FileNames"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(FileNames, VictoryBPFunctionLibrary_eventSaveGameObject_GetAllSaveSlotFileNames_Parms), 0x0010000000000180);
			UProperty* NewProp_FileNames_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FileNames, TEXT("FileNames"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|File IO"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Obtain a listing of all SaveGame file names that were saved using the Blueprint Save Game system."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_ScreenShots_Rename_Move_Most_Recent()
	{
		struct VictoryBPFunctionLibrary_eventScreenShots_Rename_Move_Most_Recent_Parms
		{
			FString OriginalFileName;
			FString NewName;
			FString NewAbsoluteFolderPath;
			bool HighResolution;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ScreenShots_Rename_Move_Most_Recent"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(VictoryBPFunctionLibrary_eventScreenShots_Rename_Move_Most_Recent_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventScreenShots_Rename_Move_Most_Recent_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventScreenShots_Rename_Move_Most_Recent_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventScreenShots_Rename_Move_Most_Recent_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(HighResolution, VictoryBPFunctionLibrary_eventScreenShots_Rename_Move_Most_Recent_Parms, bool);
			UProperty* NewProp_HighResolution = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HighResolution"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(HighResolution, VictoryBPFunctionLibrary_eventScreenShots_Rename_Move_Most_Recent_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(HighResolution, VictoryBPFunctionLibrary_eventScreenShots_Rename_Move_Most_Recent_Parms), sizeof(bool), true);
			UProperty* NewProp_NewAbsoluteFolderPath = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewAbsoluteFolderPath"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(NewAbsoluteFolderPath, VictoryBPFunctionLibrary_eventScreenShots_Rename_Move_Most_Recent_Parms), 0x0010000000000080);
			UProperty* NewProp_NewName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(NewName, VictoryBPFunctionLibrary_eventScreenShots_Rename_Move_Most_Recent_Parms), 0x0010000000000080);
			UProperty* NewProp_OriginalFileName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OriginalFileName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(OriginalFileName, VictoryBPFunctionLibrary_eventScreenShots_Rename_Move_Most_Recent_Parms), 0x0010000000000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Screenshots"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_HighResolution"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("High resolution"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns false if the new file could not be created. The folder path must be absolute, such as C:\\Users\\Self\\Documents\\YourProject\\MyPics. You can use my other Paths nodes to easily get absolute paths related to your project! <3 Rama"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_seedRand()
	{
		struct VictoryBPFunctionLibrary_eventseedRand_Parms
		{
			int32 seed;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("seedRand"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventseedRand_Parms));
			UProperty* NewProp_seed = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("seed"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(seed, VictoryBPFunctionLibrary_eventseedRand_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Seed Rand with value passed\n@param seed - value to pass to the prng as the seed"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_seedRandWithEntropy()
	{
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("seedRandWithEntropy"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Seed Rand with entropy\n@param seed - value to pass to the prng as the seed"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_seedRandWithTime()
	{
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("seedRandWithTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Seed Rand with current time"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Selection_SelectionBox()
	{
		struct VictoryBPFunctionLibrary_eventSelection_SelectionBox_Parms
		{
			UObject* WorldContextObject;
			TArray<AActor*> SelectedActors;
			FVector2D AnchorPoint;
			FVector2D DraggedPoint;
			TSubclassOf<AActor>  ClassFilter;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Selection_SelectionBox"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventSelection_SelectionBox_Parms));
			UProperty* NewProp_ClassFilter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ClassFilter"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(ClassFilter, VictoryBPFunctionLibrary_eventSelection_SelectionBox_Parms), 0x0014000000000080, Z_Construct_UClass_AActor_NoRegister(), UClass::StaticClass());
			UProperty* NewProp_DraggedPoint = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DraggedPoint"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DraggedPoint, VictoryBPFunctionLibrary_eventSelection_SelectionBox_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_AnchorPoint = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AnchorPoint"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AnchorPoint, VictoryBPFunctionLibrary_eventSelection_SelectionBox_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_SelectedActors = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SelectedActors"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(SelectedActors, VictoryBPFunctionLibrary_eventSelection_SelectionBox_Parms), 0x0010000000000180);
			UProperty* NewProp_SelectedActors_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SelectedActors, TEXT("SelectedActors"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, VictoryBPFunctionLibrary_eventSelection_SelectionBox_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Implementation of a Selection Marquee / Selection Box as a BP Node. AnchorPoint is the first clicked point, which user then drags from to make the box. Class filter is optional way to narrow the scope of actors that can be selected by the selection box! -Rama"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_ServerTravel()
	{
		struct VictoryBPFunctionLibrary_eventServerTravel_Parms
		{
			UObject* WorldContextObject;
			FString MapName;
			bool bNotifyPlayers;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ServerTravel"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventServerTravel_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bNotifyPlayers, VictoryBPFunctionLibrary_eventServerTravel_Parms, bool);
			UProperty* NewProp_bNotifyPlayers = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bNotifyPlayers"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bNotifyPlayers, VictoryBPFunctionLibrary_eventServerTravel_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bNotifyPlayers, VictoryBPFunctionLibrary_eventServerTravel_Parms), sizeof(bool), true);
			UProperty* NewProp_MapName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MapName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(MapName, VictoryBPFunctionLibrary_eventServerTravel_Parms), 0x0010000000000080);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, VictoryBPFunctionLibrary_eventServerTravel_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bNotifyPlayers"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Server Travel! This is an async load level process which allows you to put up a UMG widget while the level loading occurs!"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_SetBloomIntensity()
	{
		struct VictoryBPFunctionLibrary_eventSetBloomIntensity_Parms
		{
			APostProcessVolume* PostProcessVolume;
			float Intensity;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBloomIntensity"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventSetBloomIntensity_Parms));
			UProperty* NewProp_Intensity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Intensity"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Intensity, VictoryBPFunctionLibrary_eventSetBloomIntensity_Parms), 0x0010000000000080);
			UProperty* NewProp_PostProcessVolume = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PostProcessVolume"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(PostProcessVolume, VictoryBPFunctionLibrary_eventSetBloomIntensity_Parms), 0x0010000000000080, Z_Construct_UClass_APostProcessVolume_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Post Process"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Modify the bloom intensity of a post process volume, by Community Member Sahkan"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_SetComponentTickRate()
	{
		struct VictoryBPFunctionLibrary_eventSetComponentTickRate_Parms
		{
			UActorComponent* Component;
			float Seconds;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetComponentTickRate"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventSetComponentTickRate_Parms));
			UProperty* NewProp_Seconds = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Seconds"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Seconds, VictoryBPFunctionLibrary_eventSetComponentTickRate_Parms), 0x0010000000000080);
			UProperty* NewProp_Component = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Component"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Component, VictoryBPFunctionLibrary_eventSetComponentTickRate_Parms), 0x0010000000080080, Z_Construct_UClass_UActorComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Core"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Dynamically change how frequently in seconds a component will tick! Can be altered at any point during game-time! \x2665 Rama"));
			MetaData->SetValue(NewProp_Component, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_SetGenericTeamId()
	{
		struct VictoryBPFunctionLibrary_eventSetGenericTeamId_Parms
		{
			AActor* Target;
			uint8 NewTeamId;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetGenericTeamId"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventSetGenericTeamId_Parms));
			UProperty* NewProp_NewTeamId = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewTeamId"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(NewTeamId, VictoryBPFunctionLibrary_eventSetGenericTeamId_Parms), 0x0010000000000080);
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Target, VictoryBPFunctionLibrary_eventSetGenericTeamId_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Team"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_SpawnActorIntoLevel()
	{
		struct VictoryBPFunctionLibrary_eventSpawnActorIntoLevel_Parms
		{
			UObject* WorldContextObject;
			TSubclassOf<AActor>  ActorClass;
			FName Level;
			FVector Location;
			FRotator Rotation;
			bool SpawnEvenIfColliding;
			AActor* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SpawnActorIntoLevel"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(VictoryBPFunctionLibrary_eventSpawnActorIntoLevel_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventSpawnActorIntoLevel_Parms), 0x0010000000000580, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(SpawnEvenIfColliding, VictoryBPFunctionLibrary_eventSpawnActorIntoLevel_Parms, bool);
			UProperty* NewProp_SpawnEvenIfColliding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpawnEvenIfColliding"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(SpawnEvenIfColliding, VictoryBPFunctionLibrary_eventSpawnActorIntoLevel_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(SpawnEvenIfColliding, VictoryBPFunctionLibrary_eventSpawnActorIntoLevel_Parms), sizeof(bool), true);
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Rotation, VictoryBPFunctionLibrary_eventSpawnActorIntoLevel_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Location, VictoryBPFunctionLibrary_eventSpawnActorIntoLevel_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Level = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Level"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(Level, VictoryBPFunctionLibrary_eventSpawnActorIntoLevel_Parms), 0x0010000000000080);
			UProperty* NewProp_ActorClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(ActorClass, VictoryBPFunctionLibrary_eventSpawnActorIntoLevel_Parms), 0x0014000000000080, Z_Construct_UClass_AActor_NoRegister(), UClass::StaticClass());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, VictoryBPFunctionLibrary_eventSpawnActorIntoLevel_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Level"), TEXT("None"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_SpawnEvenIfColliding"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Spawn an Actor and choose which level you want them to spawn into!"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_String__CombineStrings()
	{
		struct VictoryBPFunctionLibrary_eventString__CombineStrings_Parms
		{
			FString StringFirst;
			FString StringSecond;
			FString Separator;
			FString StringFirstLabel;
			FString StringSecondLabel;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("String__CombineStrings"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventString__CombineStrings_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventString__CombineStrings_Parms), 0x0010000000000580);
			UProperty* NewProp_StringSecondLabel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StringSecondLabel"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(StringSecondLabel, VictoryBPFunctionLibrary_eventString__CombineStrings_Parms), 0x0010000000000080);
			UProperty* NewProp_StringFirstLabel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StringFirstLabel"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(StringFirstLabel, VictoryBPFunctionLibrary_eventString__CombineStrings_Parms), 0x0010000000000080);
			UProperty* NewProp_Separator = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Separator"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Separator, VictoryBPFunctionLibrary_eventString__CombineStrings_Parms), 0x0010000000000080);
			UProperty* NewProp_StringSecond = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StringSecond"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(StringSecond, VictoryBPFunctionLibrary_eventString__CombineStrings_Parms), 0x0010000000000080);
			UProperty* NewProp_StringFirst = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StringFirst"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(StringFirst, VictoryBPFunctionLibrary_eventString__CombineStrings_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|String"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Combines two strings together! The Separator and the Labels are optional"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_String__CombineStrings_Multi()
	{
		struct VictoryBPFunctionLibrary_eventString__CombineStrings_Multi_Parms
		{
			FString A;
			FString B;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("String__CombineStrings_Multi"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventString__CombineStrings_Multi_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventString__CombineStrings_Multi_Parms), 0x0010000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(B, VictoryBPFunctionLibrary_eventString__CombineStrings_Multi_Parms), 0x0010000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(A, VictoryBPFunctionLibrary_eventString__CombineStrings_Multi_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CommutativeAssociativeBinaryOperator"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("concatenate append"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Separator is always a space"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_String__ExplodeString()
	{
		struct VictoryBPFunctionLibrary_eventString__ExplodeString_Parms
		{
			TArray<FString> OutputStrings;
			FString InputString;
			FString Separator;
			int32 limit;
			bool bTrimElements;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("String__ExplodeString"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventString__ExplodeString_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTrimElements, VictoryBPFunctionLibrary_eventString__ExplodeString_Parms, bool);
			UProperty* NewProp_bTrimElements = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTrimElements"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTrimElements, VictoryBPFunctionLibrary_eventString__ExplodeString_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bTrimElements, VictoryBPFunctionLibrary_eventString__ExplodeString_Parms), sizeof(bool), true);
			UProperty* NewProp_limit = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("limit"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(limit, VictoryBPFunctionLibrary_eventString__ExplodeString_Parms), 0x0010000000000080);
			UProperty* NewProp_Separator = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Separator"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Separator, VictoryBPFunctionLibrary_eventString__ExplodeString_Parms), 0x0010000000000080);
			UProperty* NewProp_InputString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InputString"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(InputString, VictoryBPFunctionLibrary_eventString__ExplodeString_Parms), 0x0010000000000080);
			UProperty* NewProp_OutputStrings = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutputStrings"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(OutputStrings, VictoryBPFunctionLibrary_eventString__ExplodeString_Parms), 0x0010000000000180);
			UProperty* NewProp_OutputStrings_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutputStrings, TEXT("OutputStrings"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("String"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bTrimElements"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_limit"), TEXT("0"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Separator"), TEXT(","));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Explode string"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("split explode string"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Contributed by: Mindfane\n\nSplit a string into an array of substrings based on the given delimitter.\nUnlike ParseIntoArray() function which expects single character delimitters, this function can accept a delimitter that is also a string.\n\n@param InputString - The string that is to be exploded.\n@param Separator - The delimitter that is used for splitting (multi character strings are allowed)\n@param limit - If greater than zero, returns only the first x strings. Otherwsie returns all the substrings\n@param bTrimElelements - If True, then each subsctring is processed and any leading or trailing whitespcaes are trimmed."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_StringConversion__GetFloatAsStringWithPrecision()
	{
		struct VictoryBPFunctionLibrary_eventStringConversion__GetFloatAsStringWithPrecision_Parms
		{
			float TheFloat;
			FString TheString;
			int32 Precision;
			bool IncludeLeadingZero;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("StringConversion__GetFloatAsStringWithPrecision"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventStringConversion__GetFloatAsStringWithPrecision_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IncludeLeadingZero, VictoryBPFunctionLibrary_eventStringConversion__GetFloatAsStringWithPrecision_Parms, bool);
			UProperty* NewProp_IncludeLeadingZero = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IncludeLeadingZero"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IncludeLeadingZero, VictoryBPFunctionLibrary_eventStringConversion__GetFloatAsStringWithPrecision_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(IncludeLeadingZero, VictoryBPFunctionLibrary_eventStringConversion__GetFloatAsStringWithPrecision_Parms), sizeof(bool), true);
			UProperty* NewProp_Precision = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Precision"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Precision, VictoryBPFunctionLibrary_eventStringConversion__GetFloatAsStringWithPrecision_Parms), 0x0010000000000080);
			UProperty* NewProp_TheString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TheString"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(TheString, VictoryBPFunctionLibrary_eventStringConversion__GetFloatAsStringWithPrecision_Parms), 0x0010000000000180);
			UProperty* NewProp_TheFloat = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TheFloat"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TheFloat, VictoryBPFunctionLibrary_eventStringConversion__GetFloatAsStringWithPrecision_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_IncludeLeadingZero"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Precision"), TEXT("2"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the float as a String with Precision, Precision 0 = no decimal value. Precison 1 = 1 decimal place. The re-precisioned result is rounded appropriately."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_StringIsEmpty()
	{
		struct VictoryBPFunctionLibrary_eventStringIsEmpty_Parms
		{
			FString Target;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("StringIsEmpty"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventStringIsEmpty_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventStringIsEmpty_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventStringIsEmpty_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventStringIsEmpty_Parms), sizeof(bool), true);
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Target, VictoryBPFunctionLibrary_eventStringIsEmpty_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VictoryBPLibrary|Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("IsEmpty"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_Target, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Text_IsNumeric()
	{
		struct VictoryBPFunctionLibrary_eventText_IsNumeric_Parms
		{
			FText Text;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Text_IsNumeric"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventText_IsNumeric_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventText_IsNumeric_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventText_IsNumeric_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventText_IsNumeric_Parms), sizeof(bool), true);
			UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Text"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(Text, VictoryBPFunctionLibrary_eventText_IsNumeric_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_Text, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Text_ToFloat()
	{
		struct VictoryBPFunctionLibrary_eventText_ToFloat_Parms
		{
			FText Text;
			bool UseDotForThousands;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Text_ToFloat"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventText_ToFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventText_ToFloat_Parms), 0x0010000000000580);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(UseDotForThousands, VictoryBPFunctionLibrary_eventText_ToFloat_Parms, bool);
			UProperty* NewProp_UseDotForThousands = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UseDotForThousands"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UseDotForThousands, VictoryBPFunctionLibrary_eventText_ToFloat_Parms), 0x0010040000000080, CPP_BOOL_PROPERTY_BITMASK(UseDotForThousands, VictoryBPFunctionLibrary_eventText_ToFloat_Parms), sizeof(bool), true);
			UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Text"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(Text, VictoryBPFunctionLibrary_eventText_ToFloat_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("1"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_UseDotForThousands"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_Text, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Text_ToInt()
	{
		struct VictoryBPFunctionLibrary_eventText_ToInt_Parms
		{
			FText Text;
			bool UseDotForThousands;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Text_ToInt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventText_ToInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventText_ToInt_Parms), 0x0010000000000580);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(UseDotForThousands, VictoryBPFunctionLibrary_eventText_ToInt_Parms, bool);
			UProperty* NewProp_UseDotForThousands = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UseDotForThousands"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UseDotForThousands, VictoryBPFunctionLibrary_eventText_ToInt_Parms), 0x0010040000000080, CPP_BOOL_PROPERTY_BITMASK(UseDotForThousands, VictoryBPFunctionLibrary_eventText_ToInt_Parms), sizeof(bool), true);
			UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Text"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(Text, VictoryBPFunctionLibrary_eventText_ToInt_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("1"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_UseDotForThousands"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_Text, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_TraceData__GetTraceDataFromCharacterSocket()
	{
		struct VictoryBPFunctionLibrary_eventTraceData__GetTraceDataFromCharacterSocket_Parms
		{
			FVector TraceStart;
			FVector TraceEnd;
			AActor* TheCharacter;
			FRotator TraceRotation;
			float TraceLength;
			FName Socket;
			bool DrawTraceData;
			FLinearColor TraceDataColor;
			float TraceDataThickness;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TraceData__GetTraceDataFromCharacterSocket"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventTraceData__GetTraceDataFromCharacterSocket_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventTraceData__GetTraceDataFromCharacterSocket_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventTraceData__GetTraceDataFromCharacterSocket_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventTraceData__GetTraceDataFromCharacterSocket_Parms), sizeof(bool), true);
			UProperty* NewProp_TraceDataThickness = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceDataThickness"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TraceDataThickness, VictoryBPFunctionLibrary_eventTraceData__GetTraceDataFromCharacterSocket_Parms), 0x0010000000000080);
			UProperty* NewProp_TraceDataColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceDataColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TraceDataColor, VictoryBPFunctionLibrary_eventTraceData__GetTraceDataFromCharacterSocket_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FLinearColor());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(DrawTraceData, VictoryBPFunctionLibrary_eventTraceData__GetTraceDataFromCharacterSocket_Parms, bool);
			UProperty* NewProp_DrawTraceData = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawTraceData"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DrawTraceData, VictoryBPFunctionLibrary_eventTraceData__GetTraceDataFromCharacterSocket_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(DrawTraceData, VictoryBPFunctionLibrary_eventTraceData__GetTraceDataFromCharacterSocket_Parms), sizeof(bool), true);
			UProperty* NewProp_Socket = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Socket"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(Socket, VictoryBPFunctionLibrary_eventTraceData__GetTraceDataFromCharacterSocket_Parms), 0x0010000000000080);
			UProperty* NewProp_TraceLength = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceLength"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TraceLength, VictoryBPFunctionLibrary_eventTraceData__GetTraceDataFromCharacterSocket_Parms), 0x0010000000000080);
			UProperty* NewProp_TraceRotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TraceRotation, VictoryBPFunctionLibrary_eventTraceData__GetTraceDataFromCharacterSocket_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_TheCharacter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TheCharacter"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(TheCharacter, VictoryBPFunctionLibrary_eventTraceData__GetTraceDataFromCharacterSocket_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_TraceEnd = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceEnd"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TraceEnd, VictoryBPFunctionLibrary_eventTraceData__GetTraceDataFromCharacterSocket_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_TraceStart = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceStart"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TraceStart, VictoryBPFunctionLibrary_eventTraceData__GetTraceDataFromCharacterSocket_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Traces"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_DrawTraceData"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Socket"), TEXT("SocketName"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_TraceDataColor"), TEXT("(R=1.000000,G=0.000000,B=0.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_TraceDataThickness"), TEXT("7.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_TraceLength"), TEXT("10240.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Does Not Do A Trace, But Obtains the Start and End for doing a Trace:\\n\\nTakes in an actor (for convenience) and tries to cast it to Character. Takes in a socket name to find on the Character's Mesh component, the socket location will be the start of the trace.\\n\\nAlso takes in the Angle / Rotator and the length of the trace you want to do. Option to draw the trace with variable thickness as it occurs.\\n\\nReturns what the Trace Start and End should be so you can plug these into any existing trace node you want.\\n\\nRequires: Character Mesh Component must be valid. Returns False if trace could not be done"));
			MetaData->SetValue(NewProp_TraceRotation, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_TraceData__GetTraceDataFromSkeletalMeshSocket()
	{
		struct VictoryBPFunctionLibrary_eventTraceData__GetTraceDataFromSkeletalMeshSocket_Parms
		{
			FVector TraceStart;
			FVector TraceEnd;
			USkeletalMeshComponent* Mesh;
			FRotator TraceRotation;
			float TraceLength;
			FName Socket;
			bool DrawTraceData;
			FLinearColor TraceDataColor;
			float TraceDataThickness;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TraceData__GetTraceDataFromSkeletalMeshSocket"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventTraceData__GetTraceDataFromSkeletalMeshSocket_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventTraceData__GetTraceDataFromSkeletalMeshSocket_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventTraceData__GetTraceDataFromSkeletalMeshSocket_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventTraceData__GetTraceDataFromSkeletalMeshSocket_Parms), sizeof(bool), true);
			UProperty* NewProp_TraceDataThickness = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceDataThickness"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TraceDataThickness, VictoryBPFunctionLibrary_eventTraceData__GetTraceDataFromSkeletalMeshSocket_Parms), 0x0010000000000080);
			UProperty* NewProp_TraceDataColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceDataColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TraceDataColor, VictoryBPFunctionLibrary_eventTraceData__GetTraceDataFromSkeletalMeshSocket_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FLinearColor());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(DrawTraceData, VictoryBPFunctionLibrary_eventTraceData__GetTraceDataFromSkeletalMeshSocket_Parms, bool);
			UProperty* NewProp_DrawTraceData = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawTraceData"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DrawTraceData, VictoryBPFunctionLibrary_eventTraceData__GetTraceDataFromSkeletalMeshSocket_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(DrawTraceData, VictoryBPFunctionLibrary_eventTraceData__GetTraceDataFromSkeletalMeshSocket_Parms), sizeof(bool), true);
			UProperty* NewProp_Socket = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Socket"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(Socket, VictoryBPFunctionLibrary_eventTraceData__GetTraceDataFromSkeletalMeshSocket_Parms), 0x0010000000000080);
			UProperty* NewProp_TraceLength = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceLength"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TraceLength, VictoryBPFunctionLibrary_eventTraceData__GetTraceDataFromSkeletalMeshSocket_Parms), 0x0010000000000080);
			UProperty* NewProp_TraceRotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TraceRotation, VictoryBPFunctionLibrary_eventTraceData__GetTraceDataFromSkeletalMeshSocket_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Mesh = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Mesh"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Mesh, VictoryBPFunctionLibrary_eventTraceData__GetTraceDataFromSkeletalMeshSocket_Parms), 0x0010000000080080, Z_Construct_UClass_USkeletalMeshComponent_NoRegister());
			UProperty* NewProp_TraceEnd = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceEnd"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TraceEnd, VictoryBPFunctionLibrary_eventTraceData__GetTraceDataFromSkeletalMeshSocket_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_TraceStart = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceStart"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TraceStart, VictoryBPFunctionLibrary_eventTraceData__GetTraceDataFromSkeletalMeshSocket_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Traces"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_DrawTraceData"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Socket"), TEXT("SocketName"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_TraceDataColor"), TEXT("(R=1.000000,G=0.000000,B=0.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_TraceDataThickness"), TEXT("7.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_TraceLength"), TEXT("10240.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Does Not Do A Trace, But Obtains the Start and End for doing a Trace:\\n\\nTakes in a Skeletal Mesh Component and a socket name to trace from. Also takes in the Angle / Rotator and the length of the trace you want to do.\\n\\nOption to draw the trace as a variable thickness line\\n\\nReturns what the Trace Start and End should be so you can plug these into any existing trace node you want.\\n\\n Requires: Mesh must be valid. Returns False if trace could not be done"));
			MetaData->SetValue(NewProp_TraceRotation, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_Mesh, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestBone()
	{
		struct VictoryBPFunctionLibrary_eventTraces__CharacterMeshTrace___ClosestBone_Parms
		{
			AActor* TraceOwner;
			FVector TraceStart;
			FVector TraceEnd;
			FVector OutImpactPoint;
			FVector OutImpactNormal;
			FName ClosestBoneName;
			FVector ClosestBoneLocation;
			bool IsValid;
			AActor* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Traces__CharacterMeshTrace___ClosestBone"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventTraces__CharacterMeshTrace___ClosestBone_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventTraces__CharacterMeshTrace___ClosestBone_Parms), 0x0010000000000580, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsValid, VictoryBPFunctionLibrary_eventTraces__CharacterMeshTrace___ClosestBone_Parms, bool);
			UProperty* NewProp_IsValid = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IsValid"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsValid, VictoryBPFunctionLibrary_eventTraces__CharacterMeshTrace___ClosestBone_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(IsValid, VictoryBPFunctionLibrary_eventTraces__CharacterMeshTrace___ClosestBone_Parms), sizeof(bool), true);
			UProperty* NewProp_ClosestBoneLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ClosestBoneLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ClosestBoneLocation, VictoryBPFunctionLibrary_eventTraces__CharacterMeshTrace___ClosestBone_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_ClosestBoneName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ClosestBoneName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ClosestBoneName, VictoryBPFunctionLibrary_eventTraces__CharacterMeshTrace___ClosestBone_Parms), 0x0010000000000180);
			UProperty* NewProp_OutImpactNormal = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutImpactNormal"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OutImpactNormal, VictoryBPFunctionLibrary_eventTraces__CharacterMeshTrace___ClosestBone_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_OutImpactPoint = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutImpactPoint"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OutImpactPoint, VictoryBPFunctionLibrary_eventTraces__CharacterMeshTrace___ClosestBone_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_TraceEnd = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceEnd"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TraceEnd, VictoryBPFunctionLibrary_eventTraces__CharacterMeshTrace___ClosestBone_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_TraceStart = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceStart"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TraceStart, VictoryBPFunctionLibrary_eventTraces__CharacterMeshTrace___ClosestBone_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_TraceOwner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(TraceOwner, VictoryBPFunctionLibrary_eventTraces__CharacterMeshTrace___ClosestBone_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Traces"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Does a simple line trace given Trace Start and End, and if a Character is hit by the trace, then a component trace is performed on that character's mesh. Trace Owner is ignored when doing the trace.\\n\\nReturns the Character that was hit, as an Actor, as well as the name of the bone that was closest to the impact point of the trace. Also returns the impact point itself as well as the impact normal.\\n\\nUsing component trace ensures accuracy for testing against bones and sockets.\\n\\nIsValid: Will be true only if the component trace also hit someting. But the Returned Actor will contain an actor if any actor at all was hit by the simple trace."));
			MetaData->SetValue(NewProp_TraceEnd, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_TraceStart, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestSocket()
	{
		struct VictoryBPFunctionLibrary_eventTraces__CharacterMeshTrace___ClosestSocket_Parms
		{
			UObject* WorldContextObject;
			const AActor* TraceOwner;
			FVector TraceStart;
			FVector TraceEnd;
			FVector OutImpactPoint;
			FVector OutImpactNormal;
			FName ClosestSocketName;
			FVector SocketLocation;
			bool IsValid;
			AActor* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Traces__CharacterMeshTrace___ClosestSocket"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventTraces__CharacterMeshTrace___ClosestSocket_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventTraces__CharacterMeshTrace___ClosestSocket_Parms), 0x0010000000000580, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsValid, VictoryBPFunctionLibrary_eventTraces__CharacterMeshTrace___ClosestSocket_Parms, bool);
			UProperty* NewProp_IsValid = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IsValid"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsValid, VictoryBPFunctionLibrary_eventTraces__CharacterMeshTrace___ClosestSocket_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(IsValid, VictoryBPFunctionLibrary_eventTraces__CharacterMeshTrace___ClosestSocket_Parms), sizeof(bool), true);
			UProperty* NewProp_SocketLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SocketLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SocketLocation, VictoryBPFunctionLibrary_eventTraces__CharacterMeshTrace___ClosestSocket_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_ClosestSocketName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ClosestSocketName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ClosestSocketName, VictoryBPFunctionLibrary_eventTraces__CharacterMeshTrace___ClosestSocket_Parms), 0x0010000000000180);
			UProperty* NewProp_OutImpactNormal = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutImpactNormal"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OutImpactNormal, VictoryBPFunctionLibrary_eventTraces__CharacterMeshTrace___ClosestSocket_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_OutImpactPoint = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutImpactPoint"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OutImpactPoint, VictoryBPFunctionLibrary_eventTraces__CharacterMeshTrace___ClosestSocket_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_TraceEnd = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceEnd"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TraceEnd, VictoryBPFunctionLibrary_eventTraces__CharacterMeshTrace___ClosestSocket_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_TraceStart = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceStart"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TraceStart, VictoryBPFunctionLibrary_eventTraces__CharacterMeshTrace___ClosestSocket_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_TraceOwner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(TraceOwner, VictoryBPFunctionLibrary_eventTraces__CharacterMeshTrace___ClosestSocket_Parms), 0x0010000000000082, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, VictoryBPFunctionLibrary_eventTraces__CharacterMeshTrace___ClosestSocket_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Traces"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Does a simple line trace given Trace Start and End, and if a Character is hit by the trace, then a component trace is performed on that character's mesh. Returns the name of the socket that was closest to the impact point of the trace. Also returns the impact point itself as well as the impact normal. Also returns the Socket Location. Using component trace ensures accuracy for testing against bones and sockets."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
			MetaData->SetValue(NewProp_TraceEnd, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_TraceStart, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_TraceOwner, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_TransformVectorToActorSpace()
	{
		struct VictoryBPFunctionLibrary_eventTransformVectorToActorSpace_Parms
		{
			AActor* Actor;
			FVector InVector;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TransformVectorToActorSpace"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C20401, 65535, sizeof(VictoryBPFunctionLibrary_eventTransformVectorToActorSpace_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventTransformVectorToActorSpace_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_InVector = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVector"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InVector, VictoryBPFunctionLibrary_eventTransformVectorToActorSpace_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Actor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Actor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Actor, VictoryBPFunctionLibrary_eventTransformVectorToActorSpace_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Transform"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_InVector, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_TransformVectorToActorSpaceAngle()
	{
		struct VictoryBPFunctionLibrary_eventTransformVectorToActorSpaceAngle_Parms
		{
			AActor* Actor;
			FVector InVector;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TransformVectorToActorSpaceAngle"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C20401, 65535, sizeof(VictoryBPFunctionLibrary_eventTransformVectorToActorSpaceAngle_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventTransformVectorToActorSpaceAngle_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_InVector = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVector"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InVector, VictoryBPFunctionLibrary_eventTransformVectorToActorSpaceAngle_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Actor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Actor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Actor, VictoryBPFunctionLibrary_eventTransformVectorToActorSpaceAngle_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Transform"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_InVector, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_UnloadStreamingLevel()
	{
		struct VictoryBPFunctionLibrary_eventUnloadStreamingLevel_Parms
		{
			ULevelStreamingKismet* LevelInstance;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("UnloadStreamingLevel"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventUnloadStreamingLevel_Parms));
			UProperty* NewProp_LevelInstance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LevelInstance"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(LevelInstance, VictoryBPFunctionLibrary_eventUnloadStreamingLevel_Parms), 0x0010000000000080, Z_Construct_UClass_ULevelStreamingKismet_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LevelStreaming"));
			MetaData->SetValue(ReturnFunction, TEXT("keywords"), TEXT("remove"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_UTCToLocal()
	{
		struct VictoryBPFunctionLibrary_eventUTCToLocal_Parms
		{
			FDateTime UTCTime;
			FDateTime LocalTime;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("UTCToLocal"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventUTCToLocal_Parms));
			UProperty* NewProp_LocalTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LocalTime"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LocalTime, VictoryBPFunctionLibrary_eventUTCToLocal_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FDateTime());
			UProperty* NewProp_UTCTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UTCTime"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(UTCTime, VictoryBPFunctionLibrary_eventUTCToLocal_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FDateTime());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rama Save System|File IO"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_UTCTime, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Vector2DInterpTo()
	{
		struct VictoryBPFunctionLibrary_eventVector2DInterpTo_Parms
		{
			FVector2D Current;
			FVector2D Target;
			float DeltaTime;
			float InterpSpeed;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Vector2DInterpTo"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(VictoryBPFunctionLibrary_eventVector2DInterpTo_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventVector2DInterpTo_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_InterpSpeed = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InterpSpeed"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InterpSpeed, VictoryBPFunctionLibrary_eventVector2DInterpTo_Parms), 0x0010000000000080);
			UProperty* NewProp_DeltaTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeltaTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DeltaTime, VictoryBPFunctionLibrary_eventVector2DInterpTo_Parms), 0x0010000000000080);
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Target, VictoryBPFunctionLibrary_eventVector2DInterpTo_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Current = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Current"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Current, VictoryBPFunctionLibrary_eventVector2DInterpTo_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Interpolation"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("position"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("UFUNCTION(BlueprintPure, Category=\"Math|Interpolation\", meta=(Keywords=\"position\"))"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Vector2DInterpTo_Constant()
	{
		struct VictoryBPFunctionLibrary_eventVector2DInterpTo_Constant_Parms
		{
			FVector2D Current;
			FVector2D Target;
			float DeltaTime;
			float InterpSpeed;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Vector2DInterpTo_Constant"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(VictoryBPFunctionLibrary_eventVector2DInterpTo_Constant_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventVector2DInterpTo_Constant_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_InterpSpeed = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InterpSpeed"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InterpSpeed, VictoryBPFunctionLibrary_eventVector2DInterpTo_Constant_Parms), 0x0010000000000080);
			UProperty* NewProp_DeltaTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeltaTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DeltaTime, VictoryBPFunctionLibrary_eventVector2DInterpTo_Constant_Parms), 0x0010000000000080);
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Target, VictoryBPFunctionLibrary_eventVector2DInterpTo_Constant_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Current = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Current"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Current, VictoryBPFunctionLibrary_eventVector2DInterpTo_Constant_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Math"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("position"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Tries to reach Target at a constant rate.\n\n@param               Current                 Actual position\n@param               Target                  Target position\n@param               DeltaTime               Time since last tick\n@param               InterpSpeed             Interpolation speed\n@return              New interpolated position\n        //UFUNCTION(BlueprintPure, Category=\"Math|Interpolation\", meta=(Keywords=\"position\"))"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VerticalFOV()
	{
		struct VictoryBPFunctionLibrary_eventVerticalFOV_Parms
		{
			float HorizontalFOV;
			float AspectRatio;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VerticalFOV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventVerticalFOV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventVerticalFOV_Parms), 0x0010000000000580);
			UProperty* NewProp_AspectRatio = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AspectRatio"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(AspectRatio, VictoryBPFunctionLibrary_eventVerticalFOV_Parms), 0x0010000000000080);
			UProperty* NewProp_HorizontalFOV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HorizontalFOV"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(HorizontalFOV, VictoryBPFunctionLibrary_eventVerticalFOV_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VictoryBPLibrary|Game|Viewport"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Helper function to calculate vertical FOV from horizontal FOV and aspect ratio.\nUseful to for determining distance from camera fit in-game objects to the height of the screen."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_AI_MoveToWithFilter()
	{
		struct VictoryBPFunctionLibrary_eventVictory_AI_MoveToWithFilter_Parms
		{
			APawn* Pawn;
			FVector Dest;
			TSubclassOf<UNavigationQueryFilter>  FilterClass;
			float AcceptanceRadius;
			bool bProjectDestinationToNavigation;
			bool bStopOnOverlap;
			bool bCanStrafe;
			TEnumAsByte<EPathFollowingRequestResult::Type> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Victory_AI_MoveToWithFilter"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictory_AI_MoveToWithFilter_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventVictory_AI_MoveToWithFilter_Parms), 0x0010000000000580, Z_Construct_UEnum_AIModule_EPathFollowingRequestResult());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCanStrafe, VictoryBPFunctionLibrary_eventVictory_AI_MoveToWithFilter_Parms, bool);
			UProperty* NewProp_bCanStrafe = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bCanStrafe"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCanStrafe, VictoryBPFunctionLibrary_eventVictory_AI_MoveToWithFilter_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bCanStrafe, VictoryBPFunctionLibrary_eventVictory_AI_MoveToWithFilter_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bStopOnOverlap, VictoryBPFunctionLibrary_eventVictory_AI_MoveToWithFilter_Parms, bool);
			UProperty* NewProp_bStopOnOverlap = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bStopOnOverlap"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bStopOnOverlap, VictoryBPFunctionLibrary_eventVictory_AI_MoveToWithFilter_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bStopOnOverlap, VictoryBPFunctionLibrary_eventVictory_AI_MoveToWithFilter_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bProjectDestinationToNavigation, VictoryBPFunctionLibrary_eventVictory_AI_MoveToWithFilter_Parms, bool);
			UProperty* NewProp_bProjectDestinationToNavigation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bProjectDestinationToNavigation"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bProjectDestinationToNavigation, VictoryBPFunctionLibrary_eventVictory_AI_MoveToWithFilter_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bProjectDestinationToNavigation, VictoryBPFunctionLibrary_eventVictory_AI_MoveToWithFilter_Parms), sizeof(bool), true);
			UProperty* NewProp_AcceptanceRadius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AcceptanceRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(AcceptanceRadius, VictoryBPFunctionLibrary_eventVictory_AI_MoveToWithFilter_Parms), 0x0010000000000080);
			UProperty* NewProp_FilterClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FilterClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(FilterClass, VictoryBPFunctionLibrary_eventVictory_AI_MoveToWithFilter_Parms), 0x0014000000000080, Z_Construct_UClass_UNavigationQueryFilter_NoRegister(), UClass::StaticClass());
			UProperty* NewProp_Dest = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Dest"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Dest, VictoryBPFunctionLibrary_eventVictory_AI_MoveToWithFilter_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Pawn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Pawn"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Pawn, VictoryBPFunctionLibrary_eventVictory_AI_MoveToWithFilter_Parms), 0x0010000000000080, Z_Construct_UClass_APawn_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|AI Move To"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_AcceptanceRadius"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bCanStrafe"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bProjectDestinationToNavigation"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bStopOnOverlap"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Move to Location with optional Query Filter!\n\n1. Create Custon Nav Area Classes.\n\n2. Use Nav Modifier Volumes to apply custom area class data within the level, then\n\n3. Create Query Filters which alter/exclude those custom nav areas.\n\n4. Can then choose to use the filters per character or even per Move To using this node.\n\n<3 Rama\n\n@param FilterClass - Allows different types of units to path in different ways all the time, or path differently per Move To using this node!\n@param bProjectDestinationToNavigation - Whether to attempt to find a nearby point on the nav mesh below/above/close to the supplied point. Uses the Agent's Nav Extent for the projection\n@param bStopOnOverlap - Add pawn's radius to AcceptanceRadius\n@param bCanStrafe - Set focus related flag: bAllowStrafe\n@return Whether the Pawn's AI Controller is valid and goal can be pathed to"));
			MetaData->SetValue(NewProp_Dest, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_Get_Pixel()
	{
		struct VictoryBPFunctionLibrary_eventVictory_Get_Pixel_Parms
		{
			TArray<FLinearColor> Pixels;
			int32 ImageHeight;
			int32 x;
			int32 y;
			FLinearColor FoundColor;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Victory_Get_Pixel"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictory_Get_Pixel_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventVictory_Get_Pixel_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventVictory_Get_Pixel_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventVictory_Get_Pixel_Parms), sizeof(bool), true);
			UProperty* NewProp_FoundColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FoundColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FoundColor, VictoryBPFunctionLibrary_eventVictory_Get_Pixel_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_y = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("y"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(y, VictoryBPFunctionLibrary_eventVictory_Get_Pixel_Parms), 0x0010000000000080);
			UProperty* NewProp_x = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("x"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(x, VictoryBPFunctionLibrary_eventVictory_Get_Pixel_Parms), 0x0010000000000080);
			UProperty* NewProp_ImageHeight = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ImageHeight"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ImageHeight, VictoryBPFunctionLibrary_eventVictory_Get_Pixel_Parms), 0x0010000000000080);
			UProperty* NewProp_Pixels = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Pixels"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Pixels, VictoryBPFunctionLibrary_eventVictory_Get_Pixel_Parms), 0x0010000008000182);
			UProperty* NewProp_Pixels_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Pixels, TEXT("Pixels"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Load Texture From File"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("image coordinate index map value"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Retrieve a pixel color value given the pixel array, the image height, and the coordinates. Returns false if the coordinates were not valid. Pixel coordinates start from upper left corner as 0,0. X= horizontal, Y = vertical"));
			MetaData->SetValue(NewProp_Pixels, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_GetGPUBrand()
	{
		struct VictoryBPFunctionLibrary_eventVictory_GetGPUBrand_Parms
		{
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Victory_GetGPUBrand"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictory_GetGPUBrand_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventVictory_GetGPUBrand_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|GPU"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("GPU  <3 Rama"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_GetGPUInfo()
	{
		struct VictoryBPFunctionLibrary_eventVictory_GetGPUInfo_Parms
		{
			FString DeviceDescription;
			FString Provider;
			FString DriverVersion;
			FString DriverDate;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Victory_GetGPUInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictory_GetGPUInfo_Parms));
			UProperty* NewProp_DriverDate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DriverDate"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(DriverDate, VictoryBPFunctionLibrary_eventVictory_GetGPUInfo_Parms), 0x0010000000000180);
			UProperty* NewProp_DriverVersion = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DriverVersion"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(DriverVersion, VictoryBPFunctionLibrary_eventVictory_GetGPUInfo_Parms), 0x0010000000000180);
			UProperty* NewProp_Provider = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Provider"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Provider, VictoryBPFunctionLibrary_eventVictory_GetGPUInfo_Parms), 0x0010000000000180);
			UProperty* NewProp_DeviceDescription = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeviceDescription"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(DeviceDescription, VictoryBPFunctionLibrary_eventVictory_GetGPUInfo_Parms), 0x0010000000000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|GPU"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_GetGRHIAdapterName()
	{
		struct VictoryBPFunctionLibrary_eventVictory_GetGRHIAdapterName_Parms
		{
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Victory_GetGRHIAdapterName"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictory_GetGRHIAdapterName_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventVictory_GetGRHIAdapterName_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|GPU"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("GPU"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_GetPixelFromT2D()
	{
		struct VictoryBPFunctionLibrary_eventVictory_GetPixelFromT2D_Parms
		{
			UTexture2D* T2D;
			int32 X;
			int32 Y;
			FLinearColor PixelColor;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Victory_GetPixelFromT2D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictory_GetPixelFromT2D_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventVictory_GetPixelFromT2D_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventVictory_GetPixelFromT2D_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventVictory_GetPixelFromT2D_Parms), sizeof(bool), true);
			UProperty* NewProp_PixelColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PixelColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PixelColor, VictoryBPFunctionLibrary_eventVictory_GetPixelFromT2D_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_Y = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Y"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Y, VictoryBPFunctionLibrary_eventVictory_GetPixelFromT2D_Parms), 0x0010000000000080);
			UProperty* NewProp_X = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("X"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(X, VictoryBPFunctionLibrary_eventVictory_GetPixelFromT2D_Parms), 0x0010000000000080);
			UProperty* NewProp_T2D = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("T2D"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(T2D, VictoryBPFunctionLibrary_eventVictory_GetPixelFromT2D_Parms), 0x0010000000000080, Z_Construct_UClass_UTexture2D_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Load Texture From File"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("create image png jpg jpeg bmp bitmap ico icon exr icns"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("This will modify the original T2D to remove sRGB and change compression to VectorDisplacementMap to ensure accurate pixel reading. -Rama"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_GetPixelsArrayFromT2D()
	{
		struct VictoryBPFunctionLibrary_eventVictory_GetPixelsArrayFromT2D_Parms
		{
			UTexture2D* T2D;
			int32 TextureWidth;
			int32 TextureHeight;
			TArray<FLinearColor> PixelArray;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Victory_GetPixelsArrayFromT2D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictory_GetPixelsArrayFromT2D_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventVictory_GetPixelsArrayFromT2D_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventVictory_GetPixelsArrayFromT2D_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventVictory_GetPixelsArrayFromT2D_Parms), sizeof(bool), true);
			UProperty* NewProp_PixelArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PixelArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(PixelArray, VictoryBPFunctionLibrary_eventVictory_GetPixelsArrayFromT2D_Parms), 0x0010000000000180);
			UProperty* NewProp_PixelArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PixelArray, TEXT("PixelArray"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_TextureHeight = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TextureHeight"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(TextureHeight, VictoryBPFunctionLibrary_eventVictory_GetPixelsArrayFromT2D_Parms), 0x0010000000000180);
			UProperty* NewProp_TextureWidth = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TextureWidth"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(TextureWidth, VictoryBPFunctionLibrary_eventVictory_GetPixelsArrayFromT2D_Parms), 0x0010000000000180);
			UProperty* NewProp_T2D = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("T2D"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(T2D, VictoryBPFunctionLibrary_eventVictory_GetPixelsArrayFromT2D_Parms), 0x0010000000000080, Z_Construct_UClass_UTexture2D_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Load Texture From File"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("create image png jpg jpeg bmp bitmap ico icon exr icns"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("This will modify the original T2D to remove sRGB and change compression to VectorDisplacementMap to ensure accurate pixel reading. -Rama"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_GetStringFromOSClipboard()
	{
		struct VictoryBPFunctionLibrary_eventVictory_GetStringFromOSClipboard_Parms
		{
			FString FromClipboard;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Victory_GetStringFromOSClipboard"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictory_GetStringFromOSClipboard_Parms));
			UProperty* NewProp_FromClipboard = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FromClipboard"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(FromClipboard, VictoryBPFunctionLibrary_eventVictory_GetStringFromOSClipboard_Parms), 0x0010000000000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|String"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile()
	{
		struct VictoryBPFunctionLibrary_eventVictory_LoadTexture2D_FromFile_Parms
		{
			FString FullFilePath;
			EJoyImageFormats ImageFormat;
			bool IsValid;
			int32 Width;
			int32 Height;
			UTexture2D* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Victory_LoadTexture2D_FromFile"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictory_LoadTexture2D_FromFile_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventVictory_LoadTexture2D_FromFile_Parms), 0x0010000000000580, Z_Construct_UClass_UTexture2D_NoRegister());
			UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Height"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Height, VictoryBPFunctionLibrary_eventVictory_LoadTexture2D_FromFile_Parms), 0x0010000000000180);
			UProperty* NewProp_Width = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Width"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Width, VictoryBPFunctionLibrary_eventVictory_LoadTexture2D_FromFile_Parms), 0x0010000000000180);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsValid, VictoryBPFunctionLibrary_eventVictory_LoadTexture2D_FromFile_Parms, bool);
			UProperty* NewProp_IsValid = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IsValid"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsValid, VictoryBPFunctionLibrary_eventVictory_LoadTexture2D_FromFile_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(IsValid, VictoryBPFunctionLibrary_eventVictory_LoadTexture2D_FromFile_Parms), sizeof(bool), true);
			UProperty* NewProp_ImageFormat = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ImageFormat"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(ImageFormat, VictoryBPFunctionLibrary_eventVictory_LoadTexture2D_FromFile_Parms), 0x0010000000000080, Z_Construct_UEnum_VictoryBPLibrary_EJoyImageFormats());
			UProperty* NewProp_ImageFormat_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_ImageFormat, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_FullFilePath = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FullFilePath"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(FullFilePath, VictoryBPFunctionLibrary_eventVictory_LoadTexture2D_FromFile_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Load Texture From File"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("image png jpg jpeg bmp bitmap ico icon exr icns"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Load a Texture2D from a JPG,PNG,BMP,ICO,EXR,ICNS file! IsValid tells you if file path was valid or not. Enjoy! -Rama"));
			MetaData->SetValue(NewProp_FullFilePath, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels()
	{
		struct VictoryBPFunctionLibrary_eventVictory_LoadTexture2D_FromFile_Pixels_Parms
		{
			FString FullFilePath;
			EJoyImageFormats ImageFormat;
			bool IsValid;
			int32 Width;
			int32 Height;
			TArray<FLinearColor> OutPixels;
			UTexture2D* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Victory_LoadTexture2D_FromFile_Pixels"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictory_LoadTexture2D_FromFile_Pixels_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventVictory_LoadTexture2D_FromFile_Pixels_Parms), 0x0010000000000580, Z_Construct_UClass_UTexture2D_NoRegister());
			UProperty* NewProp_OutPixels = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutPixels"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(OutPixels, VictoryBPFunctionLibrary_eventVictory_LoadTexture2D_FromFile_Pixels_Parms), 0x0010000000000180);
			UProperty* NewProp_OutPixels_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutPixels, TEXT("OutPixels"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Height"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Height, VictoryBPFunctionLibrary_eventVictory_LoadTexture2D_FromFile_Pixels_Parms), 0x0010000000000180);
			UProperty* NewProp_Width = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Width"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Width, VictoryBPFunctionLibrary_eventVictory_LoadTexture2D_FromFile_Pixels_Parms), 0x0010000000000180);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsValid, VictoryBPFunctionLibrary_eventVictory_LoadTexture2D_FromFile_Pixels_Parms, bool);
			UProperty* NewProp_IsValid = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IsValid"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsValid, VictoryBPFunctionLibrary_eventVictory_LoadTexture2D_FromFile_Pixels_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(IsValid, VictoryBPFunctionLibrary_eventVictory_LoadTexture2D_FromFile_Pixels_Parms), sizeof(bool), true);
			UProperty* NewProp_ImageFormat = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ImageFormat"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(ImageFormat, VictoryBPFunctionLibrary_eventVictory_LoadTexture2D_FromFile_Pixels_Parms), 0x0010000000000080, Z_Construct_UEnum_VictoryBPLibrary_EJoyImageFormats());
			UProperty* NewProp_ImageFormat_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_ImageFormat, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_FullFilePath = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FullFilePath"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(FullFilePath, VictoryBPFunctionLibrary_eventVictory_LoadTexture2D_FromFile_Pixels_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Load Texture From File"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("image png jpg jpeg bmp bitmap ico icon exr icns"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Load a Texture2D from a JPG,PNG,BMP,ICO,EXR,ICNS file! IsValid tells you if file path was valid or not. Enjoy! -Rama"));
			MetaData->SetValue(NewProp_FullFilePath, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_SavePixels()
	{
		struct VictoryBPFunctionLibrary_eventVictory_SavePixels_Parms
		{
			FString FullFilePath;
			int32 Width;
			int32 Height;
			TArray<FLinearColor> ImagePixels;
			bool SaveAsBMP;
			bool sRGB;
			FString ErrorString;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Victory_SavePixels"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictory_SavePixels_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventVictory_SavePixels_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventVictory_SavePixels_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventVictory_SavePixels_Parms), sizeof(bool), true);
			UProperty* NewProp_ErrorString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ErrorString"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ErrorString, VictoryBPFunctionLibrary_eventVictory_SavePixels_Parms), 0x0010000000000180);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(sRGB, VictoryBPFunctionLibrary_eventVictory_SavePixels_Parms, bool);
			UProperty* NewProp_sRGB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("sRGB"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(sRGB, VictoryBPFunctionLibrary_eventVictory_SavePixels_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(sRGB, VictoryBPFunctionLibrary_eventVictory_SavePixels_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(SaveAsBMP, VictoryBPFunctionLibrary_eventVictory_SavePixels_Parms, bool);
			UProperty* NewProp_SaveAsBMP = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SaveAsBMP"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(SaveAsBMP, VictoryBPFunctionLibrary_eventVictory_SavePixels_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(SaveAsBMP, VictoryBPFunctionLibrary_eventVictory_SavePixels_Parms), sizeof(bool), true);
			UProperty* NewProp_ImagePixels = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ImagePixels"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ImagePixels, VictoryBPFunctionLibrary_eventVictory_SavePixels_Parms), 0x0010000008000182);
			UProperty* NewProp_ImagePixels_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ImagePixels, TEXT("ImagePixels"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Height"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Height, VictoryBPFunctionLibrary_eventVictory_SavePixels_Parms), 0x0010000000000080);
			UProperty* NewProp_Width = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Width"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Width, VictoryBPFunctionLibrary_eventVictory_SavePixels_Parms), 0x0010000000000080);
			UProperty* NewProp_FullFilePath = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FullFilePath"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(FullFilePath, VictoryBPFunctionLibrary_eventVictory_SavePixels_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Load Texture From File"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("create image png jpg jpeg bmp bitmap ico icon exr icns"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Save an array of pixels to disk as a PNG! It is very important that you supply the curret width and height of the image! Returns false if Width * Height != Array length or file could not be saved to the location specified. I return an ErrorString to clarify what the exact issue was. -Rama"));
			MetaData->SetValue(NewProp_ImagePixels, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_FullFilePath, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_SaveStringToOSClipboard()
	{
		struct VictoryBPFunctionLibrary_eventVictory_SaveStringToOSClipboard_Parms
		{
			FString ToClipboard;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Victory_SaveStringToOSClipboard"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictory_SaveStringToOSClipboard_Parms));
			UProperty* NewProp_ToClipboard = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ToClipboard"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ToClipboard, VictoryBPFunctionLibrary_eventVictory_SaveStringToOSClipboard_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|String"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_ToClipboard, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_SecondsToHoursMinutesSeconds()
	{
		struct VictoryBPFunctionLibrary_eventVictory_SecondsToHoursMinutesSeconds_Parms
		{
			float Seconds;
			bool TrimZeroes;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Victory_SecondsToHoursMinutesSeconds"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictory_SecondsToHoursMinutesSeconds_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventVictory_SecondsToHoursMinutesSeconds_Parms), 0x0010000000000580);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(TrimZeroes, VictoryBPFunctionLibrary_eventVictory_SecondsToHoursMinutesSeconds_Parms, bool);
			UProperty* NewProp_TrimZeroes = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TrimZeroes"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(TrimZeroes, VictoryBPFunctionLibrary_eventVictory_SecondsToHoursMinutesSeconds_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(TrimZeroes, VictoryBPFunctionLibrary_eventVictory_SecondsToHoursMinutesSeconds_Parms), sizeof(bool), true);
			UProperty* NewProp_Seconds = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Seconds"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Seconds, VictoryBPFunctionLibrary_eventVictory_SecondsToHoursMinutesSeconds_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("File BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_TrimZeroes"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Handy option to trim any extra 00: 's while keeping a base set of 00:ss as per user expectation. 00:05:30 will become 05:30. \x2665 Rama"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryAppendInline()
	{
		struct VictoryBPFunctionLibrary_eventVictoryAppendInline_Parms
		{
			FString String;
			FString ToAppend;
			FString Result;
			bool AppendNewline;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryAppendInline"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryAppendInline_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(AppendNewline, VictoryBPFunctionLibrary_eventVictoryAppendInline_Parms, bool);
			UProperty* NewProp_AppendNewline = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AppendNewline"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(AppendNewline, VictoryBPFunctionLibrary_eventVictoryAppendInline_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(AppendNewline, VictoryBPFunctionLibrary_eventVictoryAppendInline_Parms), sizeof(bool), true);
			UProperty* NewProp_Result = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Result"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Result, VictoryBPFunctionLibrary_eventVictoryAppendInline_Parms), 0x0010000000000180);
			UProperty* NewProp_ToAppend = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ToAppend"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ToAppend, VictoryBPFunctionLibrary_eventVictoryAppendInline_Parms), 0x0010000000000080);
			UProperty* NewProp_String = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("String"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(String, VictoryBPFunctionLibrary_eventVictoryAppendInline_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_AppendNewline"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("concatenate append"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_ToAppend, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryCreateProc()
	{
		struct VictoryBPFunctionLibrary_eventVictoryCreateProc_Parms
		{
			int32 ProcessId;
			FString FullPathOfProgramToRun;
			TArray<FString> CommandlineArgs;
			bool Detach;
			bool Hidden;
			int32 Priority;
			FString OptionalWorkingDirectory;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryCreateProc"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryCreateProc_Parms));
			UProperty* NewProp_OptionalWorkingDirectory = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OptionalWorkingDirectory"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(OptionalWorkingDirectory, VictoryBPFunctionLibrary_eventVictoryCreateProc_Parms), 0x0010000000000080);
			UProperty* NewProp_Priority = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Priority"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Priority, VictoryBPFunctionLibrary_eventVictoryCreateProc_Parms), 0x0010000000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Hidden, VictoryBPFunctionLibrary_eventVictoryCreateProc_Parms, bool);
			UProperty* NewProp_Hidden = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Hidden"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Hidden, VictoryBPFunctionLibrary_eventVictoryCreateProc_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(Hidden, VictoryBPFunctionLibrary_eventVictoryCreateProc_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Detach, VictoryBPFunctionLibrary_eventVictoryCreateProc_Parms, bool);
			UProperty* NewProp_Detach = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Detach"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Detach, VictoryBPFunctionLibrary_eventVictoryCreateProc_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(Detach, VictoryBPFunctionLibrary_eventVictoryCreateProc_Parms), sizeof(bool), true);
			UProperty* NewProp_CommandlineArgs = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CommandlineArgs"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(CommandlineArgs, VictoryBPFunctionLibrary_eventVictoryCreateProc_Parms), 0x0010000000000080);
			UProperty* NewProp_CommandlineArgs_Inner = new(EC_InternalUseOnlyConstructor, NewProp_CommandlineArgs, TEXT("CommandlineArgs"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_FullPathOfProgramToRun = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FullPathOfProgramToRun"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(FullPathOfProgramToRun, VictoryBPFunctionLibrary_eventVictoryCreateProc_Parms), 0x0010000000000080);
			UProperty* NewProp_ProcessId = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ProcessId"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ProcessId, VictoryBPFunctionLibrary_eventVictoryCreateProc_Parms), 0x0010000000000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|System"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Priority"), TEXT("0"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Launch a new process, if it is not set to be detached, UE4 will not fully close until the other process completes.\n\nThe new process id is returned!\n\nPriority options: -2 idle, -1 low, 0 normal, 1 high, 2 higher\n\n\x2665 Rama"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryDestructible_DestroyChunk()
	{
		struct VictoryBPFunctionLibrary_eventVictoryDestructible_DestroyChunk_Parms
		{
			UDestructibleComponent* DestructibleComp;
			int32 HitItem;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryDestructible_DestroyChunk"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryDestructible_DestroyChunk_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventVictoryDestructible_DestroyChunk_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventVictoryDestructible_DestroyChunk_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventVictoryDestructible_DestroyChunk_Parms), sizeof(bool), true);
			UProperty* NewProp_HitItem = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HitItem"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(HitItem, VictoryBPFunctionLibrary_eventVictoryDestructible_DestroyChunk_Parms), 0x0010000000000080);
			UProperty* NewProp_DestructibleComp = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DestructibleComp"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(DestructibleComp, VictoryBPFunctionLibrary_eventVictoryDestructible_DestroyChunk_Parms), 0x0010000000080080, Z_Construct_UClass_UDestructibleComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Physics"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("APEX Piece fracture damage PhysX Physics"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_DestructibleComp, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryFloatMinusEquals()
	{
		struct VictoryBPFunctionLibrary_eventVictoryFloatMinusEquals_Parms
		{
			float Float;
			float Sub;
			float FloatOut;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryFloatMinusEquals"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryFloatMinusEquals_Parms));
			UProperty* NewProp_FloatOut = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FloatOut"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FloatOut, VictoryBPFunctionLibrary_eventVictoryFloatMinusEquals_Parms), 0x0010000000000180);
			UProperty* NewProp_Sub = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Sub"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Sub, VictoryBPFunctionLibrary_eventVictoryFloatMinusEquals_Parms), 0x0010000000000080);
			UProperty* NewProp_Float = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Float"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Float, VictoryBPFunctionLibrary_eventVictoryFloatMinusEquals_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-="));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("decrement float"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Easily subtract from a float! <3 Rama"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryFloatPlusEquals()
	{
		struct VictoryBPFunctionLibrary_eventVictoryFloatPlusEquals_Parms
		{
			float Float;
			float Add;
			float FloatOut;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryFloatPlusEquals"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryFloatPlusEquals_Parms));
			UProperty* NewProp_FloatOut = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FloatOut"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FloatOut, VictoryBPFunctionLibrary_eventVictoryFloatPlusEquals_Parms), 0x0010000000000180);
			UProperty* NewProp_Add = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Add"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Add, VictoryBPFunctionLibrary_eventVictoryFloatPlusEquals_Parms), 0x0010000000000080);
			UProperty* NewProp_Float = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Float"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Float, VictoryBPFunctionLibrary_eventVictoryFloatPlusEquals_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+="));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("increment float"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Easily add to a float! <3 Rama"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetAllActionKeyBindings()
	{
		struct VictoryBPFunctionLibrary_eventVictoryGetAllActionKeyBindings_Parms
		{
			TArray<FVictoryInput> Bindings;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryGetAllActionKeyBindings"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryGetAllActionKeyBindings_Parms));
			UProperty* NewProp_Bindings = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Bindings"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Bindings, VictoryBPFunctionLibrary_eventVictoryGetAllActionKeyBindings_Parms), 0x0010000000000180);
			UProperty* NewProp_Bindings_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Bindings, TEXT("Bindings"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVictoryInput());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Key Rebinding"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetAllAxisAndActionMappingsForKey()
	{
		struct VictoryBPFunctionLibrary_eventVictoryGetAllAxisAndActionMappingsForKey_Parms
		{
			FKey Key;
			TArray<FVictoryInput> ActionBindings;
			TArray<FVictoryInputAxis> AxisBindings;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryGetAllAxisAndActionMappingsForKey"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryGetAllAxisAndActionMappingsForKey_Parms));
			UProperty* NewProp_AxisBindings = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AxisBindings"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(AxisBindings, VictoryBPFunctionLibrary_eventVictoryGetAllAxisAndActionMappingsForKey_Parms), 0x0010000000000180);
			UProperty* NewProp_AxisBindings_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AxisBindings, TEXT("AxisBindings"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVictoryInputAxis());
			UProperty* NewProp_ActionBindings = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActionBindings"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ActionBindings, VictoryBPFunctionLibrary_eventVictoryGetAllAxisAndActionMappingsForKey_Parms), 0x0010000000000180);
			UProperty* NewProp_ActionBindings_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActionBindings, TEXT("ActionBindings"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVictoryInput());
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Key, VictoryBPFunctionLibrary_eventVictoryGetAllAxisAndActionMappingsForKey_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FKey());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Key Rebinding"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetAllAxisKeyBindings()
	{
		struct VictoryBPFunctionLibrary_eventVictoryGetAllAxisKeyBindings_Parms
		{
			TArray<FVictoryInputAxis> Bindings;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryGetAllAxisKeyBindings"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryGetAllAxisKeyBindings_Parms));
			UProperty* NewProp_Bindings = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Bindings"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Bindings, VictoryBPFunctionLibrary_eventVictoryGetAllAxisKeyBindings_Parms), 0x0010000000000180);
			UProperty* NewProp_Bindings_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Bindings, TEXT("Bindings"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVictoryInputAxis());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Key Rebinding"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetApplicationName()
	{
		struct VictoryBPFunctionLibrary_eventVictoryGetApplicationName_Parms
		{
			int32 ProcessId;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryGetApplicationName"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryGetApplicationName_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventVictoryGetApplicationName_Parms), 0x0010000000000580);
			UProperty* NewProp_ProcessId = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ProcessId"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ProcessId, VictoryBPFunctionLibrary_eventVictoryGetApplicationName_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|System"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("You can obtain ProcessID from processes you initiate via VictoryCreateProc"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Bool()
	{
		struct VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Bool_Parms
		{
			FString SectionName;
			FString VariableName;
			bool IsValid;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryGetCustomConfigVar_Bool"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Bool_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Bool_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Bool_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Bool_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsValid, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Bool_Parms, bool);
			UProperty* NewProp_IsValid = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IsValid"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsValid, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Bool_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(IsValid, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Bool_Parms), sizeof(bool), true);
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Bool_Parms), 0x0010000000000080);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Bool_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Custom Config Vars!"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get Custom Config Var! These are stored in Saved/Config/Windows/Game.ini"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Color()
	{
		struct VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Color_Parms
		{
			FString SectionName;
			FString VariableName;
			bool IsValid;
			FLinearColor ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryGetCustomConfigVar_Color"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Color_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Color_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FLinearColor());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsValid, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Color_Parms, bool);
			UProperty* NewProp_IsValid = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IsValid"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsValid, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Color_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(IsValid, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Color_Parms), sizeof(bool), true);
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Color_Parms), 0x0010000000000080);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Color_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Custom Config Vars!"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get Custom Config Var! These are stored in Saved/Config/Windows/Game.ini"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Float()
	{
		struct VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Float_Parms
		{
			FString SectionName;
			FString VariableName;
			bool IsValid;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryGetCustomConfigVar_Float"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Float_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Float_Parms), 0x0010000000000580);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsValid, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Float_Parms, bool);
			UProperty* NewProp_IsValid = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IsValid"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsValid, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Float_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(IsValid, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Float_Parms), sizeof(bool), true);
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Float_Parms), 0x0010000000000080);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Float_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Custom Config Vars!"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get Custom Config Var! These are stored in Saved/Config/Windows/Game.ini"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Int()
	{
		struct VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Int_Parms
		{
			FString SectionName;
			FString VariableName;
			bool IsValid;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryGetCustomConfigVar_Int"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Int_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Int_Parms), 0x0010000000000580);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsValid, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Int_Parms, bool);
			UProperty* NewProp_IsValid = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IsValid"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsValid, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Int_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(IsValid, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Int_Parms), sizeof(bool), true);
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Int_Parms), 0x0010000000000080);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Int_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Custom Config Vars!"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get Custom Config Var! These are stored in Saved/Config/Windows/Game.ini"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Rotator()
	{
		struct VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Rotator_Parms
		{
			FString SectionName;
			FString VariableName;
			bool IsValid;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryGetCustomConfigVar_Rotator"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Rotator_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Rotator_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FRotator());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsValid, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Rotator_Parms, bool);
			UProperty* NewProp_IsValid = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IsValid"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsValid, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Rotator_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(IsValid, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Rotator_Parms), sizeof(bool), true);
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Rotator_Parms), 0x0010000000000080);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Rotator_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Custom Config Vars!"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get Custom Config Var! These are stored in Saved/Config/Windows/Game.ini"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetCustomConfigVar_String()
	{
		struct VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_String_Parms
		{
			FString SectionName;
			FString VariableName;
			bool IsValid;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryGetCustomConfigVar_String"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_String_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_String_Parms), 0x0010000000000580);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsValid, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_String_Parms, bool);
			UProperty* NewProp_IsValid = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IsValid"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsValid, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_String_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(IsValid, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_String_Parms), sizeof(bool), true);
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_String_Parms), 0x0010000000000080);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_String_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Custom Config Vars!"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get Custom Config Var! These are stored in Saved/Config/Windows/Game.ini"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector()
	{
		struct VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Vector_Parms
		{
			FString SectionName;
			FString VariableName;
			bool IsValid;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryGetCustomConfigVar_Vector"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Vector_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Vector_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsValid, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Vector_Parms, bool);
			UProperty* NewProp_IsValid = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IsValid"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsValid, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Vector_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(IsValid, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Vector_Parms), sizeof(bool), true);
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Vector_Parms), 0x0010000000000080);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Vector_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Custom Config Vars!"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get Custom Config Var! These are stored in Saved/Config/Windows/Game.ini"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector2D()
	{
		struct VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Vector2D_Parms
		{
			FString SectionName;
			FString VariableName;
			bool IsValid;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryGetCustomConfigVar_Vector2D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Vector2D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Vector2D_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector2D());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsValid, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Vector2D_Parms, bool);
			UProperty* NewProp_IsValid = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IsValid"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsValid, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Vector2D_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(IsValid, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Vector2D_Parms), sizeof(bool), true);
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Vector2D_Parms), 0x0010000000000080);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, VictoryBPFunctionLibrary_eventVictoryGetCustomConfigVar_Vector2D_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Custom Config Vars!"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetSoundVolume()
	{
		struct VictoryBPFunctionLibrary_eventVictoryGetSoundVolume_Parms
		{
			USoundClass* SoundClassObject;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryGetSoundVolume"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryGetSoundVolume_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventVictoryGetSoundVolume_Parms), 0x0010000000000580);
			UProperty* NewProp_SoundClassObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SoundClassObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SoundClassObject, VictoryBPFunctionLibrary_eventVictoryGetSoundVolume_Parms), 0x0010000000000080, Z_Construct_UClass_USoundClass_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Sound"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get Current Sound Volume! Returns -1 if sound class was not found"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetVictoryInput()
	{
		struct VictoryBPFunctionLibrary_eventVictoryGetVictoryInput_Parms
		{
			FKeyEvent KeyEvent;
			FVictoryInput ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryGetVictoryInput"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryGetVictoryInput_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventVictoryGetVictoryInput_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVictoryInput());
			UProperty* NewProp_KeyEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("KeyEvent"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(KeyEvent, VictoryBPFunctionLibrary_eventVictoryGetVictoryInput_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FKeyEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Key Rebinding"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Action Mapping"));
			MetaData->SetValue(NewProp_KeyEvent, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetVictoryInputAxis()
	{
		struct VictoryBPFunctionLibrary_eventVictoryGetVictoryInputAxis_Parms
		{
			FKeyEvent KeyEvent;
			FVictoryInputAxis ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryGetVictoryInputAxis"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryGetVictoryInputAxis_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventVictoryGetVictoryInputAxis_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVictoryInputAxis());
			UProperty* NewProp_KeyEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("KeyEvent"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(KeyEvent, VictoryBPFunctionLibrary_eventVictoryGetVictoryInputAxis_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FKeyEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Key Rebinding"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Axis Mapping"));
			MetaData->SetValue(NewProp_KeyEvent, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryIntMinusEquals()
	{
		struct VictoryBPFunctionLibrary_eventVictoryIntMinusEquals_Parms
		{
			int32 Int;
			int32 Sub;
			int32 IntOut;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryIntMinusEquals"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryIntMinusEquals_Parms));
			UProperty* NewProp_IntOut = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IntOut"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(IntOut, VictoryBPFunctionLibrary_eventVictoryIntMinusEquals_Parms), 0x0010000000000180);
			UProperty* NewProp_Sub = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Sub"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Sub, VictoryBPFunctionLibrary_eventVictoryIntMinusEquals_Parms), 0x0010000000000080);
			UProperty* NewProp_Int = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Int"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Int, VictoryBPFunctionLibrary_eventVictoryIntMinusEquals_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-="));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("decrement integer"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Easily subtract from an integer! <3 Rama"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryIntPlusEquals()
	{
		struct VictoryBPFunctionLibrary_eventVictoryIntPlusEquals_Parms
		{
			int32 Int;
			int32 Add;
			int32 IntOut;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryIntPlusEquals"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryIntPlusEquals_Parms));
			UProperty* NewProp_IntOut = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IntOut"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(IntOut, VictoryBPFunctionLibrary_eventVictoryIntPlusEquals_Parms), 0x0010000000000180);
			UProperty* NewProp_Add = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Add"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Add, VictoryBPFunctionLibrary_eventVictoryIntPlusEquals_Parms), 0x0010000000000080);
			UProperty* NewProp_Int = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Int"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Int, VictoryBPFunctionLibrary_eventVictoryIntPlusEquals_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+="));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("increment integer"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Easily add to an integer! <3 Rama"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryIsApplicationRunning()
	{
		struct VictoryBPFunctionLibrary_eventVictoryIsApplicationRunning_Parms
		{
			int32 ProcessId;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryIsApplicationRunning"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryIsApplicationRunning_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventVictoryIsApplicationRunning_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventVictoryIsApplicationRunning_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventVictoryIsApplicationRunning_Parms), sizeof(bool), true);
			UProperty* NewProp_ProcessId = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ProcessId"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ProcessId, VictoryBPFunctionLibrary_eventVictoryIsApplicationRunning_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|System"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("You can obtain ProcessID from processes you initiate via VictoryCreateProc"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryISM_ConvertToVictoryISMActors()
	{
		struct VictoryBPFunctionLibrary_eventVictoryISM_ConvertToVictoryISMActors_Parms
		{
			UObject* WorldContextObject;
			TSubclassOf<AActor>  ActorClass;
			TArray<AVictoryISM*> CreatedISMActors;
			bool DestroyOriginalActors;
			int32 MinCountToCreateISM;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryISM_ConvertToVictoryISMActors"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryISM_ConvertToVictoryISMActors_Parms));
			UProperty* NewProp_MinCountToCreateISM = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MinCountToCreateISM"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MinCountToCreateISM, VictoryBPFunctionLibrary_eventVictoryISM_ConvertToVictoryISMActors_Parms), 0x0010000000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(DestroyOriginalActors, VictoryBPFunctionLibrary_eventVictoryISM_ConvertToVictoryISMActors_Parms, bool);
			UProperty* NewProp_DestroyOriginalActors = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DestroyOriginalActors"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DestroyOriginalActors, VictoryBPFunctionLibrary_eventVictoryISM_ConvertToVictoryISMActors_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(DestroyOriginalActors, VictoryBPFunctionLibrary_eventVictoryISM_ConvertToVictoryISMActors_Parms), sizeof(bool), true);
			UProperty* NewProp_CreatedISMActors = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CreatedISMActors"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(CreatedISMActors, VictoryBPFunctionLibrary_eventVictoryISM_ConvertToVictoryISMActors_Parms), 0x0010000000000180);
			UProperty* NewProp_CreatedISMActors_Inner = new(EC_InternalUseOnlyConstructor, NewProp_CreatedISMActors, TEXT("CreatedISMActors"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AVictoryISM_NoRegister());
			UProperty* NewProp_ActorClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(ActorClass, VictoryBPFunctionLibrary_eventVictoryISM_ConvertToVictoryISMActors_Parms), 0x0014000000000080, Z_Construct_UClass_AActor_NoRegister(), UClass::StaticClass());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, VictoryBPFunctionLibrary_eventVictoryISM_ConvertToVictoryISMActors_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Victory Instanced Static Mesh"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_DestroyOriginalActors"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_MinCountToCreateISM"), TEXT("2"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Finds all instances of a specified Blueprint or class, and all subclasses of this class, and converts them into a single Instanced Static Mesh Actor! Returns the created Victory ISM actors. Please note all actors of subclasses are found as well, so use a very specific blueprint / class if you only want to generate Victory ISM actors for specific classes! Ignores actor classes that dont have a static mesh component. Please note that instanced static mesh actors can only be created for actors sharing the same static mesh asset. Different Instanced Static Mesh Actors are created for each unique static mesh asset found in the whole group of actors!"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryISM_GetAllVictoryISMActors()
	{
		struct VictoryBPFunctionLibrary_eventVictoryISM_GetAllVictoryISMActors_Parms
		{
			UObject* WorldContextObject;
			TArray<AVictoryISM*> Out;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryISM_GetAllVictoryISMActors"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryISM_GetAllVictoryISMActors_Parms));
			UProperty* NewProp_Out = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Out"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Out, VictoryBPFunctionLibrary_eventVictoryISM_GetAllVictoryISMActors_Parms), 0x0010000000000180);
			UProperty* NewProp_Out_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Out, TEXT("Out"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AVictoryISM_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, VictoryBPFunctionLibrary_eventVictoryISM_GetAllVictoryISMActors_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Victory Instanced Static Mesh"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Retrieve an array of all of the Victory Instanced Static Mesh Actors that have been created during runtime!"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryLoadLevelInstance()
	{
		struct VictoryBPFunctionLibrary_eventVictoryLoadLevelInstance_Parms
		{
			UObject* WorldContextObject;
			FString MapFolderOffOfContent;
			FString LevelName;
			int32 InstanceNumber;
			FVector Location;
			FRotator Rotation;
			bool Success;
			ULevelStreaming* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryLoadLevelInstance"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryLoadLevelInstance_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventVictoryLoadLevelInstance_Parms), 0x0010000000000580, Z_Construct_UClass_ULevelStreaming_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Success, VictoryBPFunctionLibrary_eventVictoryLoadLevelInstance_Parms, bool);
			UProperty* NewProp_Success = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Success"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Success, VictoryBPFunctionLibrary_eventVictoryLoadLevelInstance_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(Success, VictoryBPFunctionLibrary_eventVictoryLoadLevelInstance_Parms), sizeof(bool), true);
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Rotation, VictoryBPFunctionLibrary_eventVictoryLoadLevelInstance_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Location, VictoryBPFunctionLibrary_eventVictoryLoadLevelInstance_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_InstanceNumber = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InstanceNumber"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(InstanceNumber, VictoryBPFunctionLibrary_eventVictoryLoadLevelInstance_Parms), 0x0010000000000080);
			UProperty* NewProp_LevelName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LevelName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(LevelName, VictoryBPFunctionLibrary_eventVictoryLoadLevelInstance_Parms), 0x0010000000000080);
			UProperty* NewProp_MapFolderOffOfContent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MapFolderOffOfContent"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(MapFolderOffOfContent, VictoryBPFunctionLibrary_eventVictoryLoadLevelInstance_Parms), 0x0010000000000080);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, VictoryBPFunctionLibrary_eventVictoryLoadLevelInstance_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Dynamic Level Generation"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("My LoadLevelInstance BP node is in the main UE4 Engine as of 4.13! This version is deprecated and will be removed in the near future. <3 -Rama"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Load a level to a specific location and rotation, can create multiple of the same level!\n\nEnsure that each InstanceNumber is unique to spawn multiple instances of the same level!\n\n<3 Rama\n\n@param MapFolderOffOfContent - Maps or Maps/TileSets/TileSet1  etc\n@param LevelName - Just the level name itself, such as Tile1\n@param InstanceNumber - Ensure this is unique by keeping count to spawn as many instances of same level as you want!\n@param Location - Worldspace location where the level should be spawned\n@param Rotation - Worldspace rotation for rotating the entire level\n@return false if the level name was not found"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryPaths__ConfigDir()
	{
		struct VictoryBPFunctionLibrary_eventVictoryPaths__ConfigDir_Parms
		{
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryPaths__ConfigDir"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryPaths__ConfigDir_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventVictoryPaths__ConfigDir_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Paths"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("InstallDir/GameName/Saved/Config/"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryPaths__GameRootDirectory()
	{
		struct VictoryBPFunctionLibrary_eventVictoryPaths__GameRootDirectory_Parms
		{
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryPaths__GameRootDirectory"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryPaths__GameRootDirectory_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventVictoryPaths__GameRootDirectory_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Paths"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("InstallDir/GameName"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryPaths__LogsDir()
	{
		struct VictoryBPFunctionLibrary_eventVictoryPaths__LogsDir_Parms
		{
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryPaths__LogsDir"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryPaths__LogsDir_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventVictoryPaths__LogsDir_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Paths"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("InstallDir/GameName/Saved/Logs"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryPaths__SavedDir()
	{
		struct VictoryBPFunctionLibrary_eventVictoryPaths__SavedDir_Parms
		{
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryPaths__SavedDir"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryPaths__SavedDir_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventVictoryPaths__SavedDir_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Paths"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("InstallDir/GameName/Saved"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryPaths__ScreenShotsDir()
	{
		struct VictoryBPFunctionLibrary_eventVictoryPaths__ScreenShotsDir_Parms
		{
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryPaths__ScreenShotsDir"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryPaths__ScreenShotsDir_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventVictoryPaths__ScreenShotsDir_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Paths"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("InstallDir/GameName/Saved/Screenshots/Windows"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryPaths__Win64Dir_BinaryLocation()
	{
		struct VictoryBPFunctionLibrary_eventVictoryPaths__Win64Dir_BinaryLocation_Parms
		{
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryPaths__Win64Dir_BinaryLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryPaths__Win64Dir_BinaryLocation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventVictoryPaths__Win64Dir_BinaryLocation_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Paths"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("InstallDir/GameName/Binaries/Win64"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryPaths__WindowsNoEditorDir()
	{
		struct VictoryBPFunctionLibrary_eventVictoryPaths__WindowsNoEditorDir_Parms
		{
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryPaths__WindowsNoEditorDir"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryPaths__WindowsNoEditorDir_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventVictoryPaths__WindowsNoEditorDir_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Paths"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("InstallDir/WindowsNoEditor/"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryPhysics_UpdateAngularDamping()
	{
		struct VictoryBPFunctionLibrary_eventVictoryPhysics_UpdateAngularDamping_Parms
		{
			UPrimitiveComponent* CompToUpdate;
			float NewAngularDamping;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryPhysics_UpdateAngularDamping"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryPhysics_UpdateAngularDamping_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventVictoryPhysics_UpdateAngularDamping_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventVictoryPhysics_UpdateAngularDamping_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventVictoryPhysics_UpdateAngularDamping_Parms), sizeof(bool), true);
			UProperty* NewProp_NewAngularDamping = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewAngularDamping"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NewAngularDamping, VictoryBPFunctionLibrary_eventVictoryPhysics_UpdateAngularDamping_Parms), 0x0010000000000080);
			UProperty* NewProp_CompToUpdate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CompToUpdate"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CompToUpdate, VictoryBPFunctionLibrary_eventVictoryPhysics_UpdateAngularDamping_Parms), 0x0010000000080080, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Physics"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Update the Angular Damping during runtime! Make sure the component is simulating physics before calling this! Returns false if the new value could not be set."));
			MetaData->SetValue(NewProp_CompToUpdate, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryReBindActionKey()
	{
		struct VictoryBPFunctionLibrary_eventVictoryReBindActionKey_Parms
		{
			FVictoryInput Original;
			FVictoryInput NewBinding;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryReBindActionKey"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryReBindActionKey_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventVictoryReBindActionKey_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventVictoryReBindActionKey_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventVictoryReBindActionKey_Parms), sizeof(bool), true);
			UProperty* NewProp_NewBinding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewBinding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NewBinding, VictoryBPFunctionLibrary_eventVictoryReBindActionKey_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVictoryInput());
			UProperty* NewProp_Original = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Original"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Original, VictoryBPFunctionLibrary_eventVictoryReBindActionKey_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVictoryInput());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Key Rebinding"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("You can leave the AsString field blank :) Returns false if the key could not be found as an existing mapping!  Enjoy! <3  Rama"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryReBindAxisKey()
	{
		struct VictoryBPFunctionLibrary_eventVictoryReBindAxisKey_Parms
		{
			FVictoryInputAxis Original;
			FVictoryInputAxis NewBinding;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryReBindAxisKey"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryReBindAxisKey_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventVictoryReBindAxisKey_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventVictoryReBindAxisKey_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventVictoryReBindAxisKey_Parms), sizeof(bool), true);
			UProperty* NewProp_NewBinding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewBinding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NewBinding, VictoryBPFunctionLibrary_eventVictoryReBindAxisKey_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVictoryInputAxis());
			UProperty* NewProp_Original = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Original"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Original, VictoryBPFunctionLibrary_eventVictoryReBindAxisKey_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVictoryInputAxis());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Key Rebinding"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("You can leave the AsString field blank :) Returns false if the key could not be found as an existing mapping!  Enjoy! <3  Rama"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryRemoveActionKeyBind()
	{
		struct VictoryBPFunctionLibrary_eventVictoryRemoveActionKeyBind_Parms
		{
			FVictoryInput ToRemove;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryRemoveActionKeyBind"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryRemoveActionKeyBind_Parms));
			UProperty* NewProp_ToRemove = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ToRemove"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ToRemove, VictoryBPFunctionLibrary_eventVictoryRemoveActionKeyBind_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVictoryInput());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Key Rebinding"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryRemoveAxisKeyBind()
	{
		struct VictoryBPFunctionLibrary_eventVictoryRemoveAxisKeyBind_Parms
		{
			FVictoryInputAxis ToRemove;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictoryRemoveAxisKeyBind"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictoryRemoveAxisKeyBind_Parms));
			UProperty* NewProp_ToRemove = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ToRemove"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ToRemove, VictoryBPFunctionLibrary_eventVictoryRemoveAxisKeyBind_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVictoryInputAxis());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Key Rebinding"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySetCustomConfigVar_Bool()
	{
		struct VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Bool_Parms
		{
			FString SectionName;
			FString VariableName;
			bool Value;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictorySetCustomConfigVar_Bool"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Bool_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Value, VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Bool_Parms, bool);
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Value, VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Bool_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(Value, VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Bool_Parms), sizeof(bool), true);
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Bool_Parms), 0x0010000000000080);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Bool_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Custom Config Vars!"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set Custom Config Var! These are stored in Saved/Config/Windows/Game.ini"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySetCustomConfigVar_Color()
	{
		struct VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Color_Parms
		{
			FString SectionName;
			FString VariableName;
			FLinearColor Value;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictorySetCustomConfigVar_Color"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Color_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Value, VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Color_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Color_Parms), 0x0010000000000080);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Color_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Custom Config Vars!"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set Custom Config Var! These are stored in Saved/Config/Windows/Game.ini"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySetCustomConfigVar_Float()
	{
		struct VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Float_Parms
		{
			FString SectionName;
			FString VariableName;
			float Value;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictorySetCustomConfigVar_Float"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Float_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Value, VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Float_Parms), 0x0010000000000080);
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Float_Parms), 0x0010000000000080);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Float_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Custom Config Vars!"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set Custom Config Var! These are stored in Saved/Config/Windows/Game.ini"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySetCustomConfigVar_Int()
	{
		struct VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Int_Parms
		{
			FString SectionName;
			FString VariableName;
			int32 Value;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictorySetCustomConfigVar_Int"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Int_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Value, VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Int_Parms), 0x0010000000000080);
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Int_Parms), 0x0010000000000080);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Int_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Custom Config Vars!"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set Custom Config Var! These are stored in Saved/Config/Windows/Game.ini"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySetCustomConfigVar_Rotator()
	{
		struct VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Rotator_Parms
		{
			FString SectionName;
			FString VariableName;
			FRotator Value;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictorySetCustomConfigVar_Rotator"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Rotator_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Value, VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Rotator_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Rotator_Parms), 0x0010000000000080);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Rotator_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Custom Config Vars!"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set Custom Config Var! These are stored in Saved/Config/Windows/Game.ini"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySetCustomConfigVar_String()
	{
		struct VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_String_Parms
		{
			FString SectionName;
			FString VariableName;
			FString Value;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictorySetCustomConfigVar_String"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_String_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Value, VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_String_Parms), 0x0010000000000080);
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_String_Parms), 0x0010000000000080);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_String_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Custom Config Vars!"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set Custom Config Var! These are stored in Saved/Config/Windows/Game.ini"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector()
	{
		struct VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Vector_Parms
		{
			FString SectionName;
			FString VariableName;
			FVector Value;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictorySetCustomConfigVar_Vector"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Vector_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Value, VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Vector_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Vector_Parms), 0x0010000000000080);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Vector_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Custom Config Vars!"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set Custom Config Var! These are stored in Saved/Config/Windows/Game.ini"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector2D()
	{
		struct VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Vector2D_Parms
		{
			FString SectionName;
			FString VariableName;
			FVector2D Value;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictorySetCustomConfigVar_Vector2D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Vector2D_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Value, VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Vector2D_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Vector2D_Parms), 0x0010000000000080);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, VictoryBPFunctionLibrary_eventVictorySetCustomConfigVar_Vector2D_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Custom Config Vars!"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set Custom Config Var! These are stored in Saved/Config/Windows/Game.ini"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySimulateKeyPress()
	{
		struct VictoryBPFunctionLibrary_eventVictorySimulateKeyPress_Parms
		{
			APlayerController* ThePC;
			FKey Key;
			TEnumAsByte<EInputEvent> EventType;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictorySimulateKeyPress"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictorySimulateKeyPress_Parms));
			UProperty* NewProp_EventType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EventType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(EventType, VictoryBPFunctionLibrary_eventVictorySimulateKeyPress_Parms), 0x0010000000000080, Z_Construct_UEnum_Engine_EInputEvent());
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Key, VictoryBPFunctionLibrary_eventVictorySimulateKeyPress_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FKey());
			UProperty* NewProp_ThePC = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ThePC"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ThePC, VictoryBPFunctionLibrary_eventVictorySimulateKeyPress_Parms), 0x0010000000000080, Z_Construct_UClass_APlayerController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySimulateMouseWheel()
	{
		struct VictoryBPFunctionLibrary_eventVictorySimulateMouseWheel_Parms
		{
			float Delta;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictorySimulateMouseWheel"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictorySimulateMouseWheel_Parms));
			UProperty* NewProp_Delta = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Delta"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Delta, VictoryBPFunctionLibrary_eventVictorySimulateMouseWheel_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_Delta, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySortFloatArray()
	{
		struct VictoryBPFunctionLibrary_eventVictorySortFloatArray_Parms
		{
			TArray<float> FloatArray;
			TArray<float> FloatArrayRef;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictorySortFloatArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictorySortFloatArray_Parms));
			UProperty* NewProp_FloatArrayRef = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FloatArrayRef"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(FloatArrayRef, VictoryBPFunctionLibrary_eventVictorySortFloatArray_Parms), 0x0010000000000180);
			UProperty* NewProp_FloatArrayRef_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FloatArrayRef, TEXT("FloatArrayRef"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_FloatArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FloatArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(FloatArray, VictoryBPFunctionLibrary_eventVictorySortFloatArray_Parms), 0x0010000008000180);
			UProperty* NewProp_FloatArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FloatArray, TEXT("FloatArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Array"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("sort float array"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sort a float array, smallest value will be at index 0 after sorting. Modifies the input array, no new data created."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySortIntArray()
	{
		struct VictoryBPFunctionLibrary_eventVictorySortIntArray_Parms
		{
			TArray<int32> IntArray;
			TArray<int32> IntArrayRef;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictorySortIntArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictorySortIntArray_Parms));
			UProperty* NewProp_IntArrayRef = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IntArrayRef"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(IntArrayRef, VictoryBPFunctionLibrary_eventVictorySortIntArray_Parms), 0x0010000000000180);
			UProperty* NewProp_IntArrayRef_Inner = new(EC_InternalUseOnlyConstructor, NewProp_IntArrayRef, TEXT("IntArrayRef"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_IntArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IntArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(IntArray, VictoryBPFunctionLibrary_eventVictorySortIntArray_Parms), 0x0010000008000180);
			UProperty* NewProp_IntArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_IntArray, TEXT("IntArray"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Array"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("sort integer array"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sort an integer array, smallest value will be at index 0 after sorting. Modifies the input array, no new data created. <3 Rama"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySoundVolumeChange()
	{
		struct VictoryBPFunctionLibrary_eventVictorySoundVolumeChange_Parms
		{
			USoundClass* SoundClassObject;
			float NewVolume;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VictorySoundVolumeChange"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventVictorySoundVolumeChange_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventVictorySoundVolumeChange_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventVictorySoundVolumeChange_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventVictorySoundVolumeChange_Parms), sizeof(bool), true);
			UProperty* NewProp_NewVolume = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewVolume"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NewVolume, VictoryBPFunctionLibrary_eventVictorySoundVolumeChange_Parms), 0x0010000000000080);
			UProperty* NewProp_SoundClassObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SoundClassObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SoundClassObject, VictoryBPFunctionLibrary_eventVictorySoundVolumeChange_Parms), 0x0010000000000080, Z_Construct_UClass_USoundClass_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|Sound"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Change volume of Sound class of your choosing, sets the volume instantly! Returns false if the sound class was not found and volume was not set."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Viewport__EnableWorldRendering()
	{
		struct VictoryBPFunctionLibrary_eventViewport__EnableWorldRendering_Parms
		{
			const APlayerController* ThePC;
			bool RenderTheWorld;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Viewport__EnableWorldRendering"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VictoryBPFunctionLibrary_eventViewport__EnableWorldRendering_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventViewport__EnableWorldRendering_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventViewport__EnableWorldRendering_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventViewport__EnableWorldRendering_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(RenderTheWorld, VictoryBPFunctionLibrary_eventViewport__EnableWorldRendering_Parms, bool);
			UProperty* NewProp_RenderTheWorld = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RenderTheWorld"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(RenderTheWorld, VictoryBPFunctionLibrary_eventViewport__EnableWorldRendering_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(RenderTheWorld, VictoryBPFunctionLibrary_eventViewport__EnableWorldRendering_Parms), sizeof(bool), true);
			UProperty* NewProp_ThePC = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ThePC"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ThePC, VictoryBPFunctionLibrary_eventViewport__EnableWorldRendering_Parms), 0x0010000000000082, Z_Construct_UClass_APlayerController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("keywords"), TEXT("disable show hide loading screen"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("This handy node lets you turn the rendering of the entire world on or off! Does not affect UMG or HUD, which allows you to use loading screens effectively! <3 Rama. Returns false if player controller could not be used to get the viewport."));
			MetaData->SetValue(NewProp_ThePC, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Viewport__GetCenterOfViewport()
	{
		struct VictoryBPFunctionLibrary_eventViewport__GetCenterOfViewport_Parms
		{
			const APlayerController* ThePC;
			float PosX;
			float PosY;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Viewport__GetCenterOfViewport"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventViewport__GetCenterOfViewport_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventViewport__GetCenterOfViewport_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventViewport__GetCenterOfViewport_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventViewport__GetCenterOfViewport_Parms), sizeof(bool), true);
			UProperty* NewProp_PosY = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PosY"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(PosY, VictoryBPFunctionLibrary_eventViewport__GetCenterOfViewport_Parms), 0x0010000000000180);
			UProperty* NewProp_PosX = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PosX"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(PosX, VictoryBPFunctionLibrary_eventViewport__GetCenterOfViewport_Parms), 0x0010000000000180);
			UProperty* NewProp_ThePC = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ThePC"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ThePC, VictoryBPFunctionLibrary_eventViewport__GetCenterOfViewport_Parms), 0x0010000000000082, Z_Construct_UClass_APlayerController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the coordinates of the center of the player's screen / viewport. Returns false if the operation could not occur"));
			MetaData->SetValue(NewProp_ThePC, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Viewport__GetMousePosition()
	{
		struct VictoryBPFunctionLibrary_eventViewport__GetMousePosition_Parms
		{
			const APlayerController* ThePC;
			float PosX;
			float PosY;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Viewport__GetMousePosition"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(VictoryBPFunctionLibrary_eventViewport__GetMousePosition_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventViewport__GetMousePosition_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventViewport__GetMousePosition_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventViewport__GetMousePosition_Parms), sizeof(bool), true);
			UProperty* NewProp_PosY = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PosY"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(PosY, VictoryBPFunctionLibrary_eventViewport__GetMousePosition_Parms), 0x0010000000000180);
			UProperty* NewProp_PosX = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PosX"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(PosX, VictoryBPFunctionLibrary_eventViewport__GetMousePosition_Parms), 0x0010000000000180);
			UProperty* NewProp_ThePC = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ThePC"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ThePC, VictoryBPFunctionLibrary_eventViewport__GetMousePosition_Parms), 0x0010000000000082, Z_Construct_UClass_APlayerController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the Cursor Position within the Player's Viewport. This will return a result consistent with SET Mouse Position Returns false if the operation could not occur"));
			MetaData->SetValue(NewProp_ThePC, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Viewport__SetMousePosition()
	{
		struct VictoryBPFunctionLibrary_eventViewport__SetMousePosition_Parms
		{
			const APlayerController* ThePC;
			float PosX;
			float PosY;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Viewport__SetMousePosition"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(VictoryBPFunctionLibrary_eventViewport__SetMousePosition_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventViewport__SetMousePosition_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventViewport__SetMousePosition_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventViewport__SetMousePosition_Parms), sizeof(bool), true);
			UProperty* NewProp_PosY = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PosY"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(PosY, VictoryBPFunctionLibrary_eventViewport__SetMousePosition_Parms), 0x0010000008000182);
			UProperty* NewProp_PosX = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PosX"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(PosX, VictoryBPFunctionLibrary_eventViewport__SetMousePosition_Parms), 0x0010000008000182);
			UProperty* NewProp_ThePC = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ThePC"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ThePC, VictoryBPFunctionLibrary_eventViewport__SetMousePosition_Parms), 0x0010000000000082, Z_Construct_UClass_APlayerController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("SET the Mouse Position! Returns false if the operation could not occur"));
			MetaData->SetValue(NewProp_PosY, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_PosX, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_ThePC, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_ViewportPositionDeproject()
	{
		struct VictoryBPFunctionLibrary_eventViewportPositionDeproject_Parms
		{
			UObject* WorldContextObject;
			FVector2D ViewportPosition;
			FVector OutWorldOrigin;
			FVector OutWorldDirection;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ViewportPositionDeproject"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(VictoryBPFunctionLibrary_eventViewportPositionDeproject_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventViewportPositionDeproject_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventViewportPositionDeproject_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventViewportPositionDeproject_Parms), sizeof(bool), true);
			UProperty* NewProp_OutWorldDirection = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutWorldDirection"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OutWorldDirection, VictoryBPFunctionLibrary_eventViewportPositionDeproject_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_OutWorldOrigin = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutWorldOrigin"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OutWorldOrigin, VictoryBPFunctionLibrary_eventViewportPositionDeproject_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_ViewportPosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ViewportPosition"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ViewportPosition, VictoryBPFunctionLibrary_eventViewportPositionDeproject_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, VictoryBPFunctionLibrary_eventViewportPositionDeproject_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VictoryBPLibrary|Game|Viewport"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Transforms the viewport position into a world space origin and direction.\n\n@param WorldContextObject    World context.\n@param ViewportPosition              Local space of viewport from GetViewportPosition() or similar.\n@param OutWorldOrigin                Corresponding 3D location in world space.\n@param OutWorldDirection             World space direction vector away from the camera at the given 2d point.\n\n@return false if something went wrong during the deproject process."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
			MetaData->SetValue(NewProp_ViewportPosition, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Visibility__GetNotRenderedActors()
	{
		struct VictoryBPFunctionLibrary_eventVisibility__GetNotRenderedActors_Parms
		{
			UObject* WorldContextObject;
			TArray<AActor*> CurrentlyNotRenderedActors;
			float MinRecentTime;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Visibility__GetNotRenderedActors"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(VictoryBPFunctionLibrary_eventVisibility__GetNotRenderedActors_Parms));
			UProperty* NewProp_MinRecentTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MinRecentTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MinRecentTime, VictoryBPFunctionLibrary_eventVisibility__GetNotRenderedActors_Parms), 0x0010000000000080);
			UProperty* NewProp_CurrentlyNotRenderedActors = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CurrentlyNotRenderedActors"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(CurrentlyNotRenderedActors, VictoryBPFunctionLibrary_eventVisibility__GetNotRenderedActors_Parms), 0x0010000000000180);
			UProperty* NewProp_CurrentlyNotRenderedActors_Inner = new(EC_InternalUseOnlyConstructor, NewProp_CurrentlyNotRenderedActors, TEXT("CurrentlyNotRenderedActors"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, VictoryBPFunctionLibrary_eventVisibility__GetNotRenderedActors_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_MinRecentTime"), TEXT("0.010000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Obtain an Array of Actors NOT Rendered Recently! You can specifiy what qualifies as \"Recent\" in seconds."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_Visibility__GetRenderedActors()
	{
		struct VictoryBPFunctionLibrary_eventVisibility__GetRenderedActors_Parms
		{
			UObject* WorldContextObject;
			TArray<AActor*> CurrentlyRenderedActors;
			float MinRecentTime;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Visibility__GetRenderedActors"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(VictoryBPFunctionLibrary_eventVisibility__GetRenderedActors_Parms));
			UProperty* NewProp_MinRecentTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MinRecentTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MinRecentTime, VictoryBPFunctionLibrary_eventVisibility__GetRenderedActors_Parms), 0x0010000000000080);
			UProperty* NewProp_CurrentlyRenderedActors = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CurrentlyRenderedActors"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(CurrentlyRenderedActors, VictoryBPFunctionLibrary_eventVisibility__GetRenderedActors_Parms), 0x0010000000000180);
			UProperty* NewProp_CurrentlyRenderedActors_Inner = new(EC_InternalUseOnlyConstructor, NewProp_CurrentlyRenderedActors, TEXT("CurrentlyRenderedActors"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, VictoryBPFunctionLibrary_eventVisibility__GetRenderedActors_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_MinRecentTime"), TEXT("0.010000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Obtain an Array of Actors Rendered Recently. You can specifiy what qualifies as \"Recent\" in seconds."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_WidgetGetChildrenOfClass()
	{
		struct VictoryBPFunctionLibrary_eventWidgetGetChildrenOfClass_Parms
		{
			UWidget* ParentWidget;
			TArray<UUserWidget*> ChildWidgets;
			TSubclassOf<UUserWidget>  WidgetClass;
			bool bImmediateOnly;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WidgetGetChildrenOfClass"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422409, 65535, sizeof(VictoryBPFunctionLibrary_eventWidgetGetChildrenOfClass_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bImmediateOnly, VictoryBPFunctionLibrary_eventWidgetGetChildrenOfClass_Parms, bool);
			UProperty* NewProp_bImmediateOnly = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bImmediateOnly"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bImmediateOnly, VictoryBPFunctionLibrary_eventWidgetGetChildrenOfClass_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bImmediateOnly, VictoryBPFunctionLibrary_eventWidgetGetChildrenOfClass_Parms), sizeof(bool), true);
			UProperty* NewProp_WidgetClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WidgetClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(WidgetClass, VictoryBPFunctionLibrary_eventWidgetGetChildrenOfClass_Parms), 0x0014000000000080, Z_Construct_UClass_UUserWidget_NoRegister(), UClass::StaticClass());
			UProperty* NewProp_ChildWidgets = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ChildWidgets"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ChildWidgets, VictoryBPFunctionLibrary_eventWidgetGetChildrenOfClass_Parms), 0x0010008000000180);
			UProperty* NewProp_ChildWidgets_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ChildWidgets, TEXT("ChildWidgets"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000080000, Z_Construct_UClass_UUserWidget_NoRegister());
			UProperty* NewProp_ParentWidget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ParentWidget"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ParentWidget, VictoryBPFunctionLibrary_eventWidgetGetChildrenOfClass_Parms), 0x0010000000080080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|UMG"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("ParentWidget"));
			MetaData->SetValue(ReturnFunction, TEXT("DeterminesOutputType"), TEXT("WidgetClass"));
			MetaData->SetValue(ReturnFunction, TEXT("DynamicOutputParam"), TEXT("ChildWidgets"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(NewProp_ChildWidgets, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_ParentWidget, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_WidgetGetParentOfClass()
	{
		struct VictoryBPFunctionLibrary_eventWidgetGetParentOfClass_Parms
		{
			UWidget* ChildWidget;
			TSubclassOf<UUserWidget>  WidgetClass;
			UUserWidget* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WidgetGetParentOfClass"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022409, 65535, sizeof(VictoryBPFunctionLibrary_eventWidgetGetParentOfClass_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, VictoryBPFunctionLibrary_eventWidgetGetParentOfClass_Parms), 0x0010000000080588, Z_Construct_UClass_UUserWidget_NoRegister());
			UProperty* NewProp_WidgetClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WidgetClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(WidgetClass, VictoryBPFunctionLibrary_eventWidgetGetParentOfClass_Parms), 0x0014000000000080, Z_Construct_UClass_UUserWidget_NoRegister(), UClass::StaticClass());
			UProperty* NewProp_ChildWidget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ChildWidget"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ChildWidget, VictoryBPFunctionLibrary_eventWidgetGetParentOfClass_Parms), 0x0010000000080080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|UMG"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("ChildWidget"));
			MetaData->SetValue(ReturnFunction, TEXT("DeterminesOutputType"), TEXT("WidgetClass"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Recurses up the list of parents until it finds a widget of WidgetClass.\n@return widget that is Parent of ChildWidget that matches WidgetClass."));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_ChildWidget, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_WidgetIsChildOf()
	{
		struct VictoryBPFunctionLibrary_eventWidgetIsChildOf_Parms
		{
			UWidget* ChildWidget;
			UWidget* PossibleParent;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WidgetIsChildOf"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022409, 65535, sizeof(VictoryBPFunctionLibrary_eventWidgetIsChildOf_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventWidgetIsChildOf_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventWidgetIsChildOf_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventWidgetIsChildOf_Parms), sizeof(bool), true);
			UProperty* NewProp_PossibleParent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PossibleParent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(PossibleParent, VictoryBPFunctionLibrary_eventWidgetIsChildOf_Parms), 0x0010000000080080, Z_Construct_UClass_UWidget_NoRegister());
			UProperty* NewProp_ChildWidget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ChildWidget"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ChildWidget, VictoryBPFunctionLibrary_eventWidgetIsChildOf_Parms), 0x0010000000080080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library|UMG"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("ChildWidget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Recurses up the list of parents and returns true if this widget is a descendant of the PossibleParent\n@return true if this widget is a child of the PossibleParent"));
			MetaData->SetValue(NewProp_PossibleParent, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_ChildWidget, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_WorldType__InEditorWorld()
	{
		struct VictoryBPFunctionLibrary_eventWorldType__InEditorWorld_Parms
		{
			UObject* WorldContextObject;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WorldType__InEditorWorld"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventWorldType__InEditorWorld_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventWorldType__InEditorWorld_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventWorldType__InEditorWorld_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventWorldType__InEditorWorld_Parms), sizeof(bool), true);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, VictoryBPFunctionLibrary_eventWorldType__InEditorWorld_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Is this game logic running in the Editor world?"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_WorldType__InGameInstanceWorld()
	{
		struct VictoryBPFunctionLibrary_eventWorldType__InGameInstanceWorld_Parms
		{
			UObject* WorldContextObject;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WorldType__InGameInstanceWorld"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventWorldType__InGameInstanceWorld_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventWorldType__InGameInstanceWorld_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventWorldType__InGameInstanceWorld_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventWorldType__InGameInstanceWorld_Parms), sizeof(bool), true);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, VictoryBPFunctionLibrary_eventWorldType__InGameInstanceWorld_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Is this game logic running in an actual independent game instance?"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVictoryBPFunctionLibrary_WorldType__InPIEWorld()
	{
		struct VictoryBPFunctionLibrary_eventWorldType__InPIEWorld_Parms
		{
			UObject* WorldContextObject;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVictoryBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WorldType__InPIEWorld"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VictoryBPFunctionLibrary_eventWorldType__InPIEWorld_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VictoryBPFunctionLibrary_eventWorldType__InPIEWorld_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VictoryBPFunctionLibrary_eventWorldType__InPIEWorld_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VictoryBPFunctionLibrary_eventWorldType__InPIEWorld_Parms), sizeof(bool), true);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, VictoryBPFunctionLibrary_eventWorldType__InPIEWorld_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Victory BP Library"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Is this game logic running in the PIE world?"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UVictoryBPFunctionLibrary_NoRegister()
	{
		return UVictoryBPFunctionLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_UVictoryBPFunctionLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage__Script_VictoryBPLibrary();
			OuterClass = UVictoryBPFunctionLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Accessor__GetCharacterSkeletalMesh());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Accessor__GetNameAsString());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Accessor__GetPlayerController());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Actor__GetAttachedActors());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Actor__TeleportToActor());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Actor_PrestreamTextures());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_AddToActorRotation());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_AddToStreamingLevels());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_AnimatedVertex__GetAnimatedVertexLocations());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Animation__GetAimOffsets());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Animation__GetAimOffsetsFromRotation());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_AppendMultiple());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Array_IsValidIndex());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Array_Sort());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Calcs__ClosestPointToSourcePoint());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Capture2D_Project());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Capture2D_SaveImage());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_CaptureComponent2D_Project());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_CaptureComponent2D_SaveImage());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Character__GetControllerRotation());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_CharacterMovement__SetMaxMoveSpeed());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_ClientWindow__GameWindowIsForeGroundInOS());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Clone__StaticMeshActor());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_CompareMD5Hash());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Component_PrestreamTextures());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_constructRand());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Conversion__FloatToRoundedInteger());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Conversions__ColorToString());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Conversions__RotatorToVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Conversions__StringToColor());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Conversions__StringToRotator());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Conversions__StringToVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Conversions__VectorToRotator());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_CountOccurrancesOfSubString());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_CreateMD5Hash());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_CreateObject());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_CreatePlane());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_CreatePrimitiveComponent());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_CreateTextureRenderTarget2D());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Data__GetCharacterBoneLocations());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_DistanceToSurface__DistaceOfPointToMeshSurface());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_DoesMaterialHaveParameter());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Draw__Thick3DLineBetweenActors());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Draw__Thick3DLineFromCharacterSocket());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Draw__Thick3DLineFromSocket());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_DrawCircle());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_EqualEqual_Vector2DVector2D());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_FileIO__SaveStringTextToFile());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_FlashGameOnTaskBar());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_FlushPressedKeys());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetActorRelativeLocation());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetActorRelativeRotation());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetAllBoneNamesBelowBone());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetAllWidgetsOfClass());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetBoxContainingWorldPoints());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetCommandLine());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetComponentRelativeLocation());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetComponentRelativeRotation());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetCreationTime());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetDistanceBetweenComponentSurfaces());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetDistanceToCollision());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetFirstWidgetOfClass());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetGenericTeamId());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetHeadMountedDisplayDeviceType());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetLevelInstanceInfo());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetNamesOfLoadedLevels());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetObjectPath());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetPlayerStart());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetPlayerUniqueNetID());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetRotatorRelativeRotation());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetSoundWaveFromFile());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetStaticMeshVertexLocations());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetTimeAlive());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetTimeInPlay());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetUserDisplayAdapterBrand());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetVectorRelativeLocation());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetViewportPosition());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetViewportPositionHitResultByChannel());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetWidgetFromName());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GraphicsSettings__SetFrameRateCap());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GraphicsSettings__SetFrameRateToBeUnbound());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_HasSubstring());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_HideStreamingLevel());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_HorizontalFOV());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_InsertChildAt());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_IsAlphaNumeric());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_IsPointOnPlane());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_IsStandAlone());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_IsWidgetOfClassInViewport());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_JoyFileIO_GetFiles());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_JoyFileIO_GetFilesInRootAndAllSubFolders());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_JoyGraphicsSettings__FullScreen_Get());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_JoyGraphicsSettings__FullScreen_Set());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_JoyIsKey());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_LensFlare__GetLensFlareOffsets());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_LoadObjectFromAssetPath());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_LoadStringArrayFromFile());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_LoadTexture2D_FromDDSFile());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_LoadTexture2D_FromFileByExtension());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Loops_ResetBPRunawayCounter());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_MapRangeClamped());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_MaxOfFloatArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_MaxOfIntArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_MinOfFloatArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_MinOfIntArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Mobility__SetSceneCompMobility());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_NotEqual_Vector2DVector2D());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Open_URL_In_Web_Browser());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_OperatingSystem__GetCurrentPlatform());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_OptionsMenu__GetDisplayAdapterScreenResolutions());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Physics__EnterRagDoll());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Physics__GetLocationofRagDoll());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Physics__InitializeVictoryRagDoll());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Physics__IsRagDoll());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Physics__LeaveRagDoll());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Physics__UpdateCharacterCameraToRagdollLocation());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_PlayerController_GetControllerID());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_PlayerState_GetPlayerID());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_PlaySoundAtLocationFromFile());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_PlaySoundAttachedFromFile());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_PointDistanceToPlane());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_ProjectWorldToScreenPosition());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandBool_Bernoulli());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandBool_Bernoulli_MT());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandFloat_MINMAX_uniDis());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandFloat_MINMAX_uniDis_MT());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandFloat_uniDis());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandFloat_uniDis_MT());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandInt_MINMAX_uniDis());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandInt_MINMAX_uniDis_MT());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandInt_uniDis());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandInt_uniDis_MT());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_RealWorldTime__GetDifferenceBetweenTimes());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_RealWorldTime__GetTimePassedSincePreviousTime());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_RemoveAllWidgetsOfClass());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_RemoveFromStreamingLevels());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Rendering__FreezeGameRendering());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Rendering__UnFreezeGameRendering());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_SaveGameObject_GetAllSaveSlotFileNames());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_ScreenShots_Rename_Move_Most_Recent());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_seedRand());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_seedRandWithEntropy());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_seedRandWithTime());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Selection_SelectionBox());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_ServerTravel());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_SetBloomIntensity());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_SetComponentTickRate());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_SetGenericTeamId());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_SpawnActorIntoLevel());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_String__CombineStrings());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_String__CombineStrings_Multi());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_String__ExplodeString());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_StringConversion__GetFloatAsStringWithPrecision());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_StringIsEmpty());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Text_IsNumeric());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Text_ToFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Text_ToInt());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_TraceData__GetTraceDataFromCharacterSocket());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_TraceData__GetTraceDataFromSkeletalMeshSocket());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestBone());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestSocket());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_TransformVectorToActorSpace());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_TransformVectorToActorSpaceAngle());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_UnloadStreamingLevel());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_UTCToLocal());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Vector2DInterpTo());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Vector2DInterpTo_Constant());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VerticalFOV());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_AI_MoveToWithFilter());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_Get_Pixel());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_GetGPUBrand());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_GetGPUInfo());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_GetGRHIAdapterName());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_GetPixelFromT2D());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_GetPixelsArrayFromT2D());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_GetStringFromOSClipboard());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_SavePixels());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_SaveStringToOSClipboard());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_SecondsToHoursMinutesSeconds());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryAppendInline());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryCreateProc());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryDestructible_DestroyChunk());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryFloatMinusEquals());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryFloatPlusEquals());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetAllActionKeyBindings());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetAllAxisAndActionMappingsForKey());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetAllAxisKeyBindings());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetApplicationName());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Bool());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Color());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Float());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Int());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Rotator());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetCustomConfigVar_String());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector2D());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetSoundVolume());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetVictoryInput());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetVictoryInputAxis());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryIntMinusEquals());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryIntPlusEquals());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryIsApplicationRunning());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryISM_ConvertToVictoryISMActors());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryISM_GetAllVictoryISMActors());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryLoadLevelInstance());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryPaths__ConfigDir());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryPaths__GameRootDirectory());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryPaths__LogsDir());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryPaths__SavedDir());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryPaths__ScreenShotsDir());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryPaths__Win64Dir_BinaryLocation());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryPaths__WindowsNoEditorDir());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryPhysics_UpdateAngularDamping());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryReBindActionKey());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryReBindAxisKey());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryRemoveActionKeyBind());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryRemoveAxisKeyBind());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySetCustomConfigVar_Bool());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySetCustomConfigVar_Color());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySetCustomConfigVar_Float());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySetCustomConfigVar_Int());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySetCustomConfigVar_Rotator());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySetCustomConfigVar_String());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector2D());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySimulateKeyPress());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySimulateMouseWheel());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySortFloatArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySortIntArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySoundVolumeChange());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Viewport__EnableWorldRendering());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Viewport__GetCenterOfViewport());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Viewport__GetMousePosition());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Viewport__SetMousePosition());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_ViewportPositionDeproject());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Visibility__GetNotRenderedActors());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Visibility__GetRenderedActors());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_WidgetGetChildrenOfClass());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_WidgetGetParentOfClass());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_WidgetIsChildOf());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_WorldType__InEditorWorld());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_WorldType__InGameInstanceWorld());
				OuterClass->LinkChild(Z_Construct_UFunction_UVictoryBPFunctionLibrary_WorldType__InPIEWorld());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Accessor__GetCharacterSkeletalMesh(), "Accessor__GetCharacterSkeletalMesh"); // 2932119355
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Accessor__GetNameAsString(), "Accessor__GetNameAsString"); // 1058733139
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Accessor__GetPlayerController(), "Accessor__GetPlayerController"); // 685509145
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Actor__GetAttachedActors(), "Actor__GetAttachedActors"); // 2909085908
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Actor__TeleportToActor(), "Actor__TeleportToActor"); // 3741146758
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Actor_PrestreamTextures(), "Actor_PrestreamTextures"); // 1925772169
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_AddToActorRotation(), "AddToActorRotation"); // 2529948424
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_AddToStreamingLevels(), "AddToStreamingLevels"); // 261572338
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_AnimatedVertex__GetAnimatedVertexLocations(), "AnimatedVertex__GetAnimatedVertexLocations"); // 1875907583
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Animation__GetAimOffsets(), "Animation__GetAimOffsets"); // 3048509692
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Animation__GetAimOffsetsFromRotation(), "Animation__GetAimOffsetsFromRotation"); // 1686744291
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_AppendMultiple(), "AppendMultiple"); // 2700147305
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Array_IsValidIndex(), "Array_IsValidIndex"); // 3119896922
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Array_Sort(), "Array_Sort"); // 1571834848
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Calcs__ClosestPointToSourcePoint(), "Calcs__ClosestPointToSourcePoint"); // 1052485140
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Capture2D_Project(), "Capture2D_Project"); // 369582836
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Capture2D_SaveImage(), "Capture2D_SaveImage"); // 1204364560
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_CaptureComponent2D_Project(), "CaptureComponent2D_Project"); // 540631719
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_CaptureComponent2D_SaveImage(), "CaptureComponent2D_SaveImage"); // 1174272408
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Character__GetControllerRotation(), "Character__GetControllerRotation"); // 927949968
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_CharacterMovement__SetMaxMoveSpeed(), "CharacterMovement__SetMaxMoveSpeed"); // 3020845114
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_ClientWindow__GameWindowIsForeGroundInOS(), "ClientWindow__GameWindowIsForeGroundInOS"); // 2480590249
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Clone__StaticMeshActor(), "Clone__StaticMeshActor"); // 977312031
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_CompareMD5Hash(), "CompareMD5Hash"); // 1475902950
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Component_PrestreamTextures(), "Component_PrestreamTextures"); // 3453056399
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_constructRand(), "constructRand"); // 744784457
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Conversion__FloatToRoundedInteger(), "Conversion__FloatToRoundedInteger"); // 152816096
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Conversions__ColorToString(), "Conversions__ColorToString"); // 123065813
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Conversions__RotatorToVector(), "Conversions__RotatorToVector"); // 2513735058
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Conversions__StringToColor(), "Conversions__StringToColor"); // 3731820870
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Conversions__StringToRotator(), "Conversions__StringToRotator"); // 3030188062
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Conversions__StringToVector(), "Conversions__StringToVector"); // 295375451
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Conversions__VectorToRotator(), "Conversions__VectorToRotator"); // 987889588
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_CountOccurrancesOfSubString(), "CountOccurrancesOfSubString"); // 1687464069
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_CreateMD5Hash(), "CreateMD5Hash"); // 904293388
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_CreateObject(), "CreateObject"); // 4105691781
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_CreatePlane(), "CreatePlane"); // 1118702625
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_CreatePrimitiveComponent(), "CreatePrimitiveComponent"); // 2188933313
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_CreateTextureRenderTarget2D(), "CreateTextureRenderTarget2D"); // 3266169080
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Data__GetCharacterBoneLocations(), "Data__GetCharacterBoneLocations"); // 3949792037
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_DistanceToSurface__DistaceOfPointToMeshSurface(), "DistanceToSurface__DistaceOfPointToMeshSurface"); // 3674132946
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_DoesMaterialHaveParameter(), "DoesMaterialHaveParameter"); // 750003064
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Draw__Thick3DLineBetweenActors(), "Draw__Thick3DLineBetweenActors"); // 634349819
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Draw__Thick3DLineFromCharacterSocket(), "Draw__Thick3DLineFromCharacterSocket"); // 2125480616
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Draw__Thick3DLineFromSocket(), "Draw__Thick3DLineFromSocket"); // 738977135
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_DrawCircle(), "DrawCircle"); // 4173622932
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_EqualEqual_Vector2DVector2D(), "EqualEqual_Vector2DVector2D"); // 1964138635
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile(), "FileIO__SaveStringArrayToFile"); // 3125832510
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_FileIO__SaveStringTextToFile(), "FileIO__SaveStringTextToFile"); // 4075353257
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_FlashGameOnTaskBar(), "FlashGameOnTaskBar"); // 424613163
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_FlushPressedKeys(), "FlushPressedKeys"); // 275793140
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetActorRelativeLocation(), "GetActorRelativeLocation"); // 592533843
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetActorRelativeRotation(), "GetActorRelativeRotation"); // 389797295
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetAllBoneNamesBelowBone(), "GetAllBoneNamesBelowBone"); // 1785004596
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetAllWidgetsOfClass(), "GetAllWidgetsOfClass"); // 774808044
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetBoxContainingWorldPoints(), "GetBoxContainingWorldPoints"); // 3764981555
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor(), "GetClosestActorOfClassInRadiusOfActor"); // 1199229769
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation(), "GetClosestActorOfClassInRadiusOfLocation"); // 1419275380
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetCommandLine(), "GetCommandLine"); // 3104639412
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetComponentRelativeLocation(), "GetComponentRelativeLocation"); // 1904654529
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetComponentRelativeRotation(), "GetComponentRelativeRotation"); // 1403705031
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetCreationTime(), "GetCreationTime"); // 2649069618
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetDistanceBetweenComponentSurfaces(), "GetDistanceBetweenComponentSurfaces"); // 2953128643
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetDistanceToCollision(), "GetDistanceToCollision"); // 1438318149
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetFirstWidgetOfClass(), "GetFirstWidgetOfClass"); // 1681852047
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetGenericTeamId(), "GetGenericTeamId"); // 1079565656
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetHeadMountedDisplayDeviceType(), "GetHeadMountedDisplayDeviceType"); // 3425255642
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetLevelInstanceInfo(), "GetLevelInstanceInfo"); // 4057000507
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetNamesOfLoadedLevels(), "GetNamesOfLoadedLevels"); // 1156005609
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetObjectPath(), "GetObjectPath"); // 56221782
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetPlayerStart(), "GetPlayerStart"); // 2630614262
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetPlayerUniqueNetID(), "GetPlayerUniqueNetID"); // 3235472261
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetRotatorRelativeRotation(), "GetRotatorRelativeRotation"); // 2837806989
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetSoundWaveFromFile(), "GetSoundWaveFromFile"); // 2837122492
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetStaticMeshVertexLocations(), "GetStaticMeshVertexLocations"); // 2160711234
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetTimeAlive(), "GetTimeAlive"); // 615215348
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetTimeInPlay(), "GetTimeInPlay"); // 1521460809
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetUserDisplayAdapterBrand(), "GetUserDisplayAdapterBrand"); // 3466405559
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetVectorRelativeLocation(), "GetVectorRelativeLocation"); // 2150699129
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetViewportPosition(), "GetViewportPosition"); // 1445278700
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetViewportPositionHitResultByChannel(), "GetViewportPositionHitResultByChannel"); // 3343329470
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GetWidgetFromName(), "GetWidgetFromName"); // 3494485409
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GraphicsSettings__SetFrameRateCap(), "GraphicsSettings__SetFrameRateCap"); // 3542261789
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_GraphicsSettings__SetFrameRateToBeUnbound(), "GraphicsSettings__SetFrameRateToBeUnbound"); // 61638756
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_HasSubstring(), "HasSubstring"); // 1450913384
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_HideStreamingLevel(), "HideStreamingLevel"); // 1641822496
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_HorizontalFOV(), "HorizontalFOV"); // 3067033072
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_InsertChildAt(), "InsertChildAt"); // 2505279959
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_IsAlphaNumeric(), "IsAlphaNumeric"); // 3048099683
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_IsPointOnPlane(), "IsPointOnPlane"); // 2579760805
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_IsStandAlone(), "IsStandAlone"); // 4225667484
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_IsWidgetOfClassInViewport(), "IsWidgetOfClassInViewport"); // 1495469844
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_JoyFileIO_GetFiles(), "JoyFileIO_GetFiles"); // 2611704770
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_JoyFileIO_GetFilesInRootAndAllSubFolders(), "JoyFileIO_GetFilesInRootAndAllSubFolders"); // 3910855201
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_JoyGraphicsSettings__FullScreen_Get(), "JoyGraphicsSettings__FullScreen_Get"); // 2004354449
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_JoyGraphicsSettings__FullScreen_Set(), "JoyGraphicsSettings__FullScreen_Set"); // 1376405199
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_JoyIsKey(), "JoyIsKey"); // 3854854985
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_LensFlare__GetLensFlareOffsets(), "LensFlare__GetLensFlareOffsets"); // 3894285534
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_LoadObjectFromAssetPath(), "LoadObjectFromAssetPath"); // 2258056740
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_LoadStringArrayFromFile(), "LoadStringArrayFromFile"); // 1416743647
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_LoadTexture2D_FromDDSFile(), "LoadTexture2D_FromDDSFile"); // 1672373800
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_LoadTexture2D_FromFileByExtension(), "LoadTexture2D_FromFileByExtension"); // 1302014142
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Loops_ResetBPRunawayCounter(), "Loops_ResetBPRunawayCounter"); // 3236759435
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_MapRangeClamped(), "MapRangeClamped"); // 3324581479
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_MaxOfFloatArray(), "MaxOfFloatArray"); // 1288639024
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_MaxOfIntArray(), "MaxOfIntArray"); // 572968952
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_MinOfFloatArray(), "MinOfFloatArray"); // 4195268778
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_MinOfIntArray(), "MinOfIntArray"); // 2039525057
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Mobility__SetSceneCompMobility(), "Mobility__SetSceneCompMobility"); // 3657236611
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_NotEqual_Vector2DVector2D(), "NotEqual_Vector2DVector2D"); // 2548749413
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Open_URL_In_Web_Browser(), "Open_URL_In_Web_Browser"); // 1627365922
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_OperatingSystem__GetCurrentPlatform(), "OperatingSystem__GetCurrentPlatform"); // 193885467
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_OptionsMenu__GetDisplayAdapterScreenResolutions(), "OptionsMenu__GetDisplayAdapterScreenResolutions"); // 2056756873
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Physics__EnterRagDoll(), "Physics__EnterRagDoll"); // 1248260879
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Physics__GetLocationofRagDoll(), "Physics__GetLocationofRagDoll"); // 4078049097
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Physics__InitializeVictoryRagDoll(), "Physics__InitializeVictoryRagDoll"); // 191958327
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Physics__IsRagDoll(), "Physics__IsRagDoll"); // 1392478058
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Physics__LeaveRagDoll(), "Physics__LeaveRagDoll"); // 942737025
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Physics__UpdateCharacterCameraToRagdollLocation(), "Physics__UpdateCharacterCameraToRagdollLocation"); // 779474029
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_PlayerController_GetControllerID(), "PlayerController_GetControllerID"); // 2339591741
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_PlayerState_GetPlayerID(), "PlayerState_GetPlayerID"); // 3540496297
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_PlaySoundAtLocationFromFile(), "PlaySoundAtLocationFromFile"); // 291841026
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_PlaySoundAttachedFromFile(), "PlaySoundAttachedFromFile"); // 2833296306
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_PointDistanceToPlane(), "PointDistanceToPlane"); // 4136980377
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_ProjectWorldToScreenPosition(), "ProjectWorldToScreenPosition"); // 1663934925
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandBool_Bernoulli(), "RandBool_Bernoulli"); // 4222459335
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandBool_Bernoulli_MT(), "RandBool_Bernoulli_MT"); // 3386935439
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandFloat_MINMAX_uniDis(), "RandFloat_MINMAX_uniDis"); // 3816310164
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandFloat_MINMAX_uniDis_MT(), "RandFloat_MINMAX_uniDis_MT"); // 4106674525
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandFloat_uniDis(), "RandFloat_uniDis"); // 1932830869
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandFloat_uniDis_MT(), "RandFloat_uniDis_MT"); // 3917780374
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandInt_MINMAX_uniDis(), "RandInt_MINMAX_uniDis"); // 4130535111
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandInt_MINMAX_uniDis_MT(), "RandInt_MINMAX_uniDis_MT"); // 166426320
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandInt_uniDis(), "RandInt_uniDis"); // 315198055
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_RandInt_uniDis_MT(), "RandInt_uniDis_MT"); // 3103296700
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime(), "RealWorldTime__GetCurrentOSTime"); // 2147667256
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_RealWorldTime__GetDifferenceBetweenTimes(), "RealWorldTime__GetDifferenceBetweenTimes"); // 1164243157
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_RealWorldTime__GetTimePassedSincePreviousTime(), "RealWorldTime__GetTimePassedSincePreviousTime"); // 1853925786
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_RemoveAllWidgetsOfClass(), "RemoveAllWidgetsOfClass"); // 3373046437
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_RemoveFromStreamingLevels(), "RemoveFromStreamingLevels"); // 3379082697
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Rendering__FreezeGameRendering(), "Rendering__FreezeGameRendering"); // 1257150685
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Rendering__UnFreezeGameRendering(), "Rendering__UnFreezeGameRendering"); // 4214983029
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_SaveGameObject_GetAllSaveSlotFileNames(), "SaveGameObject_GetAllSaveSlotFileNames"); // 1919564899
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_ScreenShots_Rename_Move_Most_Recent(), "ScreenShots_Rename_Move_Most_Recent"); // 2780610969
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_seedRand(), "seedRand"); // 3189910701
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_seedRandWithEntropy(), "seedRandWithEntropy"); // 3393766689
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_seedRandWithTime(), "seedRandWithTime"); // 1694348537
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Selection_SelectionBox(), "Selection_SelectionBox"); // 641626112
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_ServerTravel(), "ServerTravel"); // 978133615
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_SetBloomIntensity(), "SetBloomIntensity"); // 3188919823
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_SetComponentTickRate(), "SetComponentTickRate"); // 2592409905
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_SetGenericTeamId(), "SetGenericTeamId"); // 3127803608
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_SpawnActorIntoLevel(), "SpawnActorIntoLevel"); // 395571201
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_String__CombineStrings(), "String__CombineStrings"); // 2519641818
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_String__CombineStrings_Multi(), "String__CombineStrings_Multi"); // 3384491424
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_String__ExplodeString(), "String__ExplodeString"); // 3252371629
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_StringConversion__GetFloatAsStringWithPrecision(), "StringConversion__GetFloatAsStringWithPrecision"); // 3366445546
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_StringIsEmpty(), "StringIsEmpty"); // 2814184235
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Text_IsNumeric(), "Text_IsNumeric"); // 1784639996
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Text_ToFloat(), "Text_ToFloat"); // 2689351759
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Text_ToInt(), "Text_ToInt"); // 4101690490
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_TraceData__GetTraceDataFromCharacterSocket(), "TraceData__GetTraceDataFromCharacterSocket"); // 1961620887
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_TraceData__GetTraceDataFromSkeletalMeshSocket(), "TraceData__GetTraceDataFromSkeletalMeshSocket"); // 1133547502
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestBone(), "Traces__CharacterMeshTrace___ClosestBone"); // 2778045740
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestSocket(), "Traces__CharacterMeshTrace___ClosestSocket"); // 3435340915
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_TransformVectorToActorSpace(), "TransformVectorToActorSpace"); // 425191090
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_TransformVectorToActorSpaceAngle(), "TransformVectorToActorSpaceAngle"); // 2878153876
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_UnloadStreamingLevel(), "UnloadStreamingLevel"); // 2420609546
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_UTCToLocal(), "UTCToLocal"); // 423782722
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Vector2DInterpTo(), "Vector2DInterpTo"); // 2632034466
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Vector2DInterpTo_Constant(), "Vector2DInterpTo_Constant"); // 2667691528
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VerticalFOV(), "VerticalFOV"); // 1583539804
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_AI_MoveToWithFilter(), "Victory_AI_MoveToWithFilter"); // 3129709780
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_Get_Pixel(), "Victory_Get_Pixel"); // 3498492116
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_GetGPUBrand(), "Victory_GetGPUBrand"); // 435620616
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_GetGPUInfo(), "Victory_GetGPUInfo"); // 2584193973
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_GetGRHIAdapterName(), "Victory_GetGRHIAdapterName"); // 1512713685
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_GetPixelFromT2D(), "Victory_GetPixelFromT2D"); // 1108352896
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_GetPixelsArrayFromT2D(), "Victory_GetPixelsArrayFromT2D"); // 4101812269
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_GetStringFromOSClipboard(), "Victory_GetStringFromOSClipboard"); // 1266568694
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile(), "Victory_LoadTexture2D_FromFile"); // 3114957470
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels(), "Victory_LoadTexture2D_FromFile_Pixels"); // 1460452108
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_SavePixels(), "Victory_SavePixels"); // 2346227588
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_SaveStringToOSClipboard(), "Victory_SaveStringToOSClipboard"); // 564232103
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Victory_SecondsToHoursMinutesSeconds(), "Victory_SecondsToHoursMinutesSeconds"); // 142726122
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryAppendInline(), "VictoryAppendInline"); // 512098847
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryCreateProc(), "VictoryCreateProc"); // 4262318650
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryDestructible_DestroyChunk(), "VictoryDestructible_DestroyChunk"); // 330017669
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryFloatMinusEquals(), "VictoryFloatMinusEquals"); // 1822629152
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryFloatPlusEquals(), "VictoryFloatPlusEquals"); // 3009812819
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetAllActionKeyBindings(), "VictoryGetAllActionKeyBindings"); // 4126874070
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetAllAxisAndActionMappingsForKey(), "VictoryGetAllAxisAndActionMappingsForKey"); // 2197125020
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetAllAxisKeyBindings(), "VictoryGetAllAxisKeyBindings"); // 1838123012
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetApplicationName(), "VictoryGetApplicationName"); // 2042826224
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Bool(), "VictoryGetCustomConfigVar_Bool"); // 2946867972
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Color(), "VictoryGetCustomConfigVar_Color"); // 3496378780
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Float(), "VictoryGetCustomConfigVar_Float"); // 3020095986
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Int(), "VictoryGetCustomConfigVar_Int"); // 4082775811
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Rotator(), "VictoryGetCustomConfigVar_Rotator"); // 3506552028
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetCustomConfigVar_String(), "VictoryGetCustomConfigVar_String"); // 4047003798
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector(), "VictoryGetCustomConfigVar_Vector"); // 2502042890
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector2D(), "VictoryGetCustomConfigVar_Vector2D"); // 1901038070
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetSoundVolume(), "VictoryGetSoundVolume"); // 562840917
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetVictoryInput(), "VictoryGetVictoryInput"); // 1855776213
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryGetVictoryInputAxis(), "VictoryGetVictoryInputAxis"); // 4214805324
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryIntMinusEquals(), "VictoryIntMinusEquals"); // 3073224771
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryIntPlusEquals(), "VictoryIntPlusEquals"); // 1364328780
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryIsApplicationRunning(), "VictoryIsApplicationRunning"); // 2155852634
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryISM_ConvertToVictoryISMActors(), "VictoryISM_ConvertToVictoryISMActors"); // 1798594516
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryISM_GetAllVictoryISMActors(), "VictoryISM_GetAllVictoryISMActors"); // 2081369238
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryLoadLevelInstance(), "VictoryLoadLevelInstance"); // 2745568146
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryPaths__ConfigDir(), "VictoryPaths__ConfigDir"); // 3265578617
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryPaths__GameRootDirectory(), "VictoryPaths__GameRootDirectory"); // 3871085689
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryPaths__LogsDir(), "VictoryPaths__LogsDir"); // 1321618159
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryPaths__SavedDir(), "VictoryPaths__SavedDir"); // 1671418921
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryPaths__ScreenShotsDir(), "VictoryPaths__ScreenShotsDir"); // 2248390494
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryPaths__Win64Dir_BinaryLocation(), "VictoryPaths__Win64Dir_BinaryLocation"); // 3831476042
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryPaths__WindowsNoEditorDir(), "VictoryPaths__WindowsNoEditorDir"); // 3157073122
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryPhysics_UpdateAngularDamping(), "VictoryPhysics_UpdateAngularDamping"); // 2799233975
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryReBindActionKey(), "VictoryReBindActionKey"); // 1198037075
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryReBindAxisKey(), "VictoryReBindAxisKey"); // 3596320821
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryRemoveActionKeyBind(), "VictoryRemoveActionKeyBind"); // 3608873506
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictoryRemoveAxisKeyBind(), "VictoryRemoveAxisKeyBind"); // 383121006
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySetCustomConfigVar_Bool(), "VictorySetCustomConfigVar_Bool"); // 1883451210
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySetCustomConfigVar_Color(), "VictorySetCustomConfigVar_Color"); // 691835769
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySetCustomConfigVar_Float(), "VictorySetCustomConfigVar_Float"); // 4166814769
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySetCustomConfigVar_Int(), "VictorySetCustomConfigVar_Int"); // 1195785759
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySetCustomConfigVar_Rotator(), "VictorySetCustomConfigVar_Rotator"); // 942085804
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySetCustomConfigVar_String(), "VictorySetCustomConfigVar_String"); // 1665692548
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector(), "VictorySetCustomConfigVar_Vector"); // 3891586447
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector2D(), "VictorySetCustomConfigVar_Vector2D"); // 243179177
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySimulateKeyPress(), "VictorySimulateKeyPress"); // 3226016978
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySimulateMouseWheel(), "VictorySimulateMouseWheel"); // 1539686310
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySortFloatArray(), "VictorySortFloatArray"); // 793722976
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySortIntArray(), "VictorySortIntArray"); // 47266480
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_VictorySoundVolumeChange(), "VictorySoundVolumeChange"); // 453770702
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Viewport__EnableWorldRendering(), "Viewport__EnableWorldRendering"); // 85109345
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Viewport__GetCenterOfViewport(), "Viewport__GetCenterOfViewport"); // 3925853260
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Viewport__GetMousePosition(), "Viewport__GetMousePosition"); // 1433264387
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Viewport__SetMousePosition(), "Viewport__SetMousePosition"); // 1569984620
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_ViewportPositionDeproject(), "ViewportPositionDeproject"); // 1090550105
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Visibility__GetNotRenderedActors(), "Visibility__GetNotRenderedActors"); // 1657837473
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_Visibility__GetRenderedActors(), "Visibility__GetRenderedActors"); // 892496756
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_WidgetGetChildrenOfClass(), "WidgetGetChildrenOfClass"); // 2906906004
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_WidgetGetParentOfClass(), "WidgetGetParentOfClass"); // 4041286839
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_WidgetIsChildOf(), "WidgetIsChildOf"); // 3483611834
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_WorldType__InEditorWorld(), "WorldType__InEditorWorld"); // 1120862778
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_WorldType__InGameInstanceWorld(), "WorldType__InGameInstanceWorld"); // 4289483049
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVictoryBPFunctionLibrary_WorldType__InPIEWorld(), "WorldType__InPIEWorld"); // 3149443967
				static TCppClassTypeInfo<TCppClassTypeTraits<UVictoryBPFunctionLibrary> > StaticCppClassTypeInfo;
				OuterClass->SetCppTypeInfo(&StaticCppClassTypeInfo);
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("VictoryBPFunctionLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/VictoryBPFunctionLibrary.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	IMPLEMENT_CLASS(UVictoryBPFunctionLibrary, 1331272465);
	static FCompiledInDefer Z_CompiledInDefer_UClass_UVictoryBPFunctionLibrary(Z_Construct_UClass_UVictoryBPFunctionLibrary, &UVictoryBPFunctionLibrary::StaticClass, TEXT("/Script/VictoryBPLibrary"), TEXT("UVictoryBPFunctionLibrary"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UVictoryBPFunctionLibrary);
#endif
PRAGMA_ENABLE_DEPRECATION_WARNINGS
#ifdef _MSC_VER
#pragma warning (pop)
#endif
PRAGMA_ENABLE_OPTIMIZATION
